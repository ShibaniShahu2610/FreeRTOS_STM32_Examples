
FreeRTOS_task_with_argument.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007748  08007748  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007750  08007750  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000074  080077cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  080077cc  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd49  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d6  00000000  00000000  0003be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001218  00000000  00000000  00040e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004979  00000000  00000000  00042070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001930e  00000000  00000000  000469e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f239  00000000  00000000  0005fcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069f4  00000000  00000000  0016ef30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00175924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007578 	.word	0x08007578

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007578 	.word	0x08007578

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fb6f 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f856 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8d2 	bl	8000740 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800059c:	f000 f8a4 	bl	80006e8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f003 fa78 	bl	8003a94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Start_Task_1, NULL, &Task_1_attributes);
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <main+0x80>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <main+0x84>)
 80005aa:	f003 fabd 	bl	8003b28 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a18      	ldr	r2, [pc, #96]	; (8000614 <main+0x88>)
 80005b2:	6013      	str	r3, [r2, #0]
  if(Task_1Handle == NULL)
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <main+0x88>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <main+0x36>
  {
	  printf("Failed to create task 1 (Thread 1)");
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <main+0x8c>)
 80005be:	f006 f8a7 	bl	8006710 <iprintf>
  }

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Start_Task_2, (void*) string1, &Task_2_attributes);
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0x90>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a16      	ldr	r2, [pc, #88]	; (8000620 <main+0x94>)
 80005c8:	4619      	mov	r1, r3
 80005ca:	4816      	ldr	r0, [pc, #88]	; (8000624 <main+0x98>)
 80005cc:	f003 faac 	bl	8003b28 <osThreadNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <main+0x9c>)
 80005d4:	6013      	str	r3, [r2, #0]
  if(Task_2Handle == NULL)
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <main+0x9c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d102      	bne.n	80005e4 <main+0x58>
  {
	  printf("Failed to create task 2 (Thread 2)");
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <main+0xa0>)
 80005e0:	f006 f896 	bl	8006710 <iprintf>
  }

  /* creation of Task_3 */
  Task_3Handle = osThreadNew(Start_Task_3, (void*) string2, &Task_3_attributes);
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0xa4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <main+0xa8>)
 80005ea:	4619      	mov	r1, r3
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0xac>)
 80005ee:	f003 fa9b 	bl	8003b28 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <main+0xb0>)
 80005f6:	6013      	str	r3, [r2, #0]
  if(Task_3Handle == NULL)
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0xb0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <main+0x7a>
  {
	  printf("Failed to create task 3 (Thread 3)");
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0xb4>)
 8000602:	f006 f885 	bl	8006710 <iprintf>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f003 fa69 	bl	8003adc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x7e>
 800060c:	08007660 	.word	0x08007660
 8000610:	080007d9 	.word	0x080007d9
 8000614:	20000118 	.word	0x20000118
 8000618:	080075c4 	.word	0x080075c4
 800061c:	20000000 	.word	0x20000000
 8000620:	08007684 	.word	0x08007684
 8000624:	08000805 	.word	0x08000805
 8000628:	2000011c 	.word	0x2000011c
 800062c:	080075e8 	.word	0x080075e8
 8000630:	20000004 	.word	0x20000004
 8000634:	080076a8 	.word	0x080076a8
 8000638:	08000831 	.word	0x08000831
 800063c:	20000120 	.word	0x20000120
 8000640:	0800760c 	.word	0x0800760c

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 f9a2 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f000 fdd5 	bl	8001218 <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f8fc 	bl	8000870 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2340      	movs	r3, #64	; 0x40
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000692:	230a      	movs	r3, #10
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fe1c 	bl	80012e4 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b2:	f000 f8dd 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	2104      	movs	r1, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fa21 	bl	8001b18 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006dc:	f000 f8c8 	bl	8000870 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3758      	adds	r7, #88	; 0x58
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_LPUART1_UART_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_LPUART1_UART_Init+0x50>)
 8000726:	f002 fbcb 	bl	8002ec0 <HAL_UART_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 f89e 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000090 	.word	0x20000090
 800073c:	40008000 	.word	0x40008000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <MX_GPIO_Init+0x90>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800076e:	f000 fda9 	bl	80012c4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_GPIO_Init+0x90>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0x94>)
 80007a8:	f000 fd10 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0x94>)
 80007c4:	f000 fb70 	bl	8000ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000400 	.word	0x48000400

080007d8 <Start_Task_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Task_1 */
void Start_Task_1(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("TASK-1\r\n");
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <Start_Task_1+0x24>)
 80007e2:	f005 fffb 	bl	80067dc <puts>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <Start_Task_1+0x28>)
 80007ec:	f000 fcee 	bl	80011cc <HAL_GPIO_WritePin>
    osDelay(2000);
 80007f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f4:	f003 fa2a 	bl	8003c4c <osDelay>
	printf("TASK-1\r\n");
 80007f8:	e7f2      	b.n	80007e0 <Start_Task_1+0x8>
 80007fa:	bf00      	nop
 80007fc:	08007630 	.word	0x08007630
 8000800:	48000400 	.word	0x48000400

08000804 <Start_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_2 */
void Start_Task_2(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_2 */
  /* Infinite loop */
  for(;;)
  {
	printf("TASK-2\r\n");
 800080c:	4806      	ldr	r0, [pc, #24]	; (8000828 <Start_Task_2+0x24>)
 800080e:	f005 ffe5 	bl	80067dc <puts>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <Start_Task_2+0x28>)
 8000818:	f000 fcd8 	bl	80011cc <HAL_GPIO_WritePin>

    osDelay(4000);
 800081c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000820:	f003 fa14 	bl	8003c4c <osDelay>
	printf("TASK-2\r\n");
 8000824:	e7f2      	b.n	800080c <Start_Task_2+0x8>
 8000826:	bf00      	nop
 8000828:	08007638 	.word	0x08007638
 800082c:	48000400 	.word	0x48000400

08000830 <Start_Task_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_3 */
void Start_Task_3(void *argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_3 */
  /* Infinite loop */
  for(;;)
  {
	printf("TASK-3\r\n");
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <Start_Task_3+0x18>)
 800083a:	f005 ffcf 	bl	80067dc <puts>
    osDelay(6000);
 800083e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000842:	f003 fa03 	bl	8003c4c <osDelay>
	printf("TASK-3\r\n");
 8000846:	e7f7      	b.n	8000838 <Start_Task_3+0x8>
 8000848:	08007640 	.word	0x08007640

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f000 fa21 	bl	8000ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40001000 	.word	0x40001000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_MspInit+0x4c>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	; 0x60
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_MspInit+0x4c>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_MspInit+0x4c>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 facb 	bl	8000e54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0ac      	sub	sp, #176	; 0xb0
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	228c      	movs	r2, #140	; 0x8c
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 f855 	bl	800699c <memset>
  if(huart->Instance==LPUART1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <HAL_UART_MspInit+0xb4>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d13d      	bne.n	8000978 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008fc:	2320      	movs	r3, #32
 80008fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000900:	2300      	movs	r3, #0
 8000902:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fb5b 	bl	8001fc4 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000914:	f7ff ffac 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_UART_MspInit+0xb8>)
 800091a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_MspInit+0xb8>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_UART_MspInit+0xb8>)
 8000926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_UART_MspInit+0xb8>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <HAL_UART_MspInit+0xb8>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0xb8>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000948:	f000 fcbc 	bl	80012c4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800094c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000966:	2308      	movs	r3, #8
 8000968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <HAL_UART_MspInit+0xbc>)
 8000974:	f000 fa98 	bl	8000ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	37b0      	adds	r7, #176	; 0xb0
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40008000 	.word	0x40008000
 8000984:	40021000 	.word	0x40021000
 8000988:	48001800 	.word	0x48001800

0800098c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <HAL_InitTick+0xe0>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <HAL_InitTick+0xe0>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <HAL_InitTick+0xe0>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b2:	f107 0210 	add.w	r2, r7, #16
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa6f 	bl	8001ea0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d103      	bne.n	80009d4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009cc:	f001 fa3c 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80009d0:	6378      	str	r0, [r7, #52]	; 0x34
 80009d2:	e004      	b.n	80009de <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d4:	f001 fa38 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80009d8:	4603      	mov	r3, r0
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e0:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_InitTick+0xe4>)
 80009e2:	fba2 2303 	umull	r2, r3, r2, r3
 80009e6:	0c9b      	lsrs	r3, r3, #18
 80009e8:	3b01      	subs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_InitTick+0xe8>)
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <HAL_InitTick+0xec>)
 80009f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_InitTick+0xe8>)
 80009f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_InitTick+0xe8>)
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a14:	f001 ffa0 	bl	8002958 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11b      	bne.n	8000a5e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a28:	f001 fff8 	bl	8002a1c <HAL_TIM_Base_Start_IT>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d111      	bne.n	8000a5e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a3a:	2036      	movs	r0, #54	; 0x36
 8000a3c:	f000 fa26 	bl	8000e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d808      	bhi.n	8000a58 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	2036      	movs	r0, #54	; 0x36
 8000a4c:	f000 fa02 	bl	8000e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e002      	b.n	8000a5e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3738      	adds	r7, #56	; 0x38
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	20000124 	.word	0x20000124
 8000a78:	40001000 	.word	0x40001000
 8000a7c:	2000000c 	.word	0x2000000c

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM6_DAC_IRQHandler+0x10>)
 8000ab2:	f002 f823 	bl	8002afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000124 	.word	0x20000124

08000ac0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
  }

  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, 1000);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <_write+0x28>)
 8000b14:	f002 fa22 	bl	8002f5c <HAL_UART_Transmit>
  return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000090 	.word	0x20000090

08000b28 <_close>:

int _close(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b50:	605a      	str	r2, [r3, #4]
  return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_isatty>:

int _isatty(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f005 ff90 	bl	8006ae4 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20050000 	.word	0x20050000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000170 	.word	0x20000170
 8000bf8:	20001c68 	.word	0x20001c68

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f005 ff4f 	bl	8006af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fc9b 	bl	800058c <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c64:	08007758 	.word	0x08007758
  ldr r2, =_sbss
 8000c68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c6c:	20001c64 	.word	0x20001c64

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>

08000c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8de 	bl	8000e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fe82 	bl	800098c <HAL_InitTick>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	e001      	b.n	8000c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c94:	f7ff fdf2 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000010 	.word	0x20000010
 8000cc8:	20000174 	.word	0x20000174

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000174 	.word	0x20000174

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff4c 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e66:	f7ff ff61 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f7ff ffb1 	bl	8000dd8 <NVIC_EncodePriority>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff80 	bl	8000d84 <__NVIC_SetPriority>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff54 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e166      	b.n	8001186 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8158 	beq.w	8001180 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80b2 	beq.w	8001180 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b61      	ldr	r3, [pc, #388]	; (80011a4 <HAL_GPIO_Init+0x2fc>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	4a60      	ldr	r2, [pc, #384]	; (80011a4 <HAL_GPIO_Init+0x2fc>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6613      	str	r3, [r2, #96]	; 0x60
 8001028:	4b5e      	ldr	r3, [pc, #376]	; (80011a4 <HAL_GPIO_Init+0x2fc>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	4a5c      	ldr	r2, [pc, #368]	; (80011a8 <HAL_GPIO_Init+0x300>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800105e:	d02b      	beq.n	80010b8 <HAL_GPIO_Init+0x210>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d025      	beq.n	80010b4 <HAL_GPIO_Init+0x20c>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x308>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d01f      	beq.n	80010b0 <HAL_GPIO_Init+0x208>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x30c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d019      	beq.n	80010ac <HAL_GPIO_Init+0x204>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x310>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d013      	beq.n	80010a8 <HAL_GPIO_Init+0x200>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x314>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d00d      	beq.n	80010a4 <HAL_GPIO_Init+0x1fc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x318>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d007      	beq.n	80010a0 <HAL_GPIO_Init+0x1f8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x31c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_GPIO_Init+0x1f4>
 8001098:	2307      	movs	r3, #7
 800109a:	e00e      	b.n	80010ba <HAL_GPIO_Init+0x212>
 800109c:	2308      	movs	r3, #8
 800109e:	e00c      	b.n	80010ba <HAL_GPIO_Init+0x212>
 80010a0:	2306      	movs	r3, #6
 80010a2:	e00a      	b.n	80010ba <HAL_GPIO_Init+0x212>
 80010a4:	2305      	movs	r3, #5
 80010a6:	e008      	b.n	80010ba <HAL_GPIO_Init+0x212>
 80010a8:	2304      	movs	r3, #4
 80010aa:	e006      	b.n	80010ba <HAL_GPIO_Init+0x212>
 80010ac:	2303      	movs	r3, #3
 80010ae:	e004      	b.n	80010ba <HAL_GPIO_Init+0x212>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x212>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_GPIO_Init+0x212>
 80010b8:	2300      	movs	r3, #0
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ca:	4937      	ldr	r1, [pc, #220]	; (80011a8 <HAL_GPIO_Init+0x300>)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_GPIO_Init+0x320>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fc:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <HAL_GPIO_Init+0x320>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_GPIO_Init+0x320>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_GPIO_Init+0x320>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_GPIO_Init+0x320>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_GPIO_Init+0x320>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_GPIO_Init+0x320>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_GPIO_Init+0x320>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	f47f ae91 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	48000400 	.word	0x48000400
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000c00 	.word	0x48000c00
 80011b8:	48001000 	.word	0x48001000
 80011bc:	48001400 	.word	0x48001400
 80011c0:	48001800 	.word	0x48001800
 80011c4:	48001c00 	.word	0x48001c00
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_PWREx_GetVoltageRange+0x18>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40007000 	.word	0x40007000

08001218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001226:	d130      	bne.n	800128a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001234:	d038      	beq.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2232      	movs	r2, #50	; 0x32
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800125c:	e002      	b.n	8001264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3b01      	subs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001270:	d102      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f2      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001284:	d110      	bne.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e00f      	b.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001296:	d007      	beq.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007000 	.word	0x40007000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	431bde83 	.word	0x431bde83

080012c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6053      	str	r3, [r2, #4]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f000 bc08 	b.w	8001b08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f8:	4b96      	ldr	r3, [pc, #600]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001302:	4b94      	ldr	r3, [pc, #592]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80e4 	beq.w	80014e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_RCC_OscConfig+0x4c>
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	f040 808b 	bne.w	800143e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b01      	cmp	r3, #1
 800132c:	f040 8087 	bne.w	800143e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x64>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e3df      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_RCC_OscConfig+0x7e>
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001360:	e005      	b.n	800136e <HAL_RCC_OscConfig+0x8a>
 8001362:	4b7c      	ldr	r3, [pc, #496]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800136e:	4293      	cmp	r3, r2
 8001370:	d223      	bcs.n	80013ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fdc4 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e3c0      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a72      	ldr	r2, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	496d      	ldr	r1, [pc, #436]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a4:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	4968      	ldr	r1, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e025      	b.n	8001406 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ba:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4960      	ldr	r1, [pc, #384]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d8:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	495b      	ldr	r1, [pc, #364]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fd84 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e380      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001406:	f000 fc87 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 800140a:	4602      	mov	r2, r0
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4950      	ldr	r1, [pc, #320]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 8001418:	5ccb      	ldrb	r3, [r1, r3]
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a4e      	ldr	r2, [pc, #312]	; (800155c <HAL_RCC_OscConfig+0x278>)
 8001424:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x27c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff faae 	bl	800098c <HAL_InitTick>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d052      	beq.n	80014e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	e364      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d032      	beq.n	80014ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001446:	4b43      	ldr	r3, [pc, #268]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a42      	ldr	r2, [pc, #264]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001452:	f7ff fc3b 	bl	8000ccc <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145a:	f7ff fc37 	bl	8000ccc <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e34d      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a35      	ldr	r2, [pc, #212]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4930      	ldr	r1, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	492b      	ldr	r1, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
 80014aa:	e01a      	b.n	80014e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fc08 	bl	8000ccc <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc04 	bl	8000ccc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e31a      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1dc>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d073      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x21c>
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d10e      	bne.n	8001518 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d063      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d15f      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e2f7      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x24c>
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e025      	b.n	800157c <HAL_RCC_OscConfig+0x298>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001538:	d114      	bne.n	8001564 <HAL_RCC_OscConfig+0x280>
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a02      	ldr	r2, [pc, #8]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e013      	b.n	800157c <HAL_RCC_OscConfig+0x298>
 8001554:	40021000 	.word	0x40021000
 8001558:	080076cc 	.word	0x080076cc
 800155c:	20000008 	.word	0x20000008
 8001560:	2000000c 	.word	0x2000000c
 8001564:	4ba0      	ldr	r3, [pc, #640]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a9f      	ldr	r2, [pc, #636]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b9d      	ldr	r3, [pc, #628]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a9c      	ldr	r2, [pc, #624]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fba2 	bl	8000ccc <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fb9e 	bl	8000ccc <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e2b4      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x2a8>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb8e 	bl	8000ccc <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb8a 	bl	8000ccc <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e2a0      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2d0>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d060      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x310>
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d116      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x328>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e27d      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	4973      	ldr	r1, [pc, #460]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	e040      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d023      	beq.n	8001672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fb49 	bl	8000ccc <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fb45 	bl	8000ccc <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e25b      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	061b      	lsls	r3, r3, #24
 800166a:	495f      	ldr	r1, [pc, #380]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	e018      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5c      	ldr	r2, [pc, #368]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fb25 	bl	8000ccc <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fb21 	bl	8000ccc <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e237      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03c      	beq.n	800172a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016be:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb00 	bl	8000ccc <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fafc 	bl	8000ccc <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e212      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ef      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3ec>
 80016f0:	e01b      	b.n	800172a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f8:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fae3 	bl	8000ccc <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fadf 	bl	8000ccc <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1f5      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a6 	beq.w	8001884 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001760:	2301      	movs	r3, #1
 8001762:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d118      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177c:	f7ff faa6 	bl	8000ccc <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7ff faa2 	bl	8000ccc <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1b8      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d8>
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ba:	e029      	b.n	8001810 <HAL_RCC_OscConfig+0x52c>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d115      	bne.n	80017f0 <HAL_RCC_OscConfig+0x50c>
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x52c>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	4b9d      	ldr	r3, [pc, #628]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	4a9c      	ldr	r2, [pc, #624]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001800:	4b99      	ldr	r3, [pc, #612]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	4a98      	ldr	r2, [pc, #608]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d016      	beq.n	8001846 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fa58 	bl	8000ccc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff fa54 	bl	8000ccc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e168      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ed      	beq.n	8001820 <HAL_RCC_OscConfig+0x53c>
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fa41 	bl	8000ccc <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fa3d 	bl	8000ccc <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e151      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001864:	4b80      	ldr	r3, [pc, #512]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ed      	bne.n	800184e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001872:	7ffb      	ldrb	r3, [r7, #31]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d03c      	beq.n	800190a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001898:	4b73      	ldr	r3, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 800189a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189e:	4a72      	ldr	r2, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fa10 	bl	8000ccc <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b0:	f7ff fa0c 	bl	8000ccc <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e122      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c2:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ef      	beq.n	80018b0 <HAL_RCC_OscConfig+0x5cc>
 80018d0:	e01b      	b.n	800190a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018d2:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d8:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff f9f3 	bl	8000ccc <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ea:	f7ff f9ef 	bl	8000ccc <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e105      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018fc:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80f9 	beq.w	8001b06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	2b02      	cmp	r3, #2
 800191a:	f040 80cf 	bne.w	8001abc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800191e:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0203 	and.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	429a      	cmp	r2, r3
 8001930:	d12c      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	3b01      	subs	r3, #1
 800193e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d123      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d11b      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d113      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d109      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d071      	beq.n	8001a70 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d068      	beq.n	8001a64 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0ac      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ba:	f7ff f987 	bl	8000ccc <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f983 	bl	8000ccc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e099      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x788>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019f0:	3a01      	subs	r2, #1
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a02:	0852      	lsrs	r2, r2, #1
 8001a04:	3a01      	subs	r2, #1
 8001a06:	0552      	lsls	r2, r2, #21
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a0e:	0852      	lsrs	r2, r2, #1
 8001a10:	3a01      	subs	r2, #1
 8001a12:	0652      	lsls	r2, r2, #25
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a1a:	06d2      	lsls	r2, r2, #27
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4912      	ldr	r1, [pc, #72]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a3c:	f7ff f946 	bl	8000ccc <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f942 	bl	8000ccc <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e058      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a62:	e050      	b.n	8001b06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e04f      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d144      	bne.n	8001b06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a94:	f7ff f91a 	bl	8000ccc <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f916 	bl	8000ccc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e02c      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x7b8>
 8001aba:	e024      	b.n	8001b06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d01f      	beq.n	8001b02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f8fd 	bl	8000ccc <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f8f9 	bl	8000ccc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e00f      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4905      	ldr	r1, [pc, #20]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_RCC_OscConfig+0x830>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e001      	b.n	8001b06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	feeefffc 	.word	0xfeeefffc

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0e7      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4970      	ldr	r1, [pc, #448]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0cf      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d908      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4960      	ldr	r1, [pc, #384]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d04c      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0a6      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e09a      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bce:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e086      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4943      	ldr	r1, [pc, #268]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c00:	f7ff f864 	bl	8000ccc <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7ff f860 	bl	8000ccc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e06e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d208      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	492b      	ldr	r1, [pc, #172]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d210      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	4923      	ldr	r1, [pc, #140]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e036      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4918      	ldr	r1, [pc, #96]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4910      	ldr	r1, [pc, #64]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ccc:	f000 f824 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	490b      	ldr	r1, [pc, #44]	; (8001d0c <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1fc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fe4b 	bl	800098c <HAL_InitTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	080076cc 	.word	0x080076cc
 8001d10:	20000008 	.word	0x20000008
 8001d14:	2000000c 	.word	0x2000000c

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x34>
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d121      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d11e      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d74:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	e004      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d134      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d003      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001dbc:	e005      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc0:	617b      	str	r3, [r7, #20]
      break;
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc6:	617b      	str	r3, [r7, #20]
      break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	617b      	str	r3, [r7, #20]
      break;
 8001dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	fb03 f202 	mul.w	r2, r3, r2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	0e5b      	lsrs	r3, r3, #25
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	3301      	adds	r3, #1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e10:	69bb      	ldr	r3, [r7, #24]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	080076e4 	.word	0x080076e4
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200

08001e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4904      	ldr	r1, [pc, #16]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080076dc 	.word	0x080076dc

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e78:	f7ff ffda 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4904      	ldr	r1, [pc, #16]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	080076dc 	.word	0x080076dc

08001ea0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	220f      	movs	r2, #15
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_GetClockConfig+0x5c>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCC_GetClockConfig+0x60>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0207 	and.w	r2, r3, #7
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40022000 	.word	0x40022000

08001f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f1c:	f7ff f96e 	bl	80011fc <HAL_PWREx_GetVoltageRange>
 8001f20:	6178      	str	r0, [r7, #20]
 8001f22:	e014      	b.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f3c:	f7ff f95e 	bl	80011fc <HAL_PWREx_GetVoltageRange>
 8001f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f54:	d10b      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	; 0x80
 8001f5a:	d919      	bls.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f60:	d902      	bls.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e013      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e010      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d902      	bls.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f74:	2303      	movs	r3, #3
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e00a      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d102      	bne.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f80:	2302      	movs	r3, #2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e004      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b70      	cmp	r3, #112	; 0x70
 8001f8a:	d101      	bne.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fcc:	2300      	movs	r3, #0
 8001fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d041      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fe8:	d02a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fee:	d824      	bhi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ff4:	d008      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ffa:	d81e      	bhi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002004:	d010      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002006:	e018      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002008:	4b86      	ldr	r3, [pc, #536]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a85      	ldr	r2, [pc, #532]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002014:	e015      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f000 facd 	bl	80025bc <RCCEx_PLLSAI1_Config>
 8002022:	4603      	mov	r3, r0
 8002024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002026:	e00c      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3320      	adds	r3, #32
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fbb6 	bl	80027a0 <RCCEx_PLLSAI2_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002038:	e003      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	74fb      	strb	r3, [r7, #19]
      break;
 800203e:	e000      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002042:	7cfb      	ldrb	r3, [r7, #19]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002048:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002056:	4973      	ldr	r1, [pc, #460]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800205e:	e001      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d041      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002074:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002078:	d02a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800207a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800207e:	d824      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002080:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002084:	d008      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800208a:	d81e      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002094:	d010      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002096:	e018      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002098:	4b62      	ldr	r3, [pc, #392]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a61      	ldr	r2, [pc, #388]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a4:	e015      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fa85 	bl	80025bc <RCCEx_PLLSAI1_Config>
 80020b2:	4603      	mov	r3, r0
 80020b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b6:	e00c      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3320      	adds	r3, #32
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fb6e 	bl	80027a0 <RCCEx_PLLSAI2_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c8:	e003      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	74fb      	strb	r3, [r7, #19]
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e6:	494f      	ldr	r1, [pc, #316]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ee:	e001      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a0 	beq.w	8002242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002116:	2300      	movs	r3, #0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002134:	2301      	movs	r3, #1
 8002136:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002144:	f7fe fdc2 	bl	8000ccc <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800214a:	e009      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe fdbe 	bl	8000ccc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d902      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	74fb      	strb	r3, [r7, #19]
        break;
 800215e:	e005      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ef      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d15c      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002172:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01f      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	d019      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fd7d 	bl	8000ccc <HAL_GetTick>
 80021d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d4:	e00b      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fd79 	bl	8000ccc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d902      	bls.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	74fb      	strb	r3, [r7, #19]
            break;
 80021ec:	e006      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ec      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4904      	ldr	r1, [pc, #16]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800221a:	e009      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
 8002220:	e006      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002230:	7c7b      	ldrb	r3, [r7, #17]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4ba6      	ldr	r3, [pc, #664]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	4aa5      	ldr	r2, [pc, #660]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224e:	4ba0      	ldr	r3, [pc, #640]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f023 0203 	bic.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	499c      	ldr	r1, [pc, #624]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002270:	4b97      	ldr	r3, [pc, #604]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f023 020c 	bic.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	4994      	ldr	r1, [pc, #592]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	498b      	ldr	r1, [pc, #556]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4983      	ldr	r1, [pc, #524]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d6:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	497a      	ldr	r1, [pc, #488]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	4972      	ldr	r1, [pc, #456]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002328:	4969      	ldr	r1, [pc, #420]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800233c:	4b64      	ldr	r3, [pc, #400]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234a:	4961      	ldr	r1, [pc, #388]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236c:	4958      	ldr	r1, [pc, #352]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	4950      	ldr	r1, [pc, #320]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a2:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	4947      	ldr	r1, [pc, #284]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023c4:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	493f      	ldr	r1, [pc, #252]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d028      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4936      	ldr	r1, [pc, #216]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002404:	d106      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002406:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002410:	60d3      	str	r3, [r2, #12]
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f8c9 	bl	80025bc <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d028      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	491f      	ldr	r1, [pc, #124]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002462:	d106      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
 8002470:	e011      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800247a:	d10c      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f89a 	bl	80025bc <RCCEx_PLLSAI1_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d02a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b0:	4907      	ldr	r1, [pc, #28]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c0:	d108      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4a02      	ldr	r2, [pc, #8]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024cc:	60d3      	str	r3, [r2, #12]
 80024ce:	e013      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80024d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2101      	movs	r1, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f869 	bl	80025bc <RCCEx_PLLSAI1_Config>
 80024ea:	4603      	mov	r3, r0
 80024ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d02f      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002504:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002512:	4929      	ldr	r1, [pc, #164]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002522:	d10d      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f846 	bl	80025bc <RCCEx_PLLSAI1_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d014      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	74bb      	strb	r3, [r7, #18]
 800253e:	e011      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002548:	d10c      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3320      	adds	r3, #32
 800254e:	2102      	movs	r1, #2
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f925 	bl	80027a0 <RCCEx_PLLSAI2_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002580:	490d      	ldr	r1, [pc, #52]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a4:	4904      	ldr	r1, [pc, #16]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000

080025bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ca:	4b74      	ldr	r3, [pc, #464]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d018      	beq.n	8002608 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025d6:	4b71      	ldr	r3, [pc, #452]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d10d      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ee:	4b6b      	ldr	r3, [pc, #428]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
       ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d047      	beq.n	8002692 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e044      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d018      	beq.n	8002642 <RCCEx_PLLSAI1_Config+0x86>
 8002610:	2b03      	cmp	r3, #3
 8002612:	d825      	bhi.n	8002660 <RCCEx_PLLSAI1_Config+0xa4>
 8002614:	2b01      	cmp	r3, #1
 8002616:	d002      	beq.n	800261e <RCCEx_PLLSAI1_Config+0x62>
 8002618:	2b02      	cmp	r3, #2
 800261a:	d009      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x74>
 800261c:	e020      	b.n	8002660 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800261e:	4b5f      	ldr	r3, [pc, #380]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11d      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262e:	e01a      	b.n	8002666 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002630:	4b5a      	ldr	r3, [pc, #360]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002640:	e013      	b.n	800266a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002642:	4b56      	ldr	r3, [pc, #344]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800264e:	4b53      	ldr	r3, [pc, #332]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800265e:	e006      	b.n	800266e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	e004      	b.n	8002670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002676:	4b49      	ldr	r3, [pc, #292]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	430b      	orrs	r3, r1
 800268c:	4943      	ldr	r1, [pc, #268]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d17c      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3f      	ldr	r2, [pc, #252]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe fb12 	bl	8000ccc <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026aa:	e009      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ac:	f7fe fb0e 	bl	8000ccc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	73fb      	strb	r3, [r7, #15]
        break;
 80026be:	e005      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ef      	bne.n	80026ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d15f      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d110      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80026e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6892      	ldr	r2, [r2, #8]
 80026e8:	0211      	lsls	r1, r2, #8
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	06d2      	lsls	r2, r2, #27
 80026f0:	430a      	orrs	r2, r1
 80026f2:	492a      	ldr	r1, [pc, #168]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	610b      	str	r3, [r1, #16]
 80026f8:	e027      	b.n	800274a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d112      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	0211      	lsls	r1, r2, #8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6912      	ldr	r2, [r2, #16]
 8002716:	0852      	lsrs	r2, r2, #1
 8002718:	3a01      	subs	r2, #1
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	430a      	orrs	r2, r1
 800271e:	491f      	ldr	r1, [pc, #124]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	4313      	orrs	r3, r2
 8002722:	610b      	str	r3, [r1, #16]
 8002724:	e011      	b.n	800274a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800272e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6892      	ldr	r2, [r2, #8]
 8002736:	0211      	lsls	r1, r2, #8
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6952      	ldr	r2, [r2, #20]
 800273c:	0852      	lsrs	r2, r2, #1
 800273e:	3a01      	subs	r2, #1
 8002740:	0652      	lsls	r2, r2, #25
 8002742:	430a      	orrs	r2, r1
 8002744:	4915      	ldr	r1, [pc, #84]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a13      	ldr	r2, [pc, #76]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002754:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7fe fab9 	bl	8000ccc <HAL_GetTick>
 800275a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800275c:	e009      	b.n	8002772 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800275e:	f7fe fab5 	bl	8000ccc <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d902      	bls.n	8002772 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	73fb      	strb	r3, [r7, #15]
          break;
 8002770:	e005      	b.n	800277e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ef      	beq.n	800275e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d106      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <RCCEx_PLLSAI1_Config+0x1e0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000

080027a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ae:	4b69      	ldr	r3, [pc, #420]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d018      	beq.n	80027ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027ba:	4b66      	ldr	r3, [pc, #408]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0203 	and.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d10d      	bne.n	80027e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
       ||
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027d2:	4b60      	ldr	r3, [pc, #384]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
       ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d047      	beq.n	8002876 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	e044      	b.n	8002876 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d018      	beq.n	8002826 <RCCEx_PLLSAI2_Config+0x86>
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d825      	bhi.n	8002844 <RCCEx_PLLSAI2_Config+0xa4>
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d002      	beq.n	8002802 <RCCEx_PLLSAI2_Config+0x62>
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d009      	beq.n	8002814 <RCCEx_PLLSAI2_Config+0x74>
 8002800:	e020      	b.n	8002844 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002802:	4b54      	ldr	r3, [pc, #336]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d11d      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002812:	e01a      	b.n	800284a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002814:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d116      	bne.n	800284e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002824:	e013      	b.n	800284e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002826:	4b4b      	ldr	r3, [pc, #300]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002832:	4b48      	ldr	r3, [pc, #288]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002842:	e006      	b.n	8002852 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      break;
 8002848:	e004      	b.n	8002854 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800284a:	bf00      	nop
 800284c:	e002      	b.n	8002854 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002852:	bf00      	nop
    }

    if(status == HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800285a:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	430b      	orrs	r3, r1
 8002870:	4938      	ldr	r1, [pc, #224]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d166      	bne.n	800294a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a34      	ldr	r2, [pc, #208]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002888:	f7fe fa20 	bl	8000ccc <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800288e:	e009      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002890:	f7fe fa1c 	bl	8000ccc <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d902      	bls.n	80028a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	73fb      	strb	r3, [r7, #15]
        break;
 80028a2:	e005      	b.n	80028b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ef      	bne.n	8002890 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d149      	bne.n	800294a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d110      	bne.n	80028de <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6892      	ldr	r2, [r2, #8]
 80028cc:	0211      	lsls	r1, r2, #8
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	06d2      	lsls	r2, r2, #27
 80028d4:	430a      	orrs	r2, r1
 80028d6:	491f      	ldr	r1, [pc, #124]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	614b      	str	r3, [r1, #20]
 80028dc:	e011      	b.n	8002902 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	0211      	lsls	r1, r2, #8
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6912      	ldr	r2, [r2, #16]
 80028f4:	0852      	lsrs	r2, r2, #1
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0652      	lsls	r2, r2, #25
 80028fa:	430a      	orrs	r2, r1
 80028fc:	4915      	ldr	r1, [pc, #84]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a13      	ldr	r2, [pc, #76]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe f9dd 	bl	8000ccc <HAL_GetTick>
 8002912:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002914:	e009      	b.n	800292a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002916:	f7fe f9d9 	bl	8000ccc <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d902      	bls.n	800292a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	73fb      	strb	r3, [r7, #15]
          break;
 8002928:	e005      	b.n	8002936 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ef      	beq.n	8002916 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e049      	b.n	80029fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f841 	bl	8002a06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f000 f9da 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04f      	b.n	8002ad4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01d      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d018      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_TIM_Base_Start_IT+0xd0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d115      	bne.n	8002abe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d015      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aaa:	d011      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abc:	e008      	b.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e000      	b.n	8002ad2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	40013400 	.word	0x40013400
 8002af4:	40014000 	.word	0x40014000
 8002af8:	00010007 	.word	0x00010007

08002afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d020      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0202 	mvn.w	r2, #2
 8002b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8e4 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8d6 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8e7 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d020      	beq.n	8002bac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01b      	beq.n	8002bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0204 	mvn.w	r2, #4
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8be 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8b0 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8c1 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d020      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01b      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0208 	mvn.w	r2, #8
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f898 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f88a 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f89b 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d020      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01b      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0210 	mvn.w	r2, #16
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f872 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e005      	b.n	8002c3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f864 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f875 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0201 	mvn.w	r2, #1
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fd fdf2 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00c      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f906 	bl	8002e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8fe 	bl	8002eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f834 	bl	8002d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0220 	mvn.w	r2, #32
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8c6 	bl	8002e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a40      	ldr	r2, [pc, #256]	; (8002e64 <TIM_Base_SetConfig+0x114>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d00f      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <TIM_Base_SetConfig+0x118>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <TIM_Base_SetConfig+0x11c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <TIM_Base_SetConfig+0x120>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <TIM_Base_SetConfig+0x124>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d108      	bne.n	8002da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <TIM_Base_SetConfig+0x114>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d01b      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <TIM_Base_SetConfig+0x118>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d017      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <TIM_Base_SetConfig+0x11c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <TIM_Base_SetConfig+0x120>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00f      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <TIM_Base_SetConfig+0x124>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <TIM_Base_SetConfig+0x128>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <TIM_Base_SetConfig+0x12c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <TIM_Base_SetConfig+0x130>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d108      	bne.n	8002dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <TIM_Base_SetConfig+0x114>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00f      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <TIM_Base_SetConfig+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <TIM_Base_SetConfig+0x128>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <TIM_Base_SetConfig+0x130>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40013400 	.word	0x40013400
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800

08002e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e040      	b.n	8002f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fcf2 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fb6a 	bl	80035e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8af 	bl	8003070 <UART_SetConfig>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e01b      	b.n	8002f54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fbe9 	bl	8003724 <UART_CheckIdleState>
 8002f52:	4603      	mov	r3, r0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d178      	bne.n	8003066 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_UART_Transmit+0x24>
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e071      	b.n	8003068 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2221      	movs	r2, #33	; 0x21
 8002f90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f92:	f7fd fe9b 	bl	8000ccc <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	88fa      	ldrh	r2, [r7, #6]
 8002f9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d108      	bne.n	8002fc4 <HAL_UART_Transmit+0x68>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e003      	b.n	8002fcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fcc:	e030      	b.n	8003030 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fc4b 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e03c      	b.n	8003068 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003000:	b292      	uxth	r2, r2
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	3302      	adds	r3, #2
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e008      	b.n	800301e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b292      	uxth	r2, r2
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3301      	adds	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1c8      	bne.n	8002fce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fc14 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e005      	b.n	8003068 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b08a      	sub	sp, #40	; 0x28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	431a      	orrs	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4313      	orrs	r3, r2
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4ba4      	ldr	r3, [pc, #656]	; (8003330 <UART_SetConfig+0x2c0>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a99      	ldr	r2, [pc, #612]	; (8003334 <UART_SetConfig+0x2c4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	4313      	orrs	r3, r2
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a90      	ldr	r2, [pc, #576]	; (8003338 <UART_SetConfig+0x2c8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d126      	bne.n	8003148 <UART_SetConfig+0xd8>
 80030fa:	4b90      	ldr	r3, [pc, #576]	; (800333c <UART_SetConfig+0x2cc>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b03      	cmp	r3, #3
 8003106:	d81b      	bhi.n	8003140 <UART_SetConfig+0xd0>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <UART_SetConfig+0xa0>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003121 	.word	0x08003121
 8003114:	08003131 	.word	0x08003131
 8003118:	08003129 	.word	0x08003129
 800311c:	08003139 	.word	0x08003139
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e116      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003128:	2302      	movs	r3, #2
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e112      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003130:	2304      	movs	r3, #4
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e10e      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003138:	2308      	movs	r3, #8
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	e10a      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003140:	2310      	movs	r3, #16
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e106      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <UART_SetConfig+0x2d0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d138      	bne.n	80031c4 <UART_SetConfig+0x154>
 8003152:	4b7a      	ldr	r3, [pc, #488]	; (800333c <UART_SetConfig+0x2cc>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d82d      	bhi.n	80031bc <UART_SetConfig+0x14c>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <UART_SetConfig+0xf8>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800319d 	.word	0x0800319d
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031bd 	.word	0x080031bd
 8003174:	080031bd 	.word	0x080031bd
 8003178:	080031ad 	.word	0x080031ad
 800317c:	080031bd 	.word	0x080031bd
 8003180:	080031bd 	.word	0x080031bd
 8003184:	080031bd 	.word	0x080031bd
 8003188:	080031a5 	.word	0x080031a5
 800318c:	080031bd 	.word	0x080031bd
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031b5 	.word	0x080031b5
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e0d8      	b.n	8003356 <UART_SetConfig+0x2e6>
 80031a4:	2302      	movs	r3, #2
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e0d4      	b.n	8003356 <UART_SetConfig+0x2e6>
 80031ac:	2304      	movs	r3, #4
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	e0d0      	b.n	8003356 <UART_SetConfig+0x2e6>
 80031b4:	2308      	movs	r3, #8
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ba:	e0cc      	b.n	8003356 <UART_SetConfig+0x2e6>
 80031bc:	2310      	movs	r3, #16
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c2:	e0c8      	b.n	8003356 <UART_SetConfig+0x2e6>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5e      	ldr	r2, [pc, #376]	; (8003344 <UART_SetConfig+0x2d4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d125      	bne.n	800321a <UART_SetConfig+0x1aa>
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <UART_SetConfig+0x2cc>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d016      	beq.n	800320a <UART_SetConfig+0x19a>
 80031dc:	2b30      	cmp	r3, #48	; 0x30
 80031de:	d818      	bhi.n	8003212 <UART_SetConfig+0x1a2>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d00a      	beq.n	80031fa <UART_SetConfig+0x18a>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d814      	bhi.n	8003212 <UART_SetConfig+0x1a2>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <UART_SetConfig+0x182>
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d008      	beq.n	8003202 <UART_SetConfig+0x192>
 80031f0:	e00f      	b.n	8003212 <UART_SetConfig+0x1a2>
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f8:	e0ad      	b.n	8003356 <UART_SetConfig+0x2e6>
 80031fa:	2302      	movs	r3, #2
 80031fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003200:	e0a9      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003202:	2304      	movs	r3, #4
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003208:	e0a5      	b.n	8003356 <UART_SetConfig+0x2e6>
 800320a:	2308      	movs	r3, #8
 800320c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003210:	e0a1      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003212:	2310      	movs	r3, #16
 8003214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003218:	e09d      	b.n	8003356 <UART_SetConfig+0x2e6>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <UART_SetConfig+0x2d8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d125      	bne.n	8003270 <UART_SetConfig+0x200>
 8003224:	4b45      	ldr	r3, [pc, #276]	; (800333c <UART_SetConfig+0x2cc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800322e:	2bc0      	cmp	r3, #192	; 0xc0
 8003230:	d016      	beq.n	8003260 <UART_SetConfig+0x1f0>
 8003232:	2bc0      	cmp	r3, #192	; 0xc0
 8003234:	d818      	bhi.n	8003268 <UART_SetConfig+0x1f8>
 8003236:	2b80      	cmp	r3, #128	; 0x80
 8003238:	d00a      	beq.n	8003250 <UART_SetConfig+0x1e0>
 800323a:	2b80      	cmp	r3, #128	; 0x80
 800323c:	d814      	bhi.n	8003268 <UART_SetConfig+0x1f8>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <UART_SetConfig+0x1d8>
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d008      	beq.n	8003258 <UART_SetConfig+0x1e8>
 8003246:	e00f      	b.n	8003268 <UART_SetConfig+0x1f8>
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324e:	e082      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003250:	2302      	movs	r3, #2
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e07e      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003258:	2304      	movs	r3, #4
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e07a      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e076      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e072      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a35      	ldr	r2, [pc, #212]	; (800334c <UART_SetConfig+0x2dc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d12a      	bne.n	80032d0 <UART_SetConfig+0x260>
 800327a:	4b30      	ldr	r3, [pc, #192]	; (800333c <UART_SetConfig+0x2cc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003288:	d01a      	beq.n	80032c0 <UART_SetConfig+0x250>
 800328a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328e:	d81b      	bhi.n	80032c8 <UART_SetConfig+0x258>
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d00c      	beq.n	80032b0 <UART_SetConfig+0x240>
 8003296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329a:	d815      	bhi.n	80032c8 <UART_SetConfig+0x258>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <UART_SetConfig+0x238>
 80032a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a4:	d008      	beq.n	80032b8 <UART_SetConfig+0x248>
 80032a6:	e00f      	b.n	80032c8 <UART_SetConfig+0x258>
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e052      	b.n	8003356 <UART_SetConfig+0x2e6>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e04e      	b.n	8003356 <UART_SetConfig+0x2e6>
 80032b8:	2304      	movs	r3, #4
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e04a      	b.n	8003356 <UART_SetConfig+0x2e6>
 80032c0:	2308      	movs	r3, #8
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e046      	b.n	8003356 <UART_SetConfig+0x2e6>
 80032c8:	2310      	movs	r3, #16
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e042      	b.n	8003356 <UART_SetConfig+0x2e6>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <UART_SetConfig+0x2c4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d13a      	bne.n	8003350 <UART_SetConfig+0x2e0>
 80032da:	4b18      	ldr	r3, [pc, #96]	; (800333c <UART_SetConfig+0x2cc>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e8:	d01a      	beq.n	8003320 <UART_SetConfig+0x2b0>
 80032ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ee:	d81b      	bhi.n	8003328 <UART_SetConfig+0x2b8>
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f4:	d00c      	beq.n	8003310 <UART_SetConfig+0x2a0>
 80032f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fa:	d815      	bhi.n	8003328 <UART_SetConfig+0x2b8>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <UART_SetConfig+0x298>
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003304:	d008      	beq.n	8003318 <UART_SetConfig+0x2a8>
 8003306:	e00f      	b.n	8003328 <UART_SetConfig+0x2b8>
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e022      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003310:	2302      	movs	r3, #2
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e01e      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003318:	2304      	movs	r3, #4
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e01a      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003320:	2308      	movs	r3, #8
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e016      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e012      	b.n	8003356 <UART_SetConfig+0x2e6>
 8003330:	efff69f3 	.word	0xefff69f3
 8003334:	40008000 	.word	0x40008000
 8003338:	40013800 	.word	0x40013800
 800333c:	40021000 	.word	0x40021000
 8003340:	40004400 	.word	0x40004400
 8003344:	40004800 	.word	0x40004800
 8003348:	40004c00 	.word	0x40004c00
 800334c:	40005000 	.word	0x40005000
 8003350:	2310      	movs	r3, #16
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a9f      	ldr	r2, [pc, #636]	; (80035d8 <UART_SetConfig+0x568>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d17a      	bne.n	8003456 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003364:	2b08      	cmp	r3, #8
 8003366:	d824      	bhi.n	80033b2 <UART_SetConfig+0x342>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <UART_SetConfig+0x300>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003395 	.word	0x08003395
 8003374:	080033b3 	.word	0x080033b3
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033b3 	.word	0x080033b3
 8003380:	080033a3 	.word	0x080033a3
 8003384:	080033b3 	.word	0x080033b3
 8003388:	080033b3 	.word	0x080033b3
 800338c:	080033b3 	.word	0x080033b3
 8003390:	080033ab 	.word	0x080033ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7fe fd58 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003398:	61f8      	str	r0, [r7, #28]
        break;
 800339a:	e010      	b.n	80033be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339c:	4b8f      	ldr	r3, [pc, #572]	; (80035dc <UART_SetConfig+0x56c>)
 800339e:	61fb      	str	r3, [r7, #28]
        break;
 80033a0:	e00d      	b.n	80033be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7fe fcb9 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 80033a6:	61f8      	str	r0, [r7, #28]
        break;
 80033a8:	e009      	b.n	80033be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	61fb      	str	r3, [r7, #28]
        break;
 80033b0:	e005      	b.n	80033be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80fb 	beq.w	80035bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d305      	bcc.n	80033e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d903      	bls.n	80033ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033e8:	e0e8      	b.n	80035bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2200      	movs	r2, #0
 80033ee:	461c      	mov	r4, r3
 80033f0:	4615      	mov	r5, r2
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	022b      	lsls	r3, r5, #8
 80033fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003400:	0222      	lsls	r2, r4, #8
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	6849      	ldr	r1, [r1, #4]
 8003406:	0849      	lsrs	r1, r1, #1
 8003408:	2000      	movs	r0, #0
 800340a:	4688      	mov	r8, r1
 800340c:	4681      	mov	r9, r0
 800340e:	eb12 0a08 	adds.w	sl, r2, r8
 8003412:	eb43 0b09 	adc.w	fp, r3, r9
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003424:	4650      	mov	r0, sl
 8003426:	4659      	mov	r1, fp
 8003428:	f7fc ff32 	bl	8000290 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4613      	mov	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343a:	d308      	bcc.n	800344e <UART_SetConfig+0x3de>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003442:	d204      	bcs.n	800344e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	60da      	str	r2, [r3, #12]
 800344c:	e0b6      	b.n	80035bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003454:	e0b2      	b.n	80035bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345e:	d15e      	bne.n	800351e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003464:	2b08      	cmp	r3, #8
 8003466:	d828      	bhi.n	80034ba <UART_SetConfig+0x44a>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x400>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	08003495 	.word	0x08003495
 8003474:	0800349d 	.word	0x0800349d
 8003478:	080034a5 	.word	0x080034a5
 800347c:	080034bb 	.word	0x080034bb
 8003480:	080034ab 	.word	0x080034ab
 8003484:	080034bb 	.word	0x080034bb
 8003488:	080034bb 	.word	0x080034bb
 800348c:	080034bb 	.word	0x080034bb
 8003490:	080034b3 	.word	0x080034b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7fe fcd8 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003498:	61f8      	str	r0, [r7, #28]
        break;
 800349a:	e014      	b.n	80034c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800349c:	f7fe fcea 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 80034a0:	61f8      	str	r0, [r7, #28]
        break;
 80034a2:	e010      	b.n	80034c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a4:	4b4d      	ldr	r3, [pc, #308]	; (80035dc <UART_SetConfig+0x56c>)
 80034a6:	61fb      	str	r3, [r7, #28]
        break;
 80034a8:	e00d      	b.n	80034c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034aa:	f7fe fc35 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 80034ae:	61f8      	str	r0, [r7, #28]
        break;
 80034b0:	e009      	b.n	80034c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	61fb      	str	r3, [r7, #28]
        break;
 80034b8:	e005      	b.n	80034c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d077      	beq.n	80035bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005a      	lsls	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	441a      	add	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d916      	bls.n	8003516 <UART_SetConfig+0x4a6>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ee:	d212      	bcs.n	8003516 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f023 030f 	bic.w	r3, r3, #15
 80034f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	b29a      	uxth	r2, r3
 8003506:	8afb      	ldrh	r3, [r7, #22]
 8003508:	4313      	orrs	r3, r2
 800350a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	8afa      	ldrh	r2, [r7, #22]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	e052      	b.n	80035bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800351c:	e04e      	b.n	80035bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003522:	2b08      	cmp	r3, #8
 8003524:	d827      	bhi.n	8003576 <UART_SetConfig+0x506>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x4bc>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003551 	.word	0x08003551
 8003530:	08003559 	.word	0x08003559
 8003534:	08003561 	.word	0x08003561
 8003538:	08003577 	.word	0x08003577
 800353c:	08003567 	.word	0x08003567
 8003540:	08003577 	.word	0x08003577
 8003544:	08003577 	.word	0x08003577
 8003548:	08003577 	.word	0x08003577
 800354c:	0800356f 	.word	0x0800356f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7fe fc7a 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003554:	61f8      	str	r0, [r7, #28]
        break;
 8003556:	e014      	b.n	8003582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003558:	f7fe fc8c 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 800355c:	61f8      	str	r0, [r7, #28]
        break;
 800355e:	e010      	b.n	8003582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <UART_SetConfig+0x56c>)
 8003562:	61fb      	str	r3, [r7, #28]
        break;
 8003564:	e00d      	b.n	8003582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003566:	f7fe fbd7 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 800356a:	61f8      	str	r0, [r7, #28]
        break;
 800356c:	e009      	b.n	8003582 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003572:	61fb      	str	r3, [r7, #28]
        break;
 8003574:	e005      	b.n	8003582 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003580:	bf00      	nop
    }

    if (pclk != 0U)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d019      	beq.n	80035bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	085a      	lsrs	r2, r3, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	fbb2 f3f3 	udiv	r3, r2, r3
 800359a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b0f      	cmp	r3, #15
 80035a0:	d909      	bls.n	80035b6 <UART_SetConfig+0x546>
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d205      	bcs.n	80035b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	e002      	b.n	80035bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3728      	adds	r7, #40	; 0x28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d6:	bf00      	nop
 80035d8:	40008000 	.word	0x40008000
 80035dc:	00f42400 	.word	0x00f42400

080035e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01a      	beq.n	80036f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036de:	d10a      	bne.n	80036f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]
  }
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b098      	sub	sp, #96	; 0x60
 8003728:	af02      	add	r7, sp, #8
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003734:	f7fd faca 	bl	8000ccc <HAL_GetTick>
 8003738:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b08      	cmp	r3, #8
 8003746:	d12e      	bne.n	80037a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003750:	2200      	movs	r2, #0
 8003752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f88c 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d021      	beq.n	80037a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003776:	653b      	str	r3, [r7, #80]	; 0x50
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003780:	647b      	str	r3, [r7, #68]	; 0x44
 8003782:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e6      	bne.n	8003762 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e062      	b.n	800386c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d149      	bne.n	8003848 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037bc:	2200      	movs	r2, #0
 80037be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f856 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d03c      	beq.n	8003848 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	623b      	str	r3, [r7, #32]
   return(result);
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
 80037ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e6      	bne.n	80037ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3308      	adds	r3, #8
 800381e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003820:	61fa      	str	r2, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	69b9      	ldr	r1, [r7, #24]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	617b      	str	r3, [r7, #20]
   return(result);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e011      	b.n	800386c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3758      	adds	r7, #88	; 0x58
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003884:	e049      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388c:	d045      	beq.n	800391a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7fd fa1d 	bl	8000ccc <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e048      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d031      	beq.n	800391a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d110      	bne.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2208      	movs	r2, #8
 80038ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f838 	bl	8003942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2208      	movs	r2, #8
 80038d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e029      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f4:	d111      	bne.n	800391a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f81e 	bl	8003942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e00f      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4013      	ands	r3, r2
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	bf0c      	ite	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	2300      	movne	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	429a      	cmp	r2, r3
 8003936:	d0a6      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b095      	sub	sp, #84	; 0x54
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800395e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003968:	643b      	str	r3, [r7, #64]	; 0x40
 800396a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800396e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e6      	bne.n	800394a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	61fb      	str	r3, [r7, #28]
   return(result);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3308      	adds	r3, #8
 800399a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800399c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e5      	bne.n	800397c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d118      	bne.n	80039ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f023 0310 	bic.w	r3, r3, #16
 80039cc:	647b      	str	r3, [r7, #68]	; 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	613b      	str	r3, [r7, #16]
   return(result);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e6      	bne.n	80039b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039fe:	bf00      	nop
 8003a00:	3754      	adds	r7, #84	; 0x54
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <__NVIC_SetPriority>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db0a      	blt.n	8003a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	490c      	ldr	r1, [pc, #48]	; (8003a58 <__NVIC_SetPriority+0x4c>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a34:	e00a      	b.n	8003a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4908      	ldr	r1, [pc, #32]	; (8003a5c <__NVIC_SetPriority+0x50>)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3b04      	subs	r3, #4
 8003a44:	0112      	lsls	r2, r2, #4
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	440b      	add	r3, r1
 8003a4a:	761a      	strb	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000e100 	.word	0xe000e100
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <SysTick_Handler+0x1c>)
 8003a66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a68:	f001 fd28 	bl	80054bc <xTaskGetSchedulerState>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d001      	beq.n	8003a76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a72:	f002 fb11 	bl	8006098 <xPortSysTickHandler>
  }
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a84:	2100      	movs	r1, #0
 8003a86:	f06f 0004 	mvn.w	r0, #4
 8003a8a:	f7ff ffbf 	bl	8003a0c <__NVIC_SetPriority>
#endif
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9a:	f3ef 8305 	mrs	r3, IPSR
 8003a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003aa6:	f06f 0305 	mvn.w	r3, #5
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	e00c      	b.n	8003ac8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <osKernelInitialize+0x44>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <osKernelInitialize+0x44>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e002      	b.n	8003ac8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ac8:	687b      	ldr	r3, [r7, #4]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000178 	.word	0x20000178

08003adc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae2:	f3ef 8305 	mrs	r3, IPSR
 8003ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003aee:	f06f 0305 	mvn.w	r3, #5
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	e010      	b.n	8003b18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <osKernelStart+0x48>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d109      	bne.n	8003b12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003afe:	f7ff ffbf 	bl	8003a80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <osKernelStart+0x48>)
 8003b04:	2202      	movs	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b08:	f001 f87c 	bl	8004c04 <vTaskStartScheduler>
      stat = osOK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	e002      	b.n	8003b18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000178 	.word	0x20000178

08003b28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08e      	sub	sp, #56	; 0x38
 8003b2c:	af04      	add	r7, sp, #16
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b38:	f3ef 8305 	mrs	r3, IPSR
 8003b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d17e      	bne.n	8003c42 <osThreadNew+0x11a>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d07b      	beq.n	8003c42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b4e:	2318      	movs	r3, #24
 8003b50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d045      	beq.n	8003bee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <osThreadNew+0x48>
        name = attr->name;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <osThreadNew+0x6e>
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b38      	cmp	r3, #56	; 0x38
 8003b88:	d805      	bhi.n	8003b96 <osThreadNew+0x6e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <osThreadNew+0x72>
        return (NULL);
 8003b96:	2300      	movs	r3, #0
 8003b98:	e054      	b.n	8003c44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00e      	beq.n	8003bd0 <osThreadNew+0xa8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2ba7      	cmp	r3, #167	; 0xa7
 8003bb8:	d90a      	bls.n	8003bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d006      	beq.n	8003bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <osThreadNew+0xa8>
        mem = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	e010      	b.n	8003bf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10c      	bne.n	8003bf2 <osThreadNew+0xca>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d108      	bne.n	8003bf2 <osThreadNew+0xca>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <osThreadNew+0xca>
          mem = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	e001      	b.n	8003bf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d110      	bne.n	8003c1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c00:	9202      	str	r2, [sp, #8]
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6a3a      	ldr	r2, [r7, #32]
 8003c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fe0c 	bl	800482c <xTaskCreateStatic>
 8003c14:	4603      	mov	r3, r0
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e013      	b.n	8003c42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d110      	bne.n	8003c42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	f107 0310 	add.w	r3, r7, #16
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fe57 	bl	80048e6 <xTaskCreate>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d001      	beq.n	8003c42 <osThreadNew+0x11a>
            hTask = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c42:	693b      	ldr	r3, [r7, #16]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3728      	adds	r7, #40	; 0x28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c54:	f3ef 8305 	mrs	r3, IPSR
 8003c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <osDelay+0x1c>
    stat = osErrorISR;
 8003c60:	f06f 0305 	mvn.w	r3, #5
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e007      	b.n	8003c78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 ff92 	bl	8004b9c <vTaskDelay>
    }
  }

  return (stat);
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4a06      	ldr	r2, [pc, #24]	; (8003cb4 <vApplicationGetIdleTaskMemory+0x30>)
 8003c9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	601a      	str	r2, [r3, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2000017c 	.word	0x2000017c
 8003cb4:	20000224 	.word	0x20000224

08003cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a06      	ldr	r2, [pc, #24]	; (8003ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8003cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd6:	601a      	str	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	20000424 	.word	0x20000424
 8003ce8:	200004cc 	.word	0x200004cc

08003cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f103 0208 	add.w	r2, r3, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f103 0208 	add.w	r2, r3, #8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f103 0208 	add.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da4:	d103      	bne.n	8003dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e00c      	b.n	8003dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3308      	adds	r3, #8
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e002      	b.n	8003dbc <vListInsert+0x2e>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d2f6      	bcs.n	8003db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6892      	ldr	r2, [r2, #8]
 8003e16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6852      	ldr	r2, [r2, #4]
 8003e20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d103      	bne.n	8003e34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	1e5a      	subs	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e7e:	f002 f879 	bl	8005f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	68f9      	ldr	r1, [r7, #12]
 8003eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	441a      	add	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	22ff      	movs	r2, #255	; 0xff
 8003ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	22ff      	movs	r2, #255	; 0xff
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d114      	bne.n	8003efe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01a      	beq.n	8003f12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3310      	adds	r3, #16
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 f929 	bl	8005138 <xTaskRemoveFromEventList>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d012      	beq.n	8003f12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <xQueueGenericReset+0xcc>)
 8003eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	e009      	b.n	8003f12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3310      	adds	r3, #16
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fef2 	bl	8003cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3324      	adds	r3, #36	; 0x24
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff feed 	bl	8003cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f12:	f002 f85f 	bl	8005fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f16:	2301      	movs	r3, #1
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08e      	sub	sp, #56	; 0x38
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <xQueueGenericCreateStatic+0x52>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <xQueueGenericCreateStatic+0x56>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <xQueueGenericCreateStatic+0x58>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	623b      	str	r3, [r7, #32]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <xQueueGenericCreateStatic+0x7e>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <xQueueGenericCreateStatic+0x82>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <xQueueGenericCreateStatic+0x84>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	61fb      	str	r3, [r7, #28]
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fc2:	2350      	movs	r3, #80	; 0x50
 8003fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d00a      	beq.n	8003fe2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	61bb      	str	r3, [r7, #24]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f805 	bl	8004014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800400c:	4618      	mov	r0, r3
 800400e:	3730      	adds	r7, #48	; 0x30
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d103      	bne.n	8004030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e002      	b.n	8004036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004042:	2101      	movs	r1, #1
 8004044:	69b8      	ldr	r0, [r7, #24]
 8004046:	f7ff ff05 	bl	8003e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08e      	sub	sp, #56	; 0x38
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800406a:	2300      	movs	r3, #0
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xQueueGenericSend+0x32>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <xQueueGenericSend+0x40>
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <xQueueGenericSend+0x44>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <xQueueGenericSend+0x46>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <xQueueGenericSend+0x60>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040b8:	bf00      	nop
 80040ba:	e7fe      	b.n	80040ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d103      	bne.n	80040ca <xQueueGenericSend+0x6e>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <xQueueGenericSend+0x72>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <xQueueGenericSend+0x74>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <xQueueGenericSend+0x8e>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	623b      	str	r3, [r7, #32]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ea:	f001 f9e7 	bl	80054bc <xTaskGetSchedulerState>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <xQueueGenericSend+0x9e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <xQueueGenericSend+0xa2>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <xQueueGenericSend+0xa4>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <xQueueGenericSend+0xbe>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	61fb      	str	r3, [r7, #28]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800411a:	f001 ff2b 	bl	8005f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <xQueueGenericSend+0xd4>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d129      	bne.n	8004184 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004136:	f000 fa0b 	bl	8004550 <prvCopyDataToQueue>
 800413a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	3324      	adds	r3, #36	; 0x24
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fff5 	bl	8005138 <xTaskRemoveFromEventList>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004154:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <xQueueGenericSend+0x1f8>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	e00a      	b.n	800417c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800416c:	4b39      	ldr	r3, [pc, #228]	; (8004254 <xQueueGenericSend+0x1f8>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800417c:	f001 ff2a 	bl	8005fd4 <vPortExitCritical>
				return pdPASS;
 8004180:	2301      	movs	r3, #1
 8004182:	e063      	b.n	800424c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800418a:	f001 ff23 	bl	8005fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800418e:	2300      	movs	r3, #0
 8004190:	e05c      	b.n	800424c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f82f 	bl	8005200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041a6:	f001 ff15 	bl	8005fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041aa:	f000 fd9b 	bl	8004ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041ae:	f001 fee1 	bl	8005f74 <vPortEnterCritical>
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041be:	d103      	bne.n	80041c8 <xQueueGenericSend+0x16c>
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ce:	b25b      	sxtb	r3, r3
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d4:	d103      	bne.n	80041de <xQueueGenericSend+0x182>
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041de:	f001 fef9 	bl	8005fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041e2:	1d3a      	adds	r2, r7, #4
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f81e 	bl	800522c <xTaskCheckForTimeOut>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d124      	bne.n	8004240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041f8:	f000 faa2 	bl	8004740 <prvIsQueueFull>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d018      	beq.n	8004234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	3310      	adds	r3, #16
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ff44 	bl	8005098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004212:	f000 fa2d 	bl	8004670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004216:	f000 fd73 	bl	8004d00 <xTaskResumeAll>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f af7c 	bne.w	800411a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <xQueueGenericSend+0x1f8>)
 8004224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	e772      	b.n	800411a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004236:	f000 fa1b 	bl	8004670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800423a:	f000 fd61 	bl	8004d00 <xTaskResumeAll>
 800423e:	e76c      	b.n	800411a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004242:	f000 fa15 	bl	8004670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004246:	f000 fd5b 	bl	8004d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800424a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800424c:	4618      	mov	r0, r3
 800424e:	3738      	adds	r7, #56	; 0x38
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b090      	sub	sp, #64	; 0x40
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <xQueueGenericSendFromISR+0x3c>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <xQueueGenericSendFromISR+0x40>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <xQueueGenericSendFromISR+0x42>
 8004298:	2300      	movs	r3, #0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d103      	bne.n	80042c2 <xQueueGenericSendFromISR+0x6a>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <xQueueGenericSendFromISR+0x6e>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <xQueueGenericSendFromISR+0x70>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	623b      	str	r3, [r7, #32]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042e2:	f001 ff29 	bl	8006138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042e6:	f3ef 8211 	mrs	r2, BASEPRI
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	61fa      	str	r2, [r7, #28]
 80042fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <xQueueGenericSendFromISR+0xbc>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d12f      	bne.n	8004374 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800432a:	f000 f911 	bl	8004550 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800432e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004336:	d112      	bne.n	800435e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	d016      	beq.n	800436e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fef7 	bl	8005138 <xTaskRemoveFromEventList>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e007      	b.n	800436e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800435e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004362:	3301      	adds	r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	b25a      	sxtb	r2, r3
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800436e:	2301      	movs	r3, #1
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004372:	e001      	b.n	8004378 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004374:	2300      	movs	r3, #0
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004382:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004386:	4618      	mov	r0, r3
 8004388:	3740      	adds	r7, #64	; 0x40
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <xQueueReceive+0x30>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	623b      	str	r3, [r7, #32]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <xQueueReceive+0x3e>
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <xQueueReceive+0x42>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <xQueueReceive+0x44>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <xQueueReceive+0x5e>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	61fb      	str	r3, [r7, #28]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ee:	f001 f865 	bl	80054bc <xTaskGetSchedulerState>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <xQueueReceive+0x6e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <xQueueReceive+0x72>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <xQueueReceive+0x74>
 8004402:	2300      	movs	r3, #0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xQueueReceive+0x8e>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	61bb      	str	r3, [r7, #24]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800441e:	f001 fda9 	bl	8005f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01f      	beq.n	800446e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004432:	f000 f8f7 	bl	8004624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00f      	beq.n	8004466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	3310      	adds	r3, #16
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fe74 	bl	8005138 <xTaskRemoveFromEventList>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004456:	4b3d      	ldr	r3, [pc, #244]	; (800454c <xQueueReceive+0x1bc>)
 8004458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004466:	f001 fdb5 	bl	8005fd4 <vPortExitCritical>
				return pdPASS;
 800446a:	2301      	movs	r3, #1
 800446c:	e069      	b.n	8004542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004474:	f001 fdae 	bl	8005fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004478:	2300      	movs	r3, #0
 800447a:	e062      	b.n	8004542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004482:	f107 0310 	add.w	r3, r7, #16
 8004486:	4618      	mov	r0, r3
 8004488:	f000 feba 	bl	8005200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004490:	f001 fda0 	bl	8005fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004494:	f000 fc26 	bl	8004ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004498:	f001 fd6c 	bl	8005f74 <vPortEnterCritical>
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a2:	b25b      	sxtb	r3, r3
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a8:	d103      	bne.n	80044b2 <xQueueReceive+0x122>
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044be:	d103      	bne.n	80044c8 <xQueueReceive+0x138>
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044c8:	f001 fd84 	bl	8005fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044cc:	1d3a      	adds	r2, r7, #4
 80044ce:	f107 0310 	add.w	r3, r7, #16
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fea9 	bl	800522c <xTaskCheckForTimeOut>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d123      	bne.n	8004528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e2:	f000 f917 	bl	8004714 <prvIsQueueEmpty>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d017      	beq.n	800451c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	3324      	adds	r3, #36	; 0x24
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fdcf 	bl	8005098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fc:	f000 f8b8 	bl	8004670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004500:	f000 fbfe 	bl	8004d00 <xTaskResumeAll>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d189      	bne.n	800441e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <xQueueReceive+0x1bc>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	e780      	b.n	800441e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800451c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800451e:	f000 f8a7 	bl	8004670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004522:	f000 fbed 	bl	8004d00 <xTaskResumeAll>
 8004526:	e77a      	b.n	800441e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800452a:	f000 f8a1 	bl	8004670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800452e:	f000 fbe7 	bl	8004d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004534:	f000 f8ee 	bl	8004714 <prvIsQueueEmpty>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f43f af6f 	beq.w	800441e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004542:	4618      	mov	r0, r3
 8004544:	3730      	adds	r7, #48	; 0x30
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d14d      	bne.n	8004612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 ffbc 	bl	80054f8 <xTaskPriorityDisinherit>
 8004580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	e043      	b.n	8004612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d119      	bne.n	80045c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6858      	ldr	r0, [r3, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	461a      	mov	r2, r3
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	f002 facf 	bl	8006b3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	441a      	add	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d32b      	bcc.n	8004612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e026      	b.n	8004612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68d8      	ldr	r0, [r3, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	461a      	mov	r2, r3
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	f002 fab5 	bl	8006b3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	425b      	negs	r3, r3
 80045de:	441a      	add	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d207      	bcs.n	8004600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	425b      	negs	r3, r3
 80045fa:	441a      	add	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d105      	bne.n	8004612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3b01      	subs	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800461a:	697b      	ldr	r3, [r7, #20]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d018      	beq.n	8004668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	441a      	add	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d303      	bcc.n	8004658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68d9      	ldr	r1, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	461a      	mov	r2, r3
 8004662:	6838      	ldr	r0, [r7, #0]
 8004664:	f002 fa6b 	bl	8006b3e <memcpy>
	}
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004678:	f001 fc7c 	bl	8005f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004684:	e011      	b.n	80046aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d012      	beq.n	80046b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3324      	adds	r3, #36	; 0x24
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fd50 	bl	8005138 <xTaskRemoveFromEventList>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800469e:	f000 fe27 	bl	80052f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	dce9      	bgt.n	8004686 <prvUnlockQueue+0x16>
 80046b2:	e000      	b.n	80046b6 <prvUnlockQueue+0x46>
					break;
 80046b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	22ff      	movs	r2, #255	; 0xff
 80046ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046be:	f001 fc89 	bl	8005fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046c2:	f001 fc57 	bl	8005f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ce:	e011      	b.n	80046f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d012      	beq.n	80046fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3310      	adds	r3, #16
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fd2b 	bl	8005138 <xTaskRemoveFromEventList>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046e8:	f000 fe02 	bl	80052f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dce9      	bgt.n	80046d0 <prvUnlockQueue+0x60>
 80046fc:	e000      	b.n	8004700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	22ff      	movs	r2, #255	; 0xff
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004708:	f001 fc64 	bl	8005fd4 <vPortExitCritical>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800471c:	f001 fc2a 	bl	8005f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e001      	b.n	8004732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004732:	f001 fc4f 	bl	8005fd4 <vPortExitCritical>

	return xReturn;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004748:	f001 fc14 	bl	8005f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	429a      	cmp	r2, r3
 8004756:	d102      	bne.n	800475e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e001      	b.n	8004762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004762:	f001 fc37 	bl	8005fd4 <vPortExitCritical>

	return xReturn;
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e014      	b.n	80047aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004780:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <vQueueAddToRegistry+0x50>)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800478c:	490c      	ldr	r1, [pc, #48]	; (80047c0 <vQueueAddToRegistry+0x50>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <vQueueAddToRegistry+0x50>)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4413      	add	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047a2:	e006      	b.n	80047b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b07      	cmp	r3, #7
 80047ae:	d9e7      	bls.n	8004780 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	200008cc 	.word	0x200008cc

080047c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047d4:	f001 fbce 	bl	8005f74 <vPortEnterCritical>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e4:	d103      	bne.n	80047ee <vQueueWaitForMessageRestricted+0x2a>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f4:	b25b      	sxtb	r3, r3
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047fa:	d103      	bne.n	8004804 <vQueueWaitForMessageRestricted+0x40>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004804:	f001 fbe6 	bl	8005fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	3324      	adds	r3, #36	; 0x24
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fc61 	bl	80050e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800481e:	6978      	ldr	r0, [r7, #20]
 8004820:	f7ff ff26 	bl	8004670 <prvUnlockQueue>
	}
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af04      	add	r7, sp, #16
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	623b      	str	r3, [r7, #32]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xTaskCreateStatic+0x46>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	61fb      	str	r3, [r7, #28]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004872:	23a8      	movs	r3, #168	; 0xa8
 8004874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2ba8      	cmp	r3, #168	; 0xa8
 800487a:	d00a      	beq.n	8004892 <xTaskCreateStatic+0x66>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	61bb      	str	r3, [r7, #24]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01e      	beq.n	80048d8 <xTaskCreateStatic+0xac>
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048b2:	2300      	movs	r3, #0
 80048b4:	9303      	str	r3, [sp, #12]
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	9302      	str	r3, [sp, #8]
 80048ba:	f107 0314 	add.w	r3, r7, #20
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f850 	bl	8004970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d2:	f000 f8f3 	bl	8004abc <prvAddNewTaskToReadyList>
 80048d6:	e001      	b.n	80048dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048dc:	697b      	ldr	r3, [r7, #20]
	}
 80048de:	4618      	mov	r0, r3
 80048e0:	3728      	adds	r7, #40	; 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08c      	sub	sp, #48	; 0x30
 80048ea:	af04      	add	r7, sp, #16
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 fc5c 	bl	80061b8 <pvPortMalloc>
 8004900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004908:	20a8      	movs	r0, #168	; 0xa8
 800490a:	f001 fc55 	bl	80061b8 <pvPortMalloc>
 800490e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
 800491c:	e005      	b.n	800492a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f001 fd16 	bl	8006350 <vPortFree>
 8004924:	e001      	b.n	800492a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d017      	beq.n	8004960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	2300      	movs	r3, #0
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f80e 	bl	8004970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004954:	69f8      	ldr	r0, [r7, #28]
 8004956:	f000 f8b1 	bl	8004abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e002      	b.n	8004966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004966:	69bb      	ldr	r3, [r7, #24]
	}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	461a      	mov	r2, r3
 8004988:	21a5      	movs	r1, #165	; 0xa5
 800498a:	f002 f807 	bl	800699c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004998:	3b01      	subs	r3, #1
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f023 0307 	bic.w	r3, r3, #7
 80049a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	617b      	str	r3, [r7, #20]
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01f      	beq.n	8004a0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	e012      	b.n	80049fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	7819      	ldrb	r1, [r3, #0]
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	3334      	adds	r3, #52	; 0x34
 80049e4:	460a      	mov	r2, r1
 80049e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d006      	beq.n	8004a02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	3301      	adds	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b0f      	cmp	r3, #15
 80049fe:	d9e9      	bls.n	80049d4 <prvInitialiseNewTask+0x64>
 8004a00:	e000      	b.n	8004a04 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a0c:	e003      	b.n	8004a16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	2b37      	cmp	r3, #55	; 0x37
 8004a1a:	d901      	bls.n	8004a20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a1c:	2337      	movs	r3, #55	; 0x37
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	2200      	movs	r2, #0
 8004a30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	3304      	adds	r3, #4
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff f978 	bl	8003d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	3318      	adds	r3, #24
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff f973 	bl	8003d2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	3354      	adds	r3, #84	; 0x54
 8004a70:	224c      	movs	r2, #76	; 0x4c
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 ff91 	bl	800699c <memset>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <prvInitialiseNewTask+0x140>)
 8004a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <prvInitialiseNewTask+0x144>)
 8004a84:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <prvInitialiseNewTask+0x148>)
 8004a8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	69b8      	ldr	r0, [r7, #24]
 8004a92:	f001 f941 	bl	8005d18 <pxPortInitialiseStack>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa8:	bf00      	nop
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20001b18 	.word	0x20001b18
 8004ab4:	20001b80 	.word	0x20001b80
 8004ab8:	20001be8 	.word	0x20001be8

08004abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ac4:	f001 fa56 	bl	8005f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ac8:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <prvAddNewTaskToReadyList+0xc4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3301      	adds	r3, #1
 8004ace:	4a2c      	ldr	r2, [pc, #176]	; (8004b80 <prvAddNewTaskToReadyList+0xc4>)
 8004ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <prvAddNewTaskToReadyList+0xc8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ada:	4a2a      	ldr	r2, [pc, #168]	; (8004b84 <prvAddNewTaskToReadyList+0xc8>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ae0:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <prvAddNewTaskToReadyList+0xc4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d110      	bne.n	8004b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ae8:	f000 fc26 	bl	8005338 <prvInitialiseTaskLists>
 8004aec:	e00d      	b.n	8004b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <prvAddNewTaskToReadyList+0xcc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <prvAddNewTaskToReadyList+0xc8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d802      	bhi.n	8004b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b04:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <prvAddNewTaskToReadyList+0xc8>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <prvAddNewTaskToReadyList+0xd0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <prvAddNewTaskToReadyList+0xd0>)
 8004b12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <prvAddNewTaskToReadyList+0xd0>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <prvAddNewTaskToReadyList+0xd4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d903      	bls.n	8004b30 <prvAddNewTaskToReadyList+0x74>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <prvAddNewTaskToReadyList+0xd4>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <prvAddNewTaskToReadyList+0xd8>)
 8004b3e:	441a      	add	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7ff f8fd 	bl	8003d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b4c:	f001 fa42 	bl	8005fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <prvAddNewTaskToReadyList+0xcc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00e      	beq.n	8004b76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <prvAddNewTaskToReadyList+0xc8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d207      	bcs.n	8004b76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <prvAddNewTaskToReadyList+0xdc>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000de0 	.word	0x20000de0
 8004b84:	2000090c 	.word	0x2000090c
 8004b88:	20000dec 	.word	0x20000dec
 8004b8c:	20000dfc 	.word	0x20000dfc
 8004b90:	20000de8 	.word	0x20000de8
 8004b94:	20000910 	.word	0x20000910
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d017      	beq.n	8004bde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bae:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <vTaskDelay+0x60>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <vTaskDelay+0x30>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60bb      	str	r3, [r7, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bcc:	f000 f88a 	bl	8004ce4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fcfe 	bl	80055d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bd8:	f000 f892 	bl	8004d00 <xTaskResumeAll>
 8004bdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <vTaskDelay+0x64>)
 8004be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000e08 	.word	0x20000e08
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c12:	463a      	mov	r2, r7
 8004c14:	1d39      	adds	r1, r7, #4
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff f832 	bl	8003c84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	9202      	str	r2, [sp, #8]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	460a      	mov	r2, r1
 8004c32:	4924      	ldr	r1, [pc, #144]	; (8004cc4 <vTaskStartScheduler+0xc0>)
 8004c34:	4824      	ldr	r0, [pc, #144]	; (8004cc8 <vTaskStartScheduler+0xc4>)
 8004c36:	f7ff fdf9 	bl	800482c <xTaskCreateStatic>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a23      	ldr	r2, [pc, #140]	; (8004ccc <vTaskStartScheduler+0xc8>)
 8004c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c40:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <vTaskStartScheduler+0xc8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e001      	b.n	8004c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d102      	bne.n	8004c5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c58:	f000 fd10 	bl	800567c <xTimerCreateTimerTask>
 8004c5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d11b      	bne.n	8004c9c <vTaskStartScheduler+0x98>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	613b      	str	r3, [r7, #16]
}
 8004c76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <vTaskStartScheduler+0xcc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3354      	adds	r3, #84	; 0x54
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <vTaskStartScheduler+0xd0>)
 8004c80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <vTaskStartScheduler+0xd4>)
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <vTaskStartScheduler+0xd8>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <vTaskStartScheduler+0xdc>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c96:	f001 f8cb 	bl	8005e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c9a:	e00e      	b.n	8004cba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca2:	d10a      	bne.n	8004cba <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60fb      	str	r3, [r7, #12]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <vTaskStartScheduler+0xb4>
}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08007648 	.word	0x08007648
 8004cc8:	08005309 	.word	0x08005309
 8004ccc:	20000e04 	.word	0x20000e04
 8004cd0:	2000090c 	.word	0x2000090c
 8004cd4:	20000070 	.word	0x20000070
 8004cd8:	20000e00 	.word	0x20000e00
 8004cdc:	20000dec 	.word	0x20000dec
 8004ce0:	20000de4 	.word	0x20000de4

08004ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ce8:	4b04      	ldr	r3, [pc, #16]	; (8004cfc <vTaskSuspendAll+0x18>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	4a03      	ldr	r2, [pc, #12]	; (8004cfc <vTaskSuspendAll+0x18>)
 8004cf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cf2:	bf00      	nop
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000e08 	.word	0x20000e08

08004d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d0e:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <xTaskResumeAll+0x118>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <xTaskResumeAll+0x2c>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	603b      	str	r3, [r7, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d2c:	f001 f922 	bl	8005f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d30:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <xTaskResumeAll+0x118>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	4a38      	ldr	r2, [pc, #224]	; (8004e18 <xTaskResumeAll+0x118>)
 8004d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3a:	4b37      	ldr	r3, [pc, #220]	; (8004e18 <xTaskResumeAll+0x118>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d162      	bne.n	8004e08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <xTaskResumeAll+0x11c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d05e      	beq.n	8004e08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d4a:	e02f      	b.n	8004dac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4c:	4b34      	ldr	r3, [pc, #208]	; (8004e20 <xTaskResumeAll+0x120>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3318      	adds	r3, #24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff f851 	bl	8003e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f84c 	bl	8003e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <xTaskResumeAll+0x124>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d903      	bls.n	8004d7c <xTaskResumeAll+0x7c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <xTaskResumeAll+0x124>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <xTaskResumeAll+0x128>)
 8004d8a:	441a      	add	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7fe ffd7 	bl	8003d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9c:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <xTaskResumeAll+0x12c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004da6:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <xTaskResumeAll+0x130>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dac:	4b1c      	ldr	r3, [pc, #112]	; (8004e20 <xTaskResumeAll+0x120>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1cb      	bne.n	8004d4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dba:	f000 fb5f 	bl	800547c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <xTaskResumeAll+0x134>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d010      	beq.n	8004dec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dca:	f000 f847 	bl	8004e5c <xTaskIncrementTick>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <xTaskResumeAll+0x130>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f1      	bne.n	8004dca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004de6:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <xTaskResumeAll+0x134>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dec:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <xTaskResumeAll+0x130>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d009      	beq.n	8004e08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <xTaskResumeAll+0x138>)
 8004dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e08:	f001 f8e4 	bl	8005fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000e08 	.word	0x20000e08
 8004e1c:	20000de0 	.word	0x20000de0
 8004e20:	20000da0 	.word	0x20000da0
 8004e24:	20000de8 	.word	0x20000de8
 8004e28:	20000910 	.word	0x20000910
 8004e2c:	2000090c 	.word	0x2000090c
 8004e30:	20000df4 	.word	0x20000df4
 8004e34:	20000df0 	.word	0x20000df0
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <xTaskGetTickCount+0x1c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e48:	687b      	ldr	r3, [r7, #4]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000de4 	.word	0x20000de4

08004e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e66:	4b4f      	ldr	r3, [pc, #316]	; (8004fa4 <xTaskIncrementTick+0x148>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 808f 	bne.w	8004f8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e70:	4b4d      	ldr	r3, [pc, #308]	; (8004fa8 <xTaskIncrementTick+0x14c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e78:	4a4b      	ldr	r2, [pc, #300]	; (8004fa8 <xTaskIncrementTick+0x14c>)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d120      	bne.n	8004ec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e84:	4b49      	ldr	r3, [pc, #292]	; (8004fac <xTaskIncrementTick+0x150>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	603b      	str	r3, [r7, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xTaskIncrementTick+0x46>
 8004ea4:	4b41      	ldr	r3, [pc, #260]	; (8004fac <xTaskIncrementTick+0x150>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <xTaskIncrementTick+0x154>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3f      	ldr	r2, [pc, #252]	; (8004fac <xTaskIncrementTick+0x150>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4a3f      	ldr	r2, [pc, #252]	; (8004fb0 <xTaskIncrementTick+0x154>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <xTaskIncrementTick+0x158>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	4a3d      	ldr	r2, [pc, #244]	; (8004fb4 <xTaskIncrementTick+0x158>)
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	f000 fadb 	bl	800547c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec6:	4b3c      	ldr	r3, [pc, #240]	; (8004fb8 <xTaskIncrementTick+0x15c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d349      	bcc.n	8004f64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed0:	4b36      	ldr	r3, [pc, #216]	; (8004fac <xTaskIncrementTick+0x150>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eda:	4b37      	ldr	r3, [pc, #220]	; (8004fb8 <xTaskIncrementTick+0x15c>)
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ee0:	601a      	str	r2, [r3, #0]
					break;
 8004ee2:	e03f      	b.n	8004f64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee4:	4b31      	ldr	r3, [pc, #196]	; (8004fac <xTaskIncrementTick+0x150>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d203      	bcs.n	8004f04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004efc:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <xTaskIncrementTick+0x15c>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f02:	e02f      	b.n	8004f64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe ff79 	bl	8003e00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3318      	adds	r3, #24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe ff70 	bl	8003e00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <xTaskIncrementTick+0x160>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d903      	bls.n	8004f34 <xTaskIncrementTick+0xd8>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <xTaskIncrementTick+0x160>)
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <xTaskIncrementTick+0x164>)
 8004f42:	441a      	add	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fe fefb 	bl	8003d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <xTaskIncrementTick+0x168>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3b8      	bcc.n	8004ed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f62:	e7b5      	b.n	8004ed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <xTaskIncrementTick+0x168>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	4915      	ldr	r1, [pc, #84]	; (8004fc0 <xTaskIncrementTick+0x164>)
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d901      	bls.n	8004f80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <xTaskIncrementTick+0x16c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e004      	b.n	8004f98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <xTaskIncrementTick+0x170>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <xTaskIncrementTick+0x170>)
 8004f96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f98:	697b      	ldr	r3, [r7, #20]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000e08 	.word	0x20000e08
 8004fa8:	20000de4 	.word	0x20000de4
 8004fac:	20000d98 	.word	0x20000d98
 8004fb0:	20000d9c 	.word	0x20000d9c
 8004fb4:	20000df8 	.word	0x20000df8
 8004fb8:	20000e00 	.word	0x20000e00
 8004fbc:	20000de8 	.word	0x20000de8
 8004fc0:	20000910 	.word	0x20000910
 8004fc4:	2000090c 	.word	0x2000090c
 8004fc8:	20000df4 	.word	0x20000df4
 8004fcc:	20000df0 	.word	0x20000df0

08004fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <vTaskSwitchContext+0xb0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fde:	4b29      	ldr	r3, [pc, #164]	; (8005084 <vTaskSwitchContext+0xb4>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fe4:	e046      	b.n	8005074 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004fe6:	4b27      	ldr	r3, [pc, #156]	; (8005084 <vTaskSwitchContext+0xb4>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fec:	4b26      	ldr	r3, [pc, #152]	; (8005088 <vTaskSwitchContext+0xb8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e010      	b.n	8005016 <vTaskSwitchContext+0x46>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <vTaskSwitchContext+0x40>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	607b      	str	r3, [r7, #4]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <vTaskSwitchContext+0x3e>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b01      	subs	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	491d      	ldr	r1, [pc, #116]	; (800508c <vTaskSwitchContext+0xbc>)
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0e4      	beq.n	8004ff4 <vTaskSwitchContext+0x24>
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <vTaskSwitchContext+0xbc>)
 8005036:	4413      	add	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	3308      	adds	r3, #8
 800504c:	429a      	cmp	r2, r3
 800504e:	d104      	bne.n	800505a <vTaskSwitchContext+0x8a>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <vTaskSwitchContext+0xc0>)
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	4a08      	ldr	r2, [pc, #32]	; (8005088 <vTaskSwitchContext+0xb8>)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <vTaskSwitchContext+0xc0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3354      	adds	r3, #84	; 0x54
 8005070:	4a08      	ldr	r2, [pc, #32]	; (8005094 <vTaskSwitchContext+0xc4>)
 8005072:	6013      	str	r3, [r2, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	20000e08 	.word	0x20000e08
 8005084:	20000df4 	.word	0x20000df4
 8005088:	20000de8 	.word	0x20000de8
 800508c:	20000910 	.word	0x20000910
 8005090:	2000090c 	.word	0x2000090c
 8005094:	20000070 	.word	0x20000070

08005098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60fb      	str	r3, [r7, #12]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <vTaskPlaceOnEventList+0x44>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3318      	adds	r3, #24
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fe fe61 	bl	8003d8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050cc:	2101      	movs	r1, #1
 80050ce:	6838      	ldr	r0, [r7, #0]
 80050d0:	f000 fa80 	bl	80055d4 <prvAddCurrentTaskToDelayedList>
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	2000090c 	.word	0x2000090c

080050e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	617b      	str	r3, [r7, #20]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <vTaskPlaceOnEventListRestricted+0x54>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3318      	adds	r3, #24
 800510e:	4619      	mov	r1, r3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7fe fe18 	bl	8003d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005120:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	68b8      	ldr	r0, [r7, #8]
 8005126:	f000 fa55 	bl	80055d4 <prvAddCurrentTaskToDelayedList>
	}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	2000090c 	.word	0x2000090c

08005138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	60fb      	str	r3, [r7, #12]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	3318      	adds	r3, #24
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe fe49 	bl	8003e00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <xTaskRemoveFromEventList+0xb0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11d      	bne.n	80051b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3304      	adds	r3, #4
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fe40 	bl	8003e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <xTaskRemoveFromEventList+0xb4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d903      	bls.n	8005194 <xTaskRemoveFromEventList+0x5c>
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <xTaskRemoveFromEventList+0xb4>)
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <xTaskRemoveFromEventList+0xb8>)
 80051a2:	441a      	add	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f7fe fdcb 	bl	8003d46 <vListInsertEnd>
 80051b0:	e005      	b.n	80051be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3318      	adds	r3, #24
 80051b6:	4619      	mov	r1, r3
 80051b8:	480e      	ldr	r0, [pc, #56]	; (80051f4 <xTaskRemoveFromEventList+0xbc>)
 80051ba:	f7fe fdc4 	bl	8003d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <xTaskRemoveFromEventList+0xc0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d905      	bls.n	80051d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <xTaskRemoveFromEventList+0xc4>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e001      	b.n	80051dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051dc:	697b      	ldr	r3, [r7, #20]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000e08 	.word	0x20000e08
 80051ec:	20000de8 	.word	0x20000de8
 80051f0:	20000910 	.word	0x20000910
 80051f4:	20000da0 	.word	0x20000da0
 80051f8:	2000090c 	.word	0x2000090c
 80051fc:	20000df4 	.word	0x20000df4

08005200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <vTaskInternalSetTimeOutState+0x24>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <vTaskInternalSetTimeOutState+0x28>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	605a      	str	r2, [r3, #4]
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000df8 	.word	0x20000df8
 8005228:	20000de4 	.word	0x20000de4

0800522c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	613b      	str	r3, [r7, #16]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	60fb      	str	r3, [r7, #12]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800526e:	f000 fe81 	bl	8005f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <xTaskCheckForTimeOut+0xbc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528a:	d102      	bne.n	8005292 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e023      	b.n	80052da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <xTaskCheckForTimeOut+0xc0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d007      	beq.n	80052ae <xTaskCheckForTimeOut+0x82>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d302      	bcc.n	80052ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e015      	b.n	80052da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d20b      	bcs.n	80052d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff ff9b 	bl	8005200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	e004      	b.n	80052da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052da:	f000 fe7b 	bl	8005fd4 <vPortExitCritical>

	return xReturn;
 80052de:	69fb      	ldr	r3, [r7, #28]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000de4 	.word	0x20000de4
 80052ec:	20000df8 	.word	0x20000df8

080052f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <vTaskMissedYield+0x14>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
}
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000df4 	.word	0x20000df4

08005308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005310:	f000 f852 	bl	80053b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <prvIdleTask+0x28>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d9f9      	bls.n	8005310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <prvIdleTask+0x2c>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800532c:	e7f0      	b.n	8005310 <prvIdleTask+0x8>
 800532e:	bf00      	nop
 8005330:	20000910 	.word	0x20000910
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	e00c      	b.n	800535e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <prvInitialiseTaskLists+0x60>)
 8005350:	4413      	add	r3, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fcca 	bl	8003cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3301      	adds	r3, #1
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b37      	cmp	r3, #55	; 0x37
 8005362:	d9ef      	bls.n	8005344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005364:	480d      	ldr	r0, [pc, #52]	; (800539c <prvInitialiseTaskLists+0x64>)
 8005366:	f7fe fcc1 	bl	8003cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800536a:	480d      	ldr	r0, [pc, #52]	; (80053a0 <prvInitialiseTaskLists+0x68>)
 800536c:	f7fe fcbe 	bl	8003cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005370:	480c      	ldr	r0, [pc, #48]	; (80053a4 <prvInitialiseTaskLists+0x6c>)
 8005372:	f7fe fcbb 	bl	8003cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005376:	480c      	ldr	r0, [pc, #48]	; (80053a8 <prvInitialiseTaskLists+0x70>)
 8005378:	f7fe fcb8 	bl	8003cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800537c:	480b      	ldr	r0, [pc, #44]	; (80053ac <prvInitialiseTaskLists+0x74>)
 800537e:	f7fe fcb5 	bl	8003cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <prvInitialiseTaskLists+0x78>)
 8005384:	4a05      	ldr	r2, [pc, #20]	; (800539c <prvInitialiseTaskLists+0x64>)
 8005386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <prvInitialiseTaskLists+0x7c>)
 800538a:	4a05      	ldr	r2, [pc, #20]	; (80053a0 <prvInitialiseTaskLists+0x68>)
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000910 	.word	0x20000910
 800539c:	20000d70 	.word	0x20000d70
 80053a0:	20000d84 	.word	0x20000d84
 80053a4:	20000da0 	.word	0x20000da0
 80053a8:	20000db4 	.word	0x20000db4
 80053ac:	20000dcc 	.word	0x20000dcc
 80053b0:	20000d98 	.word	0x20000d98
 80053b4:	20000d9c 	.word	0x20000d9c

080053b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053be:	e019      	b.n	80053f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053c0:	f000 fdd8 	bl	8005f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <prvCheckTasksWaitingTermination+0x50>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fd15 	bl	8003e00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <prvCheckTasksWaitingTermination+0x54>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3b01      	subs	r3, #1
 80053dc:	4a0b      	ldr	r2, [pc, #44]	; (800540c <prvCheckTasksWaitingTermination+0x54>)
 80053de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <prvCheckTasksWaitingTermination+0x58>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <prvCheckTasksWaitingTermination+0x58>)
 80053e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053ea:	f000 fdf3 	bl	8005fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f810 	bl	8005414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <prvCheckTasksWaitingTermination+0x58>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e1      	bne.n	80053c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000db4 	.word	0x20000db4
 800540c:	20000de0 	.word	0x20000de0
 8005410:	20000dc8 	.word	0x20000dc8

08005414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3354      	adds	r3, #84	; 0x54
 8005420:	4618      	mov	r0, r3
 8005422:	f001 fad3 	bl	80069cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	4618      	mov	r0, r3
 8005436:	f000 ff8b 	bl	8006350 <vPortFree>
				vPortFree( pxTCB );
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 ff88 	bl	8006350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005440:	e018      	b.n	8005474 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005448:	2b01      	cmp	r3, #1
 800544a:	d103      	bne.n	8005454 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 ff7f 	bl	8006350 <vPortFree>
	}
 8005452:	e00f      	b.n	8005474 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800545a:	2b02      	cmp	r3, #2
 800545c:	d00a      	beq.n	8005474 <prvDeleteTCB+0x60>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60fb      	str	r3, [r7, #12]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <prvDeleteTCB+0x5e>
	}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <prvResetNextTaskUnblockTime+0x38>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <prvResetNextTaskUnblockTime+0x3c>)
 800548e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005494:	e008      	b.n	80054a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <prvResetNextTaskUnblockTime+0x38>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <prvResetNextTaskUnblockTime+0x3c>)
 80054a6:	6013      	str	r3, [r2, #0]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000d98 	.word	0x20000d98
 80054b8:	20000e00 	.word	0x20000e00

080054bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <xTaskGetSchedulerState+0x34>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054ca:	2301      	movs	r3, #1
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	e008      	b.n	80054e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <xTaskGetSchedulerState+0x38>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054d8:	2302      	movs	r3, #2
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	e001      	b.n	80054e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054de:	2300      	movs	r3, #0
 80054e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054e2:	687b      	ldr	r3, [r7, #4]
	}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	20000dec 	.word	0x20000dec
 80054f4:	20000e08 	.word	0x20000e08

080054f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d056      	beq.n	80055bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800550e:	4b2e      	ldr	r3, [pc, #184]	; (80055c8 <xTaskPriorityDisinherit+0xd0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	429a      	cmp	r2, r3
 8005516:	d00a      	beq.n	800552e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	60fb      	str	r3, [r7, #12]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60bb      	str	r3, [r7, #8]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	429a      	cmp	r2, r3
 8005560:	d02c      	beq.n	80055bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005566:	2b00      	cmp	r3, #0
 8005568:	d128      	bne.n	80055bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fc46 	bl	8003e00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <xTaskPriorityDisinherit+0xd4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <xTaskPriorityDisinherit+0xa4>
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	4a0c      	ldr	r2, [pc, #48]	; (80055cc <xTaskPriorityDisinherit+0xd4>)
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <xTaskPriorityDisinherit+0xd8>)
 80055aa:	441a      	add	r2, r3
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f7fe fbc7 	bl	8003d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055bc:	697b      	ldr	r3, [r7, #20]
	}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	2000090c 	.word	0x2000090c
 80055cc:	20000de8 	.word	0x20000de8
 80055d0:	20000910 	.word	0x20000910

080055d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <prvAddCurrentTaskToDelayedList+0x90>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055e4:	4b20      	ldr	r3, [pc, #128]	; (8005668 <prvAddCurrentTaskToDelayedList+0x94>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fc08 	bl	8003e00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f6:	d10a      	bne.n	800560e <prvAddCurrentTaskToDelayedList+0x3a>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055fe:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <prvAddCurrentTaskToDelayedList+0x94>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4819      	ldr	r0, [pc, #100]	; (800566c <prvAddCurrentTaskToDelayedList+0x98>)
 8005608:	f7fe fb9d 	bl	8003d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800560c:	e026      	b.n	800565c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4413      	add	r3, r2
 8005614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <prvAddCurrentTaskToDelayedList+0x94>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	d209      	bcs.n	800563a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005626:	4b12      	ldr	r3, [pc, #72]	; (8005670 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <prvAddCurrentTaskToDelayedList+0x94>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7fe fbab 	bl	8003d8e <vListInsert>
}
 8005638:	e010      	b.n	800565c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800563a:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <prvAddCurrentTaskToDelayedList+0x94>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f7fe fba1 	bl	8003d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	d202      	bcs.n	800565c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005656:	4a08      	ldr	r2, [pc, #32]	; (8005678 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	6013      	str	r3, [r2, #0]
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000de4 	.word	0x20000de4
 8005668:	2000090c 	.word	0x2000090c
 800566c:	20000dcc 	.word	0x20000dcc
 8005670:	20000d9c 	.word	0x20000d9c
 8005674:	20000d98 	.word	0x20000d98
 8005678:	20000e00 	.word	0x20000e00

0800567c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005686:	f000 fb07 	bl	8005c98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <xTimerCreateTimerTask+0x80>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d021      	beq.n	80056d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800569a:	1d3a      	adds	r2, r7, #4
 800569c:	f107 0108 	add.w	r1, r7, #8
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fb07 	bl	8003cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	9202      	str	r2, [sp, #8]
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	2302      	movs	r3, #2
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	460a      	mov	r2, r1
 80056bc:	4910      	ldr	r1, [pc, #64]	; (8005700 <xTimerCreateTimerTask+0x84>)
 80056be:	4811      	ldr	r0, [pc, #68]	; (8005704 <xTimerCreateTimerTask+0x88>)
 80056c0:	f7ff f8b4 	bl	800482c <xTaskCreateStatic>
 80056c4:	4603      	mov	r3, r0
 80056c6:	4a10      	ldr	r2, [pc, #64]	; (8005708 <xTimerCreateTimerTask+0x8c>)
 80056c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80056ca:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <xTimerCreateTimerTask+0x8c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056d2:	2301      	movs	r3, #1
 80056d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	613b      	str	r3, [r7, #16]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056f2:	697b      	ldr	r3, [r7, #20]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000e3c 	.word	0x20000e3c
 8005700:	08007650 	.word	0x08007650
 8005704:	08005841 	.word	0x08005841
 8005708:	20000e40 	.word	0x20000e40

0800570c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800571a:	2300      	movs	r3, #0
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	623b      	str	r3, [r7, #32]
}
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <xTimerGenericCommand+0x98>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02a      	beq.n	8005798 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b05      	cmp	r3, #5
 8005752:	dc18      	bgt.n	8005786 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005754:	f7ff feb2 	bl	80054bc <xTaskGetSchedulerState>
 8005758:	4603      	mov	r3, r0
 800575a:	2b02      	cmp	r3, #2
 800575c:	d109      	bne.n	8005772 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <xTimerGenericCommand+0x98>)
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f107 0110 	add.w	r1, r7, #16
 8005766:	2300      	movs	r3, #0
 8005768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576a:	f7fe fc77 	bl	800405c <xQueueGenericSend>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24
 8005770:	e012      	b.n	8005798 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <xTimerGenericCommand+0x98>)
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	f107 0110 	add.w	r1, r7, #16
 800577a:	2300      	movs	r3, #0
 800577c:	2200      	movs	r2, #0
 800577e:	f7fe fc6d 	bl	800405c <xQueueGenericSend>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24
 8005784:	e008      	b.n	8005798 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <xTimerGenericCommand+0x98>)
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	f107 0110 	add.w	r1, r7, #16
 800578e:	2300      	movs	r3, #0
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	f7fe fd61 	bl	8004258 <xQueueGenericSendFromISR>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800579a:	4618      	mov	r0, r3
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000e3c 	.word	0x20000e3c

080057a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b2:	4b22      	ldr	r3, [pc, #136]	; (800583c <prvProcessExpiredTimer+0x94>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	3304      	adds	r3, #4
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fb1d 	bl	8003e00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d022      	beq.n	800581a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	18d1      	adds	r1, r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	6978      	ldr	r0, [r7, #20]
 80057e2:	f000 f8d1 	bl	8005988 <prvInsertTimerInActiveList>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01f      	beq.n	800582c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057ec:	2300      	movs	r3, #0
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2300      	movs	r3, #0
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	2100      	movs	r1, #0
 80057f6:	6978      	ldr	r0, [r7, #20]
 80057f8:	f7ff ff88 	bl	800570c <xTimerGenericCommand>
 80057fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d113      	bne.n	800582c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	60fb      	str	r3, [r7, #12]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	b2da      	uxtb	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	6978      	ldr	r0, [r7, #20]
 8005832:	4798      	blx	r3
}
 8005834:	bf00      	nop
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000e34 	.word	0x20000e34

08005840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005848:	f107 0308 	add.w	r3, r7, #8
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f857 	bl	8005900 <prvGetNextExpireTime>
 8005852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4619      	mov	r1, r3
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f803 	bl	8005864 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800585e:	f000 f8d5 	bl	8005a0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005862:	e7f1      	b.n	8005848 <prvTimerTask+0x8>

08005864 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800586e:	f7ff fa39 	bl	8004ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f866 	bl	8005948 <prvSampleTimeNow>
 800587c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d130      	bne.n	80058e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <prvProcessTimerOrBlockTask+0x3c>
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	429a      	cmp	r2, r3
 8005890:	d806      	bhi.n	80058a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005892:	f7ff fa35 	bl	8004d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ff85 	bl	80057a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800589e:	e024      	b.n	80058ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058a6:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <prvProcessTimerOrBlockTask+0x90>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <prvProcessTimerOrBlockTask+0x50>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <prvProcessTimerOrBlockTask+0x52>
 80058b4:	2300      	movs	r3, #0
 80058b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <prvProcessTimerOrBlockTask+0x94>)
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f7fe ff7d 	bl	80047c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058ca:	f7ff fa19 	bl	8004d00 <xTaskResumeAll>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <prvProcessTimerOrBlockTask+0x98>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
}
 80058e4:	e001      	b.n	80058ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058e6:	f7ff fa0b 	bl	8004d00 <xTaskResumeAll>
}
 80058ea:	bf00      	nop
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000e38 	.word	0x20000e38
 80058f8:	20000e3c 	.word	0x20000e3c
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <prvGetNextExpireTime+0x44>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <prvGetNextExpireTime+0x16>
 8005912:	2201      	movs	r2, #1
 8005914:	e000      	b.n	8005918 <prvGetNextExpireTime+0x18>
 8005916:	2200      	movs	r2, #0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <prvGetNextExpireTime+0x44>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e001      	b.n	8005934 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005934:	68fb      	ldr	r3, [r7, #12]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000e34 	.word	0x20000e34

08005948 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005950:	f7ff fa74 	bl	8004e3c <xTaskGetTickCount>
 8005954:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <prvSampleTimeNow+0x3c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	429a      	cmp	r2, r3
 800595e:	d205      	bcs.n	800596c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005960:	f000 f936 	bl	8005bd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e002      	b.n	8005972 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005972:	4a04      	ldr	r2, [pc, #16]	; (8005984 <prvSampleTimeNow+0x3c>)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000e44 	.word	0x20000e44

08005988 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d812      	bhi.n	80059d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e01b      	b.n	80059fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <prvInsertTimerInActiveList+0x7c>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3304      	adds	r3, #4
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f7fe f9de 	bl	8003d8e <vListInsert>
 80059d2:	e012      	b.n	80059fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d206      	bcs.n	80059ea <prvInsertTimerInActiveList+0x62>
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d302      	bcc.n	80059ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e007      	b.n	80059fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <prvInsertTimerInActiveList+0x80>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4619      	mov	r1, r3
 80059f4:	4610      	mov	r0, r2
 80059f6:	f7fe f9ca 	bl	8003d8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059fa:	697b      	ldr	r3, [r7, #20]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000e38 	.word	0x20000e38
 8005a08:	20000e34 	.word	0x20000e34

08005a0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	; 0x38
 8005a10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a12:	e0ca      	b.n	8005baa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da18      	bge.n	8005a4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	61fb      	str	r3, [r7, #28]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a42:	6850      	ldr	r0, [r2, #4]
 8005a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a46:	6892      	ldr	r2, [r2, #8]
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f2c0 80ab 	blt.w	8005baa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe f9cb 	bl	8003e00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ff6b 	bl	8005948 <prvSampleTimeNow>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b09      	cmp	r3, #9
 8005a78:	f200 8096 	bhi.w	8005ba8 <prvProcessReceivedCommands+0x19c>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <prvProcessReceivedCommands+0x78>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005aad 	.word	0x08005aad
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005aad 	.word	0x08005aad
 8005a90:	08005b21 	.word	0x08005b21
 8005a94:	08005b35 	.word	0x08005b35
 8005a98:	08005b7f 	.word	0x08005b7f
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005aad 	.word	0x08005aad
 8005aa4:	08005b21 	.word	0x08005b21
 8005aa8:	08005b35 	.word	0x08005b35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	18d1      	adds	r1, r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005acc:	f7ff ff5c 	bl	8005988 <prvInsertTimerInActiveList>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d069      	beq.n	8005baa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005adc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d05e      	beq.n	8005baa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	441a      	add	r2, r3
 8005af4:	2300      	movs	r3, #0
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	2100      	movs	r1, #0
 8005afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afe:	f7ff fe05 	bl	800570c <xTimerGenericCommand>
 8005b02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d14f      	bne.n	8005baa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	61bb      	str	r3, [r7, #24]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005b32:	e03a      	b.n	8005baa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	617b      	str	r3, [r7, #20]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	18d1      	adds	r1, r2, r3
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b78:	f7ff ff06 	bl	8005988 <prvInsertTimerInActiveList>
					break;
 8005b7c:	e015      	b.n	8005baa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8e:	f000 fbdf 	bl	8006350 <vPortFree>
 8005b92:	e00a      	b.n	8005baa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ba6:	e000      	b.n	8005baa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005ba8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <prvProcessReceivedCommands+0x1c0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	1d39      	adds	r1, r7, #4
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fbec 	bl	8004390 <xQueueReceive>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f af2a 	bne.w	8005a14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	3730      	adds	r7, #48	; 0x30
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000e3c 	.word	0x20000e3c

08005bd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bd6:	e048      	b.n	8005c6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bd8:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <prvSwitchTimerLists+0xc0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be2:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <prvSwitchTimerLists+0xc0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe f905 	bl	8003e00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d02e      	beq.n	8005c6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d90e      	bls.n	8005c3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c2a:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <prvSwitchTimerLists+0xc0>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4619      	mov	r1, r3
 8005c34:	4610      	mov	r0, r2
 8005c36:	f7fe f8aa 	bl	8003d8e <vListInsert>
 8005c3a:	e016      	b.n	8005c6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	2300      	movs	r3, #0
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	2100      	movs	r1, #0
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff fd60 	bl	800570c <xTimerGenericCommand>
 8005c4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	603b      	str	r3, [r7, #0]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <prvSwitchTimerLists+0xc0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1b1      	bne.n	8005bd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <prvSwitchTimerLists+0xc0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <prvSwitchTimerLists+0xc4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <prvSwitchTimerLists+0xc0>)
 8005c80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c82:	4a04      	ldr	r2, [pc, #16]	; (8005c94 <prvSwitchTimerLists+0xc4>)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	6013      	str	r3, [r2, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000e34 	.word	0x20000e34
 8005c94:	20000e38 	.word	0x20000e38

08005c98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c9e:	f000 f969 	bl	8005f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ca2:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <prvCheckForValidListAndQueue+0x60>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d120      	bne.n	8005cec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005caa:	4814      	ldr	r0, [pc, #80]	; (8005cfc <prvCheckForValidListAndQueue+0x64>)
 8005cac:	f7fe f81e 	bl	8003cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005cb0:	4813      	ldr	r0, [pc, #76]	; (8005d00 <prvCheckForValidListAndQueue+0x68>)
 8005cb2:	f7fe f81b 	bl	8003cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005cb6:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <prvCheckForValidListAndQueue+0x6c>)
 8005cb8:	4a10      	ldr	r2, [pc, #64]	; (8005cfc <prvCheckForValidListAndQueue+0x64>)
 8005cba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005cbc:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <prvCheckForValidListAndQueue+0x70>)
 8005cbe:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <prvCheckForValidListAndQueue+0x68>)
 8005cc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <prvCheckForValidListAndQueue+0x74>)
 8005cc8:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <prvCheckForValidListAndQueue+0x78>)
 8005cca:	2110      	movs	r1, #16
 8005ccc:	200a      	movs	r0, #10
 8005cce:	f7fe f929 	bl	8003f24 <xQueueGenericCreateStatic>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4a08      	ldr	r2, [pc, #32]	; (8005cf8 <prvCheckForValidListAndQueue+0x60>)
 8005cd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005cd8:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <prvCheckForValidListAndQueue+0x60>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <prvCheckForValidListAndQueue+0x60>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <prvCheckForValidListAndQueue+0x7c>)
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe fd42 	bl	8004770 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cec:	f000 f972 	bl	8005fd4 <vPortExitCritical>
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000e3c 	.word	0x20000e3c
 8005cfc:	20000e0c 	.word	0x20000e0c
 8005d00:	20000e20 	.word	0x20000e20
 8005d04:	20000e34 	.word	0x20000e34
 8005d08:	20000e38 	.word	0x20000e38
 8005d0c:	20000ee8 	.word	0x20000ee8
 8005d10:	20000e48 	.word	0x20000e48
 8005d14:	08007658 	.word	0x08007658

08005d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3b04      	subs	r3, #4
 8005d28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3b04      	subs	r3, #4
 8005d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 0201 	bic.w	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d48:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <pxPortInitialiseStack+0x64>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3b14      	subs	r3, #20
 8005d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f06f 0202 	mvn.w	r2, #2
 8005d66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3b20      	subs	r3, #32
 8005d6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	08005d81 	.word	0x08005d81

08005d80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <prvTaskExitError+0x54>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d92:	d00a      	beq.n	8005daa <prvTaskExitError+0x2a>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60fb      	str	r3, [r7, #12]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <prvTaskExitError+0x28>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	60bb      	str	r3, [r7, #8]
}
 8005dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dbe:	bf00      	nop
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0fc      	beq.n	8005dc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	20000014 	.word	0x20000014
	...

08005de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <pxCurrentTCBConst2>)
 8005de2:	6819      	ldr	r1, [r3, #0]
 8005de4:	6808      	ldr	r0, [r1, #0]
 8005de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dea:	f380 8809 	msr	PSP, r0
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f04f 0000 	mov.w	r0, #0
 8005df6:	f380 8811 	msr	BASEPRI, r0
 8005dfa:	4770      	bx	lr
 8005dfc:	f3af 8000 	nop.w

08005e00 <pxCurrentTCBConst2>:
 8005e00:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop

08005e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e08:	4808      	ldr	r0, [pc, #32]	; (8005e2c <prvPortStartFirstTask+0x24>)
 8005e0a:	6800      	ldr	r0, [r0, #0]
 8005e0c:	6800      	ldr	r0, [r0, #0]
 8005e0e:	f380 8808 	msr	MSP, r0
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8814 	msr	CONTROL, r0
 8005e1a:	b662      	cpsie	i
 8005e1c:	b661      	cpsie	f
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	df00      	svc	0
 8005e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e2a:	bf00      	nop
 8005e2c:	e000ed08 	.word	0xe000ed08

08005e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e36:	4b46      	ldr	r3, [pc, #280]	; (8005f50 <xPortStartScheduler+0x120>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a46      	ldr	r2, [pc, #280]	; (8005f54 <xPortStartScheduler+0x124>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d10a      	bne.n	8005e56 <xPortStartScheduler+0x26>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	613b      	str	r3, [r7, #16]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <xPortStartScheduler+0x120>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a3f      	ldr	r2, [pc, #252]	; (8005f58 <xPortStartScheduler+0x128>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10a      	bne.n	8005e76 <xPortStartScheduler+0x46>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60fb      	str	r3, [r7, #12]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e76:	4b39      	ldr	r3, [pc, #228]	; (8005f5c <xPortStartScheduler+0x12c>)
 8005e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	22ff      	movs	r2, #255	; 0xff
 8005e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <xPortStartScheduler+0x130>)
 8005e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e9e:	4b31      	ldr	r3, [pc, #196]	; (8005f64 <xPortStartScheduler+0x134>)
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ea4:	e009      	b.n	8005eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ea6:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <xPortStartScheduler+0x134>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <xPortStartScheduler+0x134>)
 8005eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b80      	cmp	r3, #128	; 0x80
 8005ec4:	d0ef      	beq.n	8005ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ec6:	4b27      	ldr	r3, [pc, #156]	; (8005f64 <xPortStartScheduler+0x134>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1c3 0307 	rsb	r3, r3, #7
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d00a      	beq.n	8005ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	60bb      	str	r3, [r7, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <xPortStartScheduler+0x134>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <xPortStartScheduler+0x134>)
 8005ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ef2:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <xPortStartScheduler+0x134>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005efa:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <xPortStartScheduler+0x134>)
 8005efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f06:	4b18      	ldr	r3, [pc, #96]	; (8005f68 <xPortStartScheduler+0x138>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <xPortStartScheduler+0x138>)
 8005f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <xPortStartScheduler+0x138>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <xPortStartScheduler+0x138>)
 8005f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f1e:	f000 f8dd 	bl	80060dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <xPortStartScheduler+0x13c>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f28:	f000 f8fc 	bl	8006124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f2c:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <xPortStartScheduler+0x140>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a0f      	ldr	r2, [pc, #60]	; (8005f70 <xPortStartScheduler+0x140>)
 8005f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f38:	f7ff ff66 	bl	8005e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f3c:	f7ff f848 	bl	8004fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8005f40:	f7ff ff1e 	bl	8005d80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	e000ed00 	.word	0xe000ed00
 8005f54:	410fc271 	.word	0x410fc271
 8005f58:	410fc270 	.word	0x410fc270
 8005f5c:	e000e400 	.word	0xe000e400
 8005f60:	20000f38 	.word	0x20000f38
 8005f64:	20000f3c 	.word	0x20000f3c
 8005f68:	e000ed20 	.word	0xe000ed20
 8005f6c:	20000014 	.word	0x20000014
 8005f70:	e000ef34 	.word	0xe000ef34

08005f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	607b      	str	r3, [r7, #4]
}
 8005f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <vPortEnterCritical+0x58>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a0d      	ldr	r2, [pc, #52]	; (8005fcc <vPortEnterCritical+0x58>)
 8005f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <vPortEnterCritical+0x58>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d10f      	bne.n	8005fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <vPortEnterCritical+0x5c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	603b      	str	r3, [r7, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <vPortEnterCritical+0x4a>
	}
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000014 	.word	0x20000014
 8005fd0:	e000ed04 	.word	0xe000ed04

08005fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <vPortExitCritical+0x50>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <vPortExitCritical+0x24>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	607b      	str	r3, [r7, #4]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <vPortExitCritical+0x50>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	4a09      	ldr	r2, [pc, #36]	; (8006024 <vPortExitCritical+0x50>)
 8006000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006002:	4b08      	ldr	r3, [pc, #32]	; (8006024 <vPortExitCritical+0x50>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d105      	bne.n	8006016 <vPortExitCritical+0x42>
 800600a:	2300      	movs	r3, #0
 800600c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	f383 8811 	msr	BASEPRI, r3
}
 8006014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000014 	.word	0x20000014
	...

08006030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006030:	f3ef 8009 	mrs	r0, PSP
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4b15      	ldr	r3, [pc, #84]	; (8006090 <pxCurrentTCBConst>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	f01e 0f10 	tst.w	lr, #16
 8006040:	bf08      	it	eq
 8006042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604a:	6010      	str	r0, [r2, #0]
 800604c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006054:	f380 8811 	msr	BASEPRI, r0
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f7fe ffb6 	bl	8004fd0 <vTaskSwitchContext>
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f380 8811 	msr	BASEPRI, r0
 800606c:	bc09      	pop	{r0, r3}
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	6808      	ldr	r0, [r1, #0]
 8006072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006076:	f01e 0f10 	tst.w	lr, #16
 800607a:	bf08      	it	eq
 800607c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006080:	f380 8809 	msr	PSP, r0
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	f3af 8000 	nop.w

08006090 <pxCurrentTCBConst>:
 8006090:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	607b      	str	r3, [r7, #4]
}
 80060b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060b2:	f7fe fed3 	bl	8004e5c <xTaskIncrementTick>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <xPortSysTickHandler+0x40>)
 80060be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	2300      	movs	r3, #0
 80060c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f383 8811 	msr	BASEPRI, r3
}
 80060ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <vPortSetupTimerInterrupt+0x34>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <vPortSetupTimerInterrupt+0x38>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <vPortSetupTimerInterrupt+0x3c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0a      	ldr	r2, [pc, #40]	; (800611c <vPortSetupTimerInterrupt+0x40>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	099b      	lsrs	r3, r3, #6
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <vPortSetupTimerInterrupt+0x44>)
 80060fa:	3b01      	subs	r3, #1
 80060fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <vPortSetupTimerInterrupt+0x34>)
 8006100:	2207      	movs	r2, #7
 8006102:	601a      	str	r2, [r3, #0]
}
 8006104:	bf00      	nop
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	e000e010 	.word	0xe000e010
 8006114:	e000e018 	.word	0xe000e018
 8006118:	20000008 	.word	0x20000008
 800611c:	10624dd3 	.word	0x10624dd3
 8006120:	e000e014 	.word	0xe000e014

08006124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006134 <vPortEnableVFP+0x10>
 8006128:	6801      	ldr	r1, [r0, #0]
 800612a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800612e:	6001      	str	r1, [r0, #0]
 8006130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006132:	bf00      	nop
 8006134:	e000ed88 	.word	0xe000ed88

08006138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800613e:	f3ef 8305 	mrs	r3, IPSR
 8006142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	d914      	bls.n	8006174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800614a:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <vPortValidateInterruptPriority+0x70>)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006154:	4b15      	ldr	r3, [pc, #84]	; (80061ac <vPortValidateInterruptPriority+0x74>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	7afa      	ldrb	r2, [r7, #11]
 800615a:	429a      	cmp	r2, r3
 800615c:	d20a      	bcs.n	8006174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	607b      	str	r3, [r7, #4]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006174:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <vPortValidateInterruptPriority+0x78>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <vPortValidateInterruptPriority+0x7c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d90a      	bls.n	800619a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	603b      	str	r3, [r7, #0]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <vPortValidateInterruptPriority+0x60>
	}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	e000e3f0 	.word	0xe000e3f0
 80061ac:	20000f38 	.word	0x20000f38
 80061b0:	e000ed0c 	.word	0xe000ed0c
 80061b4:	20000f3c 	.word	0x20000f3c

080061b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	; 0x28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061c4:	f7fe fd8e 	bl	8004ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061c8:	4b5b      	ldr	r3, [pc, #364]	; (8006338 <pvPortMalloc+0x180>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061d0:	f000 f920 	bl	8006414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061d4:	4b59      	ldr	r3, [pc, #356]	; (800633c <pvPortMalloc+0x184>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 8093 	bne.w	8006308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01d      	beq.n	8006224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061e8:	2208      	movs	r2, #8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4413      	add	r3, r2
 80061ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d014      	beq.n	8006224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	3308      	adds	r3, #8
 8006202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <pvPortMalloc+0x6c>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	617b      	str	r3, [r7, #20]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d06e      	beq.n	8006308 <pvPortMalloc+0x150>
 800622a:	4b45      	ldr	r3, [pc, #276]	; (8006340 <pvPortMalloc+0x188>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d869      	bhi.n	8006308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006234:	4b43      	ldr	r3, [pc, #268]	; (8006344 <pvPortMalloc+0x18c>)
 8006236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006238:	4b42      	ldr	r3, [pc, #264]	; (8006344 <pvPortMalloc+0x18c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800623e:	e004      	b.n	800624a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d903      	bls.n	800625c <pvPortMalloc+0xa4>
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f1      	bne.n	8006240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800625c:	4b36      	ldr	r3, [pc, #216]	; (8006338 <pvPortMalloc+0x180>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	429a      	cmp	r2, r3
 8006264:	d050      	beq.n	8006308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2208      	movs	r2, #8
 800626c:	4413      	add	r3, r2
 800626e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	2308      	movs	r3, #8
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	429a      	cmp	r2, r3
 8006286:	d91f      	bls.n	80062c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <pvPortMalloc+0xf8>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	613b      	str	r3, [r7, #16]
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062c2:	69b8      	ldr	r0, [r7, #24]
 80062c4:	f000 f908 	bl	80064d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062c8:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <pvPortMalloc+0x188>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <pvPortMalloc+0x188>)
 80062d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062d6:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <pvPortMalloc+0x188>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <pvPortMalloc+0x190>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d203      	bcs.n	80062ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062e2:	4b17      	ldr	r3, [pc, #92]	; (8006340 <pvPortMalloc+0x188>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a18      	ldr	r2, [pc, #96]	; (8006348 <pvPortMalloc+0x190>)
 80062e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <pvPortMalloc+0x184>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <pvPortMalloc+0x194>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3301      	adds	r3, #1
 8006304:	4a11      	ldr	r2, [pc, #68]	; (800634c <pvPortMalloc+0x194>)
 8006306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006308:	f7fe fcfa 	bl	8004d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <pvPortMalloc+0x174>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	60fb      	str	r3, [r7, #12]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <pvPortMalloc+0x172>
	return pvReturn;
 800632c:	69fb      	ldr	r3, [r7, #28]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3728      	adds	r7, #40	; 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20001b00 	.word	0x20001b00
 800633c:	20001b14 	.word	0x20001b14
 8006340:	20001b04 	.word	0x20001b04
 8006344:	20001af8 	.word	0x20001af8
 8006348:	20001b08 	.word	0x20001b08
 800634c:	20001b0c 	.word	0x20001b0c

08006350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d04d      	beq.n	80063fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006362:	2308      	movs	r3, #8
 8006364:	425b      	negs	r3, r3
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	4b24      	ldr	r3, [pc, #144]	; (8006408 <vPortFree+0xb8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <vPortFree+0x44>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60fb      	str	r3, [r7, #12]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <vPortFree+0x62>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	60bb      	str	r3, [r7, #8]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <vPortFree+0xb8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01e      	beq.n	80063fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d11a      	bne.n	80063fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <vPortFree+0xb8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	43db      	mvns	r3, r3
 80063d2:	401a      	ands	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063d8:	f7fe fc84 	bl	8004ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <vPortFree+0xbc>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4413      	add	r3, r2
 80063e6:	4a09      	ldr	r2, [pc, #36]	; (800640c <vPortFree+0xbc>)
 80063e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ea:	6938      	ldr	r0, [r7, #16]
 80063ec:	f000 f874 	bl	80064d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <vPortFree+0xc0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3301      	adds	r3, #1
 80063f6:	4a06      	ldr	r2, [pc, #24]	; (8006410 <vPortFree+0xc0>)
 80063f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063fa:	f7fe fc81 	bl	8004d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063fe:	bf00      	nop
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20001b14 	.word	0x20001b14
 800640c:	20001b04 	.word	0x20001b04
 8006410:	20001b10 	.word	0x20001b10

08006414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800641a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800641e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006420:	4b27      	ldr	r3, [pc, #156]	; (80064c0 <prvHeapInit+0xac>)
 8006422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3307      	adds	r3, #7
 8006432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <prvHeapInit+0xac>)
 8006444:	4413      	add	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800644c:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <prvHeapInit+0xb0>)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <prvHeapInit+0xb0>)
 8006454:	2200      	movs	r2, #0
 8006456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4413      	add	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006460:	2208      	movs	r2, #8
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0307 	bic.w	r3, r3, #7
 800646e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <prvHeapInit+0xb4>)
 8006474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <prvHeapInit+0xb4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <prvHeapInit+0xb4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <prvHeapInit+0xb4>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <prvHeapInit+0xb8>)
 80064a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <prvHeapInit+0xbc>)
 80064aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <prvHeapInit+0xc0>)
 80064ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064b2:	601a      	str	r2, [r3, #0]
}
 80064b4:	bf00      	nop
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	20000f40 	.word	0x20000f40
 80064c4:	20001af8 	.word	0x20001af8
 80064c8:	20001b00 	.word	0x20001b00
 80064cc:	20001b08 	.word	0x20001b08
 80064d0:	20001b04 	.word	0x20001b04
 80064d4:	20001b14 	.word	0x20001b14

080064d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064e0:	4b28      	ldr	r3, [pc, #160]	; (8006584 <prvInsertBlockIntoFreeList+0xac>)
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e002      	b.n	80064ec <prvInsertBlockIntoFreeList+0x14>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d8f7      	bhi.n	80064e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4413      	add	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d108      	bne.n	800651a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	441a      	add	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	441a      	add	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d118      	bne.n	8006560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b15      	ldr	r3, [pc, #84]	; (8006588 <prvInsertBlockIntoFreeList+0xb0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d00d      	beq.n	8006556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	441a      	add	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e008      	b.n	8006568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <prvInsertBlockIntoFreeList+0xb0>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	e003      	b.n	8006568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d002      	beq.n	8006576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20001af8 	.word	0x20001af8
 8006588:	20001b00 	.word	0x20001b00

0800658c <std>:
 800658c:	2300      	movs	r3, #0
 800658e:	b510      	push	{r4, lr}
 8006590:	4604      	mov	r4, r0
 8006592:	e9c0 3300 	strd	r3, r3, [r0]
 8006596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800659a:	6083      	str	r3, [r0, #8]
 800659c:	8181      	strh	r1, [r0, #12]
 800659e:	6643      	str	r3, [r0, #100]	; 0x64
 80065a0:	81c2      	strh	r2, [r0, #14]
 80065a2:	6183      	str	r3, [r0, #24]
 80065a4:	4619      	mov	r1, r3
 80065a6:	2208      	movs	r2, #8
 80065a8:	305c      	adds	r0, #92	; 0x5c
 80065aa:	f000 f9f7 	bl	800699c <memset>
 80065ae:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <std+0x58>)
 80065b0:	6263      	str	r3, [r4, #36]	; 0x24
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <std+0x5c>)
 80065b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <std+0x60>)
 80065b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ba:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <std+0x64>)
 80065bc:	6323      	str	r3, [r4, #48]	; 0x30
 80065be:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <std+0x68>)
 80065c0:	6224      	str	r4, [r4, #32]
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d006      	beq.n	80065d4 <std+0x48>
 80065c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065ca:	4294      	cmp	r4, r2
 80065cc:	d002      	beq.n	80065d4 <std+0x48>
 80065ce:	33d0      	adds	r3, #208	; 0xd0
 80065d0:	429c      	cmp	r4, r3
 80065d2:	d105      	bne.n	80065e0 <std+0x54>
 80065d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065dc:	f000 baac 	b.w	8006b38 <__retarget_lock_init_recursive>
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	080067ed 	.word	0x080067ed
 80065e8:	0800680f 	.word	0x0800680f
 80065ec:	08006847 	.word	0x08006847
 80065f0:	0800686b 	.word	0x0800686b
 80065f4:	20001b18 	.word	0x20001b18

080065f8 <stdio_exit_handler>:
 80065f8:	4a02      	ldr	r2, [pc, #8]	; (8006604 <stdio_exit_handler+0xc>)
 80065fa:	4903      	ldr	r1, [pc, #12]	; (8006608 <stdio_exit_handler+0x10>)
 80065fc:	4803      	ldr	r0, [pc, #12]	; (800660c <stdio_exit_handler+0x14>)
 80065fe:	f000 b869 	b.w	80066d4 <_fwalk_sglue>
 8006602:	bf00      	nop
 8006604:	20000018 	.word	0x20000018
 8006608:	08007401 	.word	0x08007401
 800660c:	20000024 	.word	0x20000024

08006610 <cleanup_stdio>:
 8006610:	6841      	ldr	r1, [r0, #4]
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <cleanup_stdio+0x34>)
 8006614:	4299      	cmp	r1, r3
 8006616:	b510      	push	{r4, lr}
 8006618:	4604      	mov	r4, r0
 800661a:	d001      	beq.n	8006620 <cleanup_stdio+0x10>
 800661c:	f000 fef0 	bl	8007400 <_fflush_r>
 8006620:	68a1      	ldr	r1, [r4, #8]
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <cleanup_stdio+0x38>)
 8006624:	4299      	cmp	r1, r3
 8006626:	d002      	beq.n	800662e <cleanup_stdio+0x1e>
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fee9 	bl	8007400 <_fflush_r>
 800662e:	68e1      	ldr	r1, [r4, #12]
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <cleanup_stdio+0x3c>)
 8006632:	4299      	cmp	r1, r3
 8006634:	d004      	beq.n	8006640 <cleanup_stdio+0x30>
 8006636:	4620      	mov	r0, r4
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f000 bee0 	b.w	8007400 <_fflush_r>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	20001b18 	.word	0x20001b18
 8006648:	20001b80 	.word	0x20001b80
 800664c:	20001be8 	.word	0x20001be8

08006650 <global_stdio_init.part.0>:
 8006650:	b510      	push	{r4, lr}
 8006652:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <global_stdio_init.part.0+0x30>)
 8006654:	4c0b      	ldr	r4, [pc, #44]	; (8006684 <global_stdio_init.part.0+0x34>)
 8006656:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <global_stdio_init.part.0+0x38>)
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	4620      	mov	r0, r4
 800665c:	2200      	movs	r2, #0
 800665e:	2104      	movs	r1, #4
 8006660:	f7ff ff94 	bl	800658c <std>
 8006664:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006668:	2201      	movs	r2, #1
 800666a:	2109      	movs	r1, #9
 800666c:	f7ff ff8e 	bl	800658c <std>
 8006670:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006674:	2202      	movs	r2, #2
 8006676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667a:	2112      	movs	r1, #18
 800667c:	f7ff bf86 	b.w	800658c <std>
 8006680:	20001c50 	.word	0x20001c50
 8006684:	20001b18 	.word	0x20001b18
 8006688:	080065f9 	.word	0x080065f9

0800668c <__sfp_lock_acquire>:
 800668c:	4801      	ldr	r0, [pc, #4]	; (8006694 <__sfp_lock_acquire+0x8>)
 800668e:	f000 ba54 	b.w	8006b3a <__retarget_lock_acquire_recursive>
 8006692:	bf00      	nop
 8006694:	20001c59 	.word	0x20001c59

08006698 <__sfp_lock_release>:
 8006698:	4801      	ldr	r0, [pc, #4]	; (80066a0 <__sfp_lock_release+0x8>)
 800669a:	f000 ba4f 	b.w	8006b3c <__retarget_lock_release_recursive>
 800669e:	bf00      	nop
 80066a0:	20001c59 	.word	0x20001c59

080066a4 <__sinit>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	4604      	mov	r4, r0
 80066a8:	f7ff fff0 	bl	800668c <__sfp_lock_acquire>
 80066ac:	6a23      	ldr	r3, [r4, #32]
 80066ae:	b11b      	cbz	r3, 80066b8 <__sinit+0x14>
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b4:	f7ff bff0 	b.w	8006698 <__sfp_lock_release>
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <__sinit+0x28>)
 80066ba:	6223      	str	r3, [r4, #32]
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <__sinit+0x2c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f5      	bne.n	80066b0 <__sinit+0xc>
 80066c4:	f7ff ffc4 	bl	8006650 <global_stdio_init.part.0>
 80066c8:	e7f2      	b.n	80066b0 <__sinit+0xc>
 80066ca:	bf00      	nop
 80066cc:	08006611 	.word	0x08006611
 80066d0:	20001c50 	.word	0x20001c50

080066d4 <_fwalk_sglue>:
 80066d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	4607      	mov	r7, r0
 80066da:	4688      	mov	r8, r1
 80066dc:	4614      	mov	r4, r2
 80066de:	2600      	movs	r6, #0
 80066e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066e4:	f1b9 0901 	subs.w	r9, r9, #1
 80066e8:	d505      	bpl.n	80066f6 <_fwalk_sglue+0x22>
 80066ea:	6824      	ldr	r4, [r4, #0]
 80066ec:	2c00      	cmp	r4, #0
 80066ee:	d1f7      	bne.n	80066e0 <_fwalk_sglue+0xc>
 80066f0:	4630      	mov	r0, r6
 80066f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d907      	bls.n	800670c <_fwalk_sglue+0x38>
 80066fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006700:	3301      	adds	r3, #1
 8006702:	d003      	beq.n	800670c <_fwalk_sglue+0x38>
 8006704:	4629      	mov	r1, r5
 8006706:	4638      	mov	r0, r7
 8006708:	47c0      	blx	r8
 800670a:	4306      	orrs	r6, r0
 800670c:	3568      	adds	r5, #104	; 0x68
 800670e:	e7e9      	b.n	80066e4 <_fwalk_sglue+0x10>

08006710 <iprintf>:
 8006710:	b40f      	push	{r0, r1, r2, r3}
 8006712:	b507      	push	{r0, r1, r2, lr}
 8006714:	4906      	ldr	r1, [pc, #24]	; (8006730 <iprintf+0x20>)
 8006716:	ab04      	add	r3, sp, #16
 8006718:	6808      	ldr	r0, [r1, #0]
 800671a:	f853 2b04 	ldr.w	r2, [r3], #4
 800671e:	6881      	ldr	r1, [r0, #8]
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	f000 fb3d 	bl	8006da0 <_vfiprintf_r>
 8006726:	b003      	add	sp, #12
 8006728:	f85d eb04 	ldr.w	lr, [sp], #4
 800672c:	b004      	add	sp, #16
 800672e:	4770      	bx	lr
 8006730:	20000070 	.word	0x20000070

08006734 <_puts_r>:
 8006734:	6a03      	ldr	r3, [r0, #32]
 8006736:	b570      	push	{r4, r5, r6, lr}
 8006738:	6884      	ldr	r4, [r0, #8]
 800673a:	4605      	mov	r5, r0
 800673c:	460e      	mov	r6, r1
 800673e:	b90b      	cbnz	r3, 8006744 <_puts_r+0x10>
 8006740:	f7ff ffb0 	bl	80066a4 <__sinit>
 8006744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006746:	07db      	lsls	r3, r3, #31
 8006748:	d405      	bmi.n	8006756 <_puts_r+0x22>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	0598      	lsls	r0, r3, #22
 800674e:	d402      	bmi.n	8006756 <_puts_r+0x22>
 8006750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006752:	f000 f9f2 	bl	8006b3a <__retarget_lock_acquire_recursive>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	0719      	lsls	r1, r3, #28
 800675a:	d513      	bpl.n	8006784 <_puts_r+0x50>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	b18b      	cbz	r3, 8006784 <_puts_r+0x50>
 8006760:	3e01      	subs	r6, #1
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006768:	3b01      	subs	r3, #1
 800676a:	60a3      	str	r3, [r4, #8]
 800676c:	b9e9      	cbnz	r1, 80067aa <_puts_r+0x76>
 800676e:	2b00      	cmp	r3, #0
 8006770:	da2e      	bge.n	80067d0 <_puts_r+0x9c>
 8006772:	4622      	mov	r2, r4
 8006774:	210a      	movs	r1, #10
 8006776:	4628      	mov	r0, r5
 8006778:	f000 f87b 	bl	8006872 <__swbuf_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d007      	beq.n	8006790 <_puts_r+0x5c>
 8006780:	250a      	movs	r5, #10
 8006782:	e007      	b.n	8006794 <_puts_r+0x60>
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f8b0 	bl	80068ec <__swsetup_r>
 800678c:	2800      	cmp	r0, #0
 800678e:	d0e7      	beq.n	8006760 <_puts_r+0x2c>
 8006790:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006796:	07da      	lsls	r2, r3, #31
 8006798:	d405      	bmi.n	80067a6 <_puts_r+0x72>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	059b      	lsls	r3, r3, #22
 800679e:	d402      	bmi.n	80067a6 <_puts_r+0x72>
 80067a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a2:	f000 f9cb 	bl	8006b3c <__retarget_lock_release_recursive>
 80067a6:	4628      	mov	r0, r5
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da04      	bge.n	80067b8 <_puts_r+0x84>
 80067ae:	69a2      	ldr	r2, [r4, #24]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	dc06      	bgt.n	80067c2 <_puts_r+0x8e>
 80067b4:	290a      	cmp	r1, #10
 80067b6:	d004      	beq.n	80067c2 <_puts_r+0x8e>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	6022      	str	r2, [r4, #0]
 80067be:	7019      	strb	r1, [r3, #0]
 80067c0:	e7cf      	b.n	8006762 <_puts_r+0x2e>
 80067c2:	4622      	mov	r2, r4
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 f854 	bl	8006872 <__swbuf_r>
 80067ca:	3001      	adds	r0, #1
 80067cc:	d1c9      	bne.n	8006762 <_puts_r+0x2e>
 80067ce:	e7df      	b.n	8006790 <_puts_r+0x5c>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	250a      	movs	r5, #10
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	6022      	str	r2, [r4, #0]
 80067d8:	701d      	strb	r5, [r3, #0]
 80067da:	e7db      	b.n	8006794 <_puts_r+0x60>

080067dc <puts>:
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <puts+0xc>)
 80067de:	4601      	mov	r1, r0
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	f7ff bfa7 	b.w	8006734 <_puts_r>
 80067e6:	bf00      	nop
 80067e8:	20000070 	.word	0x20000070

080067ec <__sread>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	460c      	mov	r4, r1
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	f000 f952 	bl	8006a9c <_read_r>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	bfab      	itete	ge
 80067fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006800:	181b      	addge	r3, r3, r0
 8006802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006806:	bfac      	ite	ge
 8006808:	6563      	strge	r3, [r4, #84]	; 0x54
 800680a:	81a3      	strhlt	r3, [r4, #12]
 800680c:	bd10      	pop	{r4, pc}

0800680e <__swrite>:
 800680e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	461f      	mov	r7, r3
 8006814:	898b      	ldrh	r3, [r1, #12]
 8006816:	05db      	lsls	r3, r3, #23
 8006818:	4605      	mov	r5, r0
 800681a:	460c      	mov	r4, r1
 800681c:	4616      	mov	r6, r2
 800681e:	d505      	bpl.n	800682c <__swrite+0x1e>
 8006820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006824:	2302      	movs	r3, #2
 8006826:	2200      	movs	r2, #0
 8006828:	f000 f926 	bl	8006a78 <_lseek_r>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	4632      	mov	r2, r6
 800683a:	463b      	mov	r3, r7
 800683c:	4628      	mov	r0, r5
 800683e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006842:	f000 b93d 	b.w	8006ac0 <_write_r>

08006846 <__sseek>:
 8006846:	b510      	push	{r4, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684e:	f000 f913 	bl	8006a78 <_lseek_r>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	bf15      	itete	ne
 8006858:	6560      	strne	r0, [r4, #84]	; 0x54
 800685a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800685e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006862:	81a3      	strheq	r3, [r4, #12]
 8006864:	bf18      	it	ne
 8006866:	81a3      	strhne	r3, [r4, #12]
 8006868:	bd10      	pop	{r4, pc}

0800686a <__sclose>:
 800686a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686e:	f000 b89d 	b.w	80069ac <_close_r>

08006872 <__swbuf_r>:
 8006872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006874:	460e      	mov	r6, r1
 8006876:	4614      	mov	r4, r2
 8006878:	4605      	mov	r5, r0
 800687a:	b118      	cbz	r0, 8006884 <__swbuf_r+0x12>
 800687c:	6a03      	ldr	r3, [r0, #32]
 800687e:	b90b      	cbnz	r3, 8006884 <__swbuf_r+0x12>
 8006880:	f7ff ff10 	bl	80066a4 <__sinit>
 8006884:	69a3      	ldr	r3, [r4, #24]
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	071a      	lsls	r2, r3, #28
 800688c:	d525      	bpl.n	80068da <__swbuf_r+0x68>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	b31b      	cbz	r3, 80068da <__swbuf_r+0x68>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	6922      	ldr	r2, [r4, #16]
 8006896:	1a98      	subs	r0, r3, r2
 8006898:	6963      	ldr	r3, [r4, #20]
 800689a:	b2f6      	uxtb	r6, r6
 800689c:	4283      	cmp	r3, r0
 800689e:	4637      	mov	r7, r6
 80068a0:	dc04      	bgt.n	80068ac <__swbuf_r+0x3a>
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 fdab 	bl	8007400 <_fflush_r>
 80068aa:	b9e0      	cbnz	r0, 80068e6 <__swbuf_r+0x74>
 80068ac:	68a3      	ldr	r3, [r4, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	60a3      	str	r3, [r4, #8]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	6022      	str	r2, [r4, #0]
 80068b8:	701e      	strb	r6, [r3, #0]
 80068ba:	6962      	ldr	r2, [r4, #20]
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	429a      	cmp	r2, r3
 80068c0:	d004      	beq.n	80068cc <__swbuf_r+0x5a>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	07db      	lsls	r3, r3, #31
 80068c6:	d506      	bpl.n	80068d6 <__swbuf_r+0x64>
 80068c8:	2e0a      	cmp	r6, #10
 80068ca:	d104      	bne.n	80068d6 <__swbuf_r+0x64>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 fd96 	bl	8007400 <_fflush_r>
 80068d4:	b938      	cbnz	r0, 80068e6 <__swbuf_r+0x74>
 80068d6:	4638      	mov	r0, r7
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 f805 	bl	80068ec <__swsetup_r>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d0d5      	beq.n	8006892 <__swbuf_r+0x20>
 80068e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068ea:	e7f4      	b.n	80068d6 <__swbuf_r+0x64>

080068ec <__swsetup_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <__swsetup_r+0xac>)
 80068f0:	4605      	mov	r5, r0
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	460c      	mov	r4, r1
 80068f6:	b118      	cbz	r0, 8006900 <__swsetup_r+0x14>
 80068f8:	6a03      	ldr	r3, [r0, #32]
 80068fa:	b90b      	cbnz	r3, 8006900 <__swsetup_r+0x14>
 80068fc:	f7ff fed2 	bl	80066a4 <__sinit>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006906:	0718      	lsls	r0, r3, #28
 8006908:	d422      	bmi.n	8006950 <__swsetup_r+0x64>
 800690a:	06d9      	lsls	r1, r3, #27
 800690c:	d407      	bmi.n	800691e <__swsetup_r+0x32>
 800690e:	2309      	movs	r3, #9
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800691c:	e034      	b.n	8006988 <__swsetup_r+0x9c>
 800691e:	0758      	lsls	r0, r3, #29
 8006920:	d512      	bpl.n	8006948 <__swsetup_r+0x5c>
 8006922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006924:	b141      	cbz	r1, 8006938 <__swsetup_r+0x4c>
 8006926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800692a:	4299      	cmp	r1, r3
 800692c:	d002      	beq.n	8006934 <__swsetup_r+0x48>
 800692e:	4628      	mov	r0, r5
 8006930:	f000 f914 	bl	8006b5c <_free_r>
 8006934:	2300      	movs	r3, #0
 8006936:	6363      	str	r3, [r4, #52]	; 0x34
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	2300      	movs	r3, #0
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f043 0308 	orr.w	r3, r3, #8
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	b94b      	cbnz	r3, 8006968 <__swsetup_r+0x7c>
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800695a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695e:	d003      	beq.n	8006968 <__swsetup_r+0x7c>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fd9a 	bl	800749c <__smakebuf_r>
 8006968:	89a0      	ldrh	r0, [r4, #12]
 800696a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800696e:	f010 0301 	ands.w	r3, r0, #1
 8006972:	d00a      	beq.n	800698a <__swsetup_r+0x9e>
 8006974:	2300      	movs	r3, #0
 8006976:	60a3      	str	r3, [r4, #8]
 8006978:	6963      	ldr	r3, [r4, #20]
 800697a:	425b      	negs	r3, r3
 800697c:	61a3      	str	r3, [r4, #24]
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	b943      	cbnz	r3, 8006994 <__swsetup_r+0xa8>
 8006982:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006986:	d1c4      	bne.n	8006912 <__swsetup_r+0x26>
 8006988:	bd38      	pop	{r3, r4, r5, pc}
 800698a:	0781      	lsls	r1, r0, #30
 800698c:	bf58      	it	pl
 800698e:	6963      	ldrpl	r3, [r4, #20]
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	e7f4      	b.n	800697e <__swsetup_r+0x92>
 8006994:	2000      	movs	r0, #0
 8006996:	e7f7      	b.n	8006988 <__swsetup_r+0x9c>
 8006998:	20000070 	.word	0x20000070

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <_close_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4d06      	ldr	r5, [pc, #24]	; (80069c8 <_close_r+0x1c>)
 80069b0:	2300      	movs	r3, #0
 80069b2:	4604      	mov	r4, r0
 80069b4:	4608      	mov	r0, r1
 80069b6:	602b      	str	r3, [r5, #0]
 80069b8:	f7fa f8b6 	bl	8000b28 <_close>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_close_r+0x1a>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_close_r+0x1a>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	20001c54 	.word	0x20001c54

080069cc <_reclaim_reent>:
 80069cc:	4b29      	ldr	r3, [pc, #164]	; (8006a74 <_reclaim_reent+0xa8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4283      	cmp	r3, r0
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	4604      	mov	r4, r0
 80069d6:	d04b      	beq.n	8006a70 <_reclaim_reent+0xa4>
 80069d8:	69c3      	ldr	r3, [r0, #28]
 80069da:	b143      	cbz	r3, 80069ee <_reclaim_reent+0x22>
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d144      	bne.n	8006a6c <_reclaim_reent+0xa0>
 80069e2:	69e3      	ldr	r3, [r4, #28]
 80069e4:	6819      	ldr	r1, [r3, #0]
 80069e6:	b111      	cbz	r1, 80069ee <_reclaim_reent+0x22>
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 f8b7 	bl	8006b5c <_free_r>
 80069ee:	6961      	ldr	r1, [r4, #20]
 80069f0:	b111      	cbz	r1, 80069f8 <_reclaim_reent+0x2c>
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f8b2 	bl	8006b5c <_free_r>
 80069f8:	69e1      	ldr	r1, [r4, #28]
 80069fa:	b111      	cbz	r1, 8006a02 <_reclaim_reent+0x36>
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 f8ad 	bl	8006b5c <_free_r>
 8006a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a04:	b111      	cbz	r1, 8006a0c <_reclaim_reent+0x40>
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 f8a8 	bl	8006b5c <_free_r>
 8006a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a0e:	b111      	cbz	r1, 8006a16 <_reclaim_reent+0x4a>
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f8a3 	bl	8006b5c <_free_r>
 8006a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a18:	b111      	cbz	r1, 8006a20 <_reclaim_reent+0x54>
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 f89e 	bl	8006b5c <_free_r>
 8006a20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a22:	b111      	cbz	r1, 8006a2a <_reclaim_reent+0x5e>
 8006a24:	4620      	mov	r0, r4
 8006a26:	f000 f899 	bl	8006b5c <_free_r>
 8006a2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a2c:	b111      	cbz	r1, 8006a34 <_reclaim_reent+0x68>
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 f894 	bl	8006b5c <_free_r>
 8006a34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a36:	b111      	cbz	r1, 8006a3e <_reclaim_reent+0x72>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 f88f 	bl	8006b5c <_free_r>
 8006a3e:	6a23      	ldr	r3, [r4, #32]
 8006a40:	b1b3      	cbz	r3, 8006a70 <_reclaim_reent+0xa4>
 8006a42:	4620      	mov	r0, r4
 8006a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a48:	4718      	bx	r3
 8006a4a:	5949      	ldr	r1, [r1, r5]
 8006a4c:	b941      	cbnz	r1, 8006a60 <_reclaim_reent+0x94>
 8006a4e:	3504      	adds	r5, #4
 8006a50:	69e3      	ldr	r3, [r4, #28]
 8006a52:	2d80      	cmp	r5, #128	; 0x80
 8006a54:	68d9      	ldr	r1, [r3, #12]
 8006a56:	d1f8      	bne.n	8006a4a <_reclaim_reent+0x7e>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 f87f 	bl	8006b5c <_free_r>
 8006a5e:	e7c0      	b.n	80069e2 <_reclaim_reent+0x16>
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 f87a 	bl	8006b5c <_free_r>
 8006a68:	4631      	mov	r1, r6
 8006a6a:	e7ef      	b.n	8006a4c <_reclaim_reent+0x80>
 8006a6c:	2500      	movs	r5, #0
 8006a6e:	e7ef      	b.n	8006a50 <_reclaim_reent+0x84>
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	bf00      	nop
 8006a74:	20000070 	.word	0x20000070

08006a78 <_lseek_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	; (8006a98 <_lseek_r+0x20>)
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fa f875 	bl	8000b76 <_lseek>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_lseek_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_lseek_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20001c54 	.word	0x20001c54

08006a9c <_read_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4d07      	ldr	r5, [pc, #28]	; (8006abc <_read_r+0x20>)
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f7fa f808 	bl	8000ac0 <_read>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_read_r+0x1e>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_read_r+0x1e>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	20001c54 	.word	0x20001c54

08006ac0 <_write_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d07      	ldr	r5, [pc, #28]	; (8006ae0 <_write_r+0x20>)
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	4611      	mov	r1, r2
 8006aca:	2200      	movs	r2, #0
 8006acc:	602a      	str	r2, [r5, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7fa f814 	bl	8000afc <_write>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_write_r+0x1e>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_write_r+0x1e>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	20001c54 	.word	0x20001c54

08006ae4 <__errno>:
 8006ae4:	4b01      	ldr	r3, [pc, #4]	; (8006aec <__errno+0x8>)
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20000070 	.word	0x20000070

08006af0 <__libc_init_array>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	4d0d      	ldr	r5, [pc, #52]	; (8006b28 <__libc_init_array+0x38>)
 8006af4:	4c0d      	ldr	r4, [pc, #52]	; (8006b2c <__libc_init_array+0x3c>)
 8006af6:	1b64      	subs	r4, r4, r5
 8006af8:	10a4      	asrs	r4, r4, #2
 8006afa:	2600      	movs	r6, #0
 8006afc:	42a6      	cmp	r6, r4
 8006afe:	d109      	bne.n	8006b14 <__libc_init_array+0x24>
 8006b00:	4d0b      	ldr	r5, [pc, #44]	; (8006b30 <__libc_init_array+0x40>)
 8006b02:	4c0c      	ldr	r4, [pc, #48]	; (8006b34 <__libc_init_array+0x44>)
 8006b04:	f000 fd38 	bl	8007578 <_init>
 8006b08:	1b64      	subs	r4, r4, r5
 8006b0a:	10a4      	asrs	r4, r4, #2
 8006b0c:	2600      	movs	r6, #0
 8006b0e:	42a6      	cmp	r6, r4
 8006b10:	d105      	bne.n	8006b1e <__libc_init_array+0x2e>
 8006b12:	bd70      	pop	{r4, r5, r6, pc}
 8006b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b18:	4798      	blx	r3
 8006b1a:	3601      	adds	r6, #1
 8006b1c:	e7ee      	b.n	8006afc <__libc_init_array+0xc>
 8006b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b22:	4798      	blx	r3
 8006b24:	3601      	adds	r6, #1
 8006b26:	e7f2      	b.n	8006b0e <__libc_init_array+0x1e>
 8006b28:	08007750 	.word	0x08007750
 8006b2c:	08007750 	.word	0x08007750
 8006b30:	08007750 	.word	0x08007750
 8006b34:	08007754 	.word	0x08007754

08006b38 <__retarget_lock_init_recursive>:
 8006b38:	4770      	bx	lr

08006b3a <__retarget_lock_acquire_recursive>:
 8006b3a:	4770      	bx	lr

08006b3c <__retarget_lock_release_recursive>:
 8006b3c:	4770      	bx	lr

08006b3e <memcpy>:
 8006b3e:	440a      	add	r2, r1
 8006b40:	4291      	cmp	r1, r2
 8006b42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b46:	d100      	bne.n	8006b4a <memcpy+0xc>
 8006b48:	4770      	bx	lr
 8006b4a:	b510      	push	{r4, lr}
 8006b4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b54:	4291      	cmp	r1, r2
 8006b56:	d1f9      	bne.n	8006b4c <memcpy+0xe>
 8006b58:	bd10      	pop	{r4, pc}
	...

08006b5c <_free_r>:
 8006b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	d044      	beq.n	8006bec <_free_r+0x90>
 8006b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b66:	9001      	str	r0, [sp, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b6e:	bfb8      	it	lt
 8006b70:	18e4      	addlt	r4, r4, r3
 8006b72:	f000 f8df 	bl	8006d34 <__malloc_lock>
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <_free_r+0x94>)
 8006b78:	9801      	ldr	r0, [sp, #4]
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	b933      	cbnz	r3, 8006b8c <_free_r+0x30>
 8006b7e:	6063      	str	r3, [r4, #4]
 8006b80:	6014      	str	r4, [r2, #0]
 8006b82:	b003      	add	sp, #12
 8006b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b88:	f000 b8da 	b.w	8006d40 <__malloc_unlock>
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d908      	bls.n	8006ba2 <_free_r+0x46>
 8006b90:	6825      	ldr	r5, [r4, #0]
 8006b92:	1961      	adds	r1, r4, r5
 8006b94:	428b      	cmp	r3, r1
 8006b96:	bf01      	itttt	eq
 8006b98:	6819      	ldreq	r1, [r3, #0]
 8006b9a:	685b      	ldreq	r3, [r3, #4]
 8006b9c:	1949      	addeq	r1, r1, r5
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	e7ed      	b.n	8006b7e <_free_r+0x22>
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b10b      	cbz	r3, 8006bac <_free_r+0x50>
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d9fa      	bls.n	8006ba2 <_free_r+0x46>
 8006bac:	6811      	ldr	r1, [r2, #0]
 8006bae:	1855      	adds	r5, r2, r1
 8006bb0:	42a5      	cmp	r5, r4
 8006bb2:	d10b      	bne.n	8006bcc <_free_r+0x70>
 8006bb4:	6824      	ldr	r4, [r4, #0]
 8006bb6:	4421      	add	r1, r4
 8006bb8:	1854      	adds	r4, r2, r1
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	d1e0      	bne.n	8006b82 <_free_r+0x26>
 8006bc0:	681c      	ldr	r4, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	6053      	str	r3, [r2, #4]
 8006bc6:	440c      	add	r4, r1
 8006bc8:	6014      	str	r4, [r2, #0]
 8006bca:	e7da      	b.n	8006b82 <_free_r+0x26>
 8006bcc:	d902      	bls.n	8006bd4 <_free_r+0x78>
 8006bce:	230c      	movs	r3, #12
 8006bd0:	6003      	str	r3, [r0, #0]
 8006bd2:	e7d6      	b.n	8006b82 <_free_r+0x26>
 8006bd4:	6825      	ldr	r5, [r4, #0]
 8006bd6:	1961      	adds	r1, r4, r5
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	bf04      	itt	eq
 8006bdc:	6819      	ldreq	r1, [r3, #0]
 8006bde:	685b      	ldreq	r3, [r3, #4]
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	bf04      	itt	eq
 8006be4:	1949      	addeq	r1, r1, r5
 8006be6:	6021      	streq	r1, [r4, #0]
 8006be8:	6054      	str	r4, [r2, #4]
 8006bea:	e7ca      	b.n	8006b82 <_free_r+0x26>
 8006bec:	b003      	add	sp, #12
 8006bee:	bd30      	pop	{r4, r5, pc}
 8006bf0:	20001c5c 	.word	0x20001c5c

08006bf4 <sbrk_aligned>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4e0e      	ldr	r6, [pc, #56]	; (8006c30 <sbrk_aligned+0x3c>)
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	6831      	ldr	r1, [r6, #0]
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	b911      	cbnz	r1, 8006c06 <sbrk_aligned+0x12>
 8006c00:	f000 fcaa 	bl	8007558 <_sbrk_r>
 8006c04:	6030      	str	r0, [r6, #0]
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 fca5 	bl	8007558 <_sbrk_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d00a      	beq.n	8006c28 <sbrk_aligned+0x34>
 8006c12:	1cc4      	adds	r4, r0, #3
 8006c14:	f024 0403 	bic.w	r4, r4, #3
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d007      	beq.n	8006c2c <sbrk_aligned+0x38>
 8006c1c:	1a21      	subs	r1, r4, r0
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fc9a 	bl	8007558 <_sbrk_r>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d101      	bne.n	8006c2c <sbrk_aligned+0x38>
 8006c28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	20001c60 	.word	0x20001c60

08006c34 <_malloc_r>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	1ccd      	adds	r5, r1, #3
 8006c3a:	f025 0503 	bic.w	r5, r5, #3
 8006c3e:	3508      	adds	r5, #8
 8006c40:	2d0c      	cmp	r5, #12
 8006c42:	bf38      	it	cc
 8006c44:	250c      	movcc	r5, #12
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	4607      	mov	r7, r0
 8006c4a:	db01      	blt.n	8006c50 <_malloc_r+0x1c>
 8006c4c:	42a9      	cmp	r1, r5
 8006c4e:	d905      	bls.n	8006c5c <_malloc_r+0x28>
 8006c50:	230c      	movs	r3, #12
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	2600      	movs	r6, #0
 8006c56:	4630      	mov	r0, r6
 8006c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d30 <_malloc_r+0xfc>
 8006c60:	f000 f868 	bl	8006d34 <__malloc_lock>
 8006c64:	f8d8 3000 	ldr.w	r3, [r8]
 8006c68:	461c      	mov	r4, r3
 8006c6a:	bb5c      	cbnz	r4, 8006cc4 <_malloc_r+0x90>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f7ff ffc0 	bl	8006bf4 <sbrk_aligned>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	4604      	mov	r4, r0
 8006c78:	d155      	bne.n	8006d26 <_malloc_r+0xf2>
 8006c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c7e:	4626      	mov	r6, r4
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	d145      	bne.n	8006d10 <_malloc_r+0xdc>
 8006c84:	2c00      	cmp	r4, #0
 8006c86:	d048      	beq.n	8006d1a <_malloc_r+0xe6>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	eb04 0903 	add.w	r9, r4, r3
 8006c92:	f000 fc61 	bl	8007558 <_sbrk_r>
 8006c96:	4581      	cmp	r9, r0
 8006c98:	d13f      	bne.n	8006d1a <_malloc_r+0xe6>
 8006c9a:	6821      	ldr	r1, [r4, #0]
 8006c9c:	1a6d      	subs	r5, r5, r1
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff ffa7 	bl	8006bf4 <sbrk_aligned>
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d037      	beq.n	8006d1a <_malloc_r+0xe6>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	442b      	add	r3, r5
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d038      	beq.n	8006d2a <_malloc_r+0xf6>
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	42a2      	cmp	r2, r4
 8006cbc:	d12b      	bne.n	8006d16 <_malloc_r+0xe2>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	e00f      	b.n	8006ce4 <_malloc_r+0xb0>
 8006cc4:	6822      	ldr	r2, [r4, #0]
 8006cc6:	1b52      	subs	r2, r2, r5
 8006cc8:	d41f      	bmi.n	8006d0a <_malloc_r+0xd6>
 8006cca:	2a0b      	cmp	r2, #11
 8006ccc:	d917      	bls.n	8006cfe <_malloc_r+0xca>
 8006cce:	1961      	adds	r1, r4, r5
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	6025      	str	r5, [r4, #0]
 8006cd4:	bf18      	it	ne
 8006cd6:	6059      	strne	r1, [r3, #4]
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	bf08      	it	eq
 8006cdc:	f8c8 1000 	streq.w	r1, [r8]
 8006ce0:	5162      	str	r2, [r4, r5]
 8006ce2:	604b      	str	r3, [r1, #4]
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f104 060b 	add.w	r6, r4, #11
 8006cea:	f000 f829 	bl	8006d40 <__malloc_unlock>
 8006cee:	f026 0607 	bic.w	r6, r6, #7
 8006cf2:	1d23      	adds	r3, r4, #4
 8006cf4:	1af2      	subs	r2, r6, r3
 8006cf6:	d0ae      	beq.n	8006c56 <_malloc_r+0x22>
 8006cf8:	1b9b      	subs	r3, r3, r6
 8006cfa:	50a3      	str	r3, [r4, r2]
 8006cfc:	e7ab      	b.n	8006c56 <_malloc_r+0x22>
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	d1dd      	bne.n	8006cc0 <_malloc_r+0x8c>
 8006d04:	f8c8 2000 	str.w	r2, [r8]
 8006d08:	e7ec      	b.n	8006ce4 <_malloc_r+0xb0>
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	6864      	ldr	r4, [r4, #4]
 8006d0e:	e7ac      	b.n	8006c6a <_malloc_r+0x36>
 8006d10:	4634      	mov	r4, r6
 8006d12:	6876      	ldr	r6, [r6, #4]
 8006d14:	e7b4      	b.n	8006c80 <_malloc_r+0x4c>
 8006d16:	4613      	mov	r3, r2
 8006d18:	e7cc      	b.n	8006cb4 <_malloc_r+0x80>
 8006d1a:	230c      	movs	r3, #12
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f000 f80e 	bl	8006d40 <__malloc_unlock>
 8006d24:	e797      	b.n	8006c56 <_malloc_r+0x22>
 8006d26:	6025      	str	r5, [r4, #0]
 8006d28:	e7dc      	b.n	8006ce4 <_malloc_r+0xb0>
 8006d2a:	605b      	str	r3, [r3, #4]
 8006d2c:	deff      	udf	#255	; 0xff
 8006d2e:	bf00      	nop
 8006d30:	20001c5c 	.word	0x20001c5c

08006d34 <__malloc_lock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__malloc_lock+0x8>)
 8006d36:	f7ff bf00 	b.w	8006b3a <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20001c58 	.word	0x20001c58

08006d40 <__malloc_unlock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__malloc_unlock+0x8>)
 8006d42:	f7ff befb 	b.w	8006b3c <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	20001c58 	.word	0x20001c58

08006d4c <__sfputc_r>:
 8006d4c:	6893      	ldr	r3, [r2, #8]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	b410      	push	{r4}
 8006d54:	6093      	str	r3, [r2, #8]
 8006d56:	da08      	bge.n	8006d6a <__sfputc_r+0x1e>
 8006d58:	6994      	ldr	r4, [r2, #24]
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	db01      	blt.n	8006d62 <__sfputc_r+0x16>
 8006d5e:	290a      	cmp	r1, #10
 8006d60:	d103      	bne.n	8006d6a <__sfputc_r+0x1e>
 8006d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d66:	f7ff bd84 	b.w	8006872 <__swbuf_r>
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	1c58      	adds	r0, r3, #1
 8006d6e:	6010      	str	r0, [r2, #0]
 8006d70:	7019      	strb	r1, [r3, #0]
 8006d72:	4608      	mov	r0, r1
 8006d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <__sfputs_r>:
 8006d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	460f      	mov	r7, r1
 8006d80:	4614      	mov	r4, r2
 8006d82:	18d5      	adds	r5, r2, r3
 8006d84:	42ac      	cmp	r4, r5
 8006d86:	d101      	bne.n	8006d8c <__sfputs_r+0x12>
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e007      	b.n	8006d9c <__sfputs_r+0x22>
 8006d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d90:	463a      	mov	r2, r7
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff ffda 	bl	8006d4c <__sfputc_r>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d1f3      	bne.n	8006d84 <__sfputs_r+0xa>
 8006d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006da0 <_vfiprintf_r>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	460d      	mov	r5, r1
 8006da6:	b09d      	sub	sp, #116	; 0x74
 8006da8:	4614      	mov	r4, r2
 8006daa:	4698      	mov	r8, r3
 8006dac:	4606      	mov	r6, r0
 8006dae:	b118      	cbz	r0, 8006db8 <_vfiprintf_r+0x18>
 8006db0:	6a03      	ldr	r3, [r0, #32]
 8006db2:	b90b      	cbnz	r3, 8006db8 <_vfiprintf_r+0x18>
 8006db4:	f7ff fc76 	bl	80066a4 <__sinit>
 8006db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dba:	07d9      	lsls	r1, r3, #31
 8006dbc:	d405      	bmi.n	8006dca <_vfiprintf_r+0x2a>
 8006dbe:	89ab      	ldrh	r3, [r5, #12]
 8006dc0:	059a      	lsls	r2, r3, #22
 8006dc2:	d402      	bmi.n	8006dca <_vfiprintf_r+0x2a>
 8006dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc6:	f7ff feb8 	bl	8006b3a <__retarget_lock_acquire_recursive>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	071b      	lsls	r3, r3, #28
 8006dce:	d501      	bpl.n	8006dd4 <_vfiprintf_r+0x34>
 8006dd0:	692b      	ldr	r3, [r5, #16]
 8006dd2:	b99b      	cbnz	r3, 8006dfc <_vfiprintf_r+0x5c>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff fd88 	bl	80068ec <__swsetup_r>
 8006ddc:	b170      	cbz	r0, 8006dfc <_vfiprintf_r+0x5c>
 8006dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006de0:	07dc      	lsls	r4, r3, #31
 8006de2:	d504      	bpl.n	8006dee <_vfiprintf_r+0x4e>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de8:	b01d      	add	sp, #116	; 0x74
 8006dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	0598      	lsls	r0, r3, #22
 8006df2:	d4f7      	bmi.n	8006de4 <_vfiprintf_r+0x44>
 8006df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df6:	f7ff fea1 	bl	8006b3c <__retarget_lock_release_recursive>
 8006dfa:	e7f3      	b.n	8006de4 <_vfiprintf_r+0x44>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006e00:	2320      	movs	r3, #32
 8006e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e0a:	2330      	movs	r3, #48	; 0x30
 8006e0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006fc0 <_vfiprintf_r+0x220>
 8006e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e14:	f04f 0901 	mov.w	r9, #1
 8006e18:	4623      	mov	r3, r4
 8006e1a:	469a      	mov	sl, r3
 8006e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e20:	b10a      	cbz	r2, 8006e26 <_vfiprintf_r+0x86>
 8006e22:	2a25      	cmp	r2, #37	; 0x25
 8006e24:	d1f9      	bne.n	8006e1a <_vfiprintf_r+0x7a>
 8006e26:	ebba 0b04 	subs.w	fp, sl, r4
 8006e2a:	d00b      	beq.n	8006e44 <_vfiprintf_r+0xa4>
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	4630      	mov	r0, r6
 8006e34:	f7ff ffa1 	bl	8006d7a <__sfputs_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f000 80a9 	beq.w	8006f90 <_vfiprintf_r+0x1f0>
 8006e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e40:	445a      	add	r2, fp
 8006e42:	9209      	str	r2, [sp, #36]	; 0x24
 8006e44:	f89a 3000 	ldrb.w	r3, [sl]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80a1 	beq.w	8006f90 <_vfiprintf_r+0x1f0>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e58:	f10a 0a01 	add.w	sl, sl, #1
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	9307      	str	r3, [sp, #28]
 8006e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e64:	931a      	str	r3, [sp, #104]	; 0x68
 8006e66:	4654      	mov	r4, sl
 8006e68:	2205      	movs	r2, #5
 8006e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6e:	4854      	ldr	r0, [pc, #336]	; (8006fc0 <_vfiprintf_r+0x220>)
 8006e70:	f7f9 f9be 	bl	80001f0 <memchr>
 8006e74:	9a04      	ldr	r2, [sp, #16]
 8006e76:	b9d8      	cbnz	r0, 8006eb0 <_vfiprintf_r+0x110>
 8006e78:	06d1      	lsls	r1, r2, #27
 8006e7a:	bf44      	itt	mi
 8006e7c:	2320      	movmi	r3, #32
 8006e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e82:	0713      	lsls	r3, r2, #28
 8006e84:	bf44      	itt	mi
 8006e86:	232b      	movmi	r3, #43	; 0x2b
 8006e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e90:	2b2a      	cmp	r3, #42	; 0x2a
 8006e92:	d015      	beq.n	8006ec0 <_vfiprintf_r+0x120>
 8006e94:	9a07      	ldr	r2, [sp, #28]
 8006e96:	4654      	mov	r4, sl
 8006e98:	2000      	movs	r0, #0
 8006e9a:	f04f 0c0a 	mov.w	ip, #10
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea4:	3b30      	subs	r3, #48	; 0x30
 8006ea6:	2b09      	cmp	r3, #9
 8006ea8:	d94d      	bls.n	8006f46 <_vfiprintf_r+0x1a6>
 8006eaa:	b1b0      	cbz	r0, 8006eda <_vfiprintf_r+0x13a>
 8006eac:	9207      	str	r2, [sp, #28]
 8006eae:	e014      	b.n	8006eda <_vfiprintf_r+0x13a>
 8006eb0:	eba0 0308 	sub.w	r3, r0, r8
 8006eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	46a2      	mov	sl, r4
 8006ebe:	e7d2      	b.n	8006e66 <_vfiprintf_r+0xc6>
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	1d19      	adds	r1, r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	9103      	str	r1, [sp, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfbb      	ittet	lt
 8006ecc:	425b      	neglt	r3, r3
 8006ece:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed2:	9307      	strge	r3, [sp, #28]
 8006ed4:	9307      	strlt	r3, [sp, #28]
 8006ed6:	bfb8      	it	lt
 8006ed8:	9204      	strlt	r2, [sp, #16]
 8006eda:	7823      	ldrb	r3, [r4, #0]
 8006edc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ede:	d10c      	bne.n	8006efa <_vfiprintf_r+0x15a>
 8006ee0:	7863      	ldrb	r3, [r4, #1]
 8006ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee4:	d134      	bne.n	8006f50 <_vfiprintf_r+0x1b0>
 8006ee6:	9b03      	ldr	r3, [sp, #12]
 8006ee8:	1d1a      	adds	r2, r3, #4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	9203      	str	r2, [sp, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bfb8      	it	lt
 8006ef2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ef6:	3402      	adds	r4, #2
 8006ef8:	9305      	str	r3, [sp, #20]
 8006efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006fd0 <_vfiprintf_r+0x230>
 8006efe:	7821      	ldrb	r1, [r4, #0]
 8006f00:	2203      	movs	r2, #3
 8006f02:	4650      	mov	r0, sl
 8006f04:	f7f9 f974 	bl	80001f0 <memchr>
 8006f08:	b138      	cbz	r0, 8006f1a <_vfiprintf_r+0x17a>
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	eba0 000a 	sub.w	r0, r0, sl
 8006f10:	2240      	movs	r2, #64	; 0x40
 8006f12:	4082      	lsls	r2, r0
 8006f14:	4313      	orrs	r3, r2
 8006f16:	3401      	adds	r4, #1
 8006f18:	9304      	str	r3, [sp, #16]
 8006f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1e:	4829      	ldr	r0, [pc, #164]	; (8006fc4 <_vfiprintf_r+0x224>)
 8006f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f24:	2206      	movs	r2, #6
 8006f26:	f7f9 f963 	bl	80001f0 <memchr>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d03f      	beq.n	8006fae <_vfiprintf_r+0x20e>
 8006f2e:	4b26      	ldr	r3, [pc, #152]	; (8006fc8 <_vfiprintf_r+0x228>)
 8006f30:	bb1b      	cbnz	r3, 8006f7a <_vfiprintf_r+0x1da>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	3307      	adds	r3, #7
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	9303      	str	r3, [sp, #12]
 8006f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f40:	443b      	add	r3, r7
 8006f42:	9309      	str	r3, [sp, #36]	; 0x24
 8006f44:	e768      	b.n	8006e18 <_vfiprintf_r+0x78>
 8006f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	e7a6      	b.n	8006e9e <_vfiprintf_r+0xfe>
 8006f50:	2300      	movs	r3, #0
 8006f52:	3401      	adds	r4, #1
 8006f54:	9305      	str	r3, [sp, #20]
 8006f56:	4619      	mov	r1, r3
 8006f58:	f04f 0c0a 	mov.w	ip, #10
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f62:	3a30      	subs	r2, #48	; 0x30
 8006f64:	2a09      	cmp	r2, #9
 8006f66:	d903      	bls.n	8006f70 <_vfiprintf_r+0x1d0>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0c6      	beq.n	8006efa <_vfiprintf_r+0x15a>
 8006f6c:	9105      	str	r1, [sp, #20]
 8006f6e:	e7c4      	b.n	8006efa <_vfiprintf_r+0x15a>
 8006f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f74:	4604      	mov	r4, r0
 8006f76:	2301      	movs	r3, #1
 8006f78:	e7f0      	b.n	8006f5c <_vfiprintf_r+0x1bc>
 8006f7a:	ab03      	add	r3, sp, #12
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	462a      	mov	r2, r5
 8006f80:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <_vfiprintf_r+0x22c>)
 8006f82:	a904      	add	r1, sp, #16
 8006f84:	4630      	mov	r0, r6
 8006f86:	f3af 8000 	nop.w
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	1c78      	adds	r0, r7, #1
 8006f8e:	d1d6      	bne.n	8006f3e <_vfiprintf_r+0x19e>
 8006f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f92:	07d9      	lsls	r1, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_vfiprintf_r+0x202>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	059a      	lsls	r2, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_vfiprintf_r+0x202>
 8006f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f9e:	f7ff fdcd 	bl	8006b3c <__retarget_lock_release_recursive>
 8006fa2:	89ab      	ldrh	r3, [r5, #12]
 8006fa4:	065b      	lsls	r3, r3, #25
 8006fa6:	f53f af1d 	bmi.w	8006de4 <_vfiprintf_r+0x44>
 8006faa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fac:	e71c      	b.n	8006de8 <_vfiprintf_r+0x48>
 8006fae:	ab03      	add	r3, sp, #12
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <_vfiprintf_r+0x22c>)
 8006fb6:	a904      	add	r1, sp, #16
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f000 f879 	bl	80070b0 <_printf_i>
 8006fbe:	e7e4      	b.n	8006f8a <_vfiprintf_r+0x1ea>
 8006fc0:	08007714 	.word	0x08007714
 8006fc4:	0800771e 	.word	0x0800771e
 8006fc8:	00000000 	.word	0x00000000
 8006fcc:	08006d7b 	.word	0x08006d7b
 8006fd0:	0800771a 	.word	0x0800771a

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4699      	mov	r9, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfb8      	it	lt
 8006fe8:	4613      	movlt	r3, r2
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc26      	bgt.n	800706a <_printf_common+0x96>
 800701c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d42b      	bmi.n	8007084 <_printf_common+0xb0>
 800702c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007030:	4649      	mov	r1, r9
 8007032:	4638      	mov	r0, r7
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d01e      	beq.n	8007078 <_printf_common+0xa4>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	f003 0306 	and.w	r3, r3, #6
 8007042:	2b04      	cmp	r3, #4
 8007044:	bf02      	ittt	eq
 8007046:	68e5      	ldreq	r5, [r4, #12]
 8007048:	6833      	ldreq	r3, [r6, #0]
 800704a:	1aed      	subeq	r5, r5, r3
 800704c:	68a3      	ldr	r3, [r4, #8]
 800704e:	bf0c      	ite	eq
 8007050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007054:	2500      	movne	r5, #0
 8007056:	4293      	cmp	r3, r2
 8007058:	bfc4      	itt	gt
 800705a:	1a9b      	subgt	r3, r3, r2
 800705c:	18ed      	addgt	r5, r5, r3
 800705e:	2600      	movs	r6, #0
 8007060:	341a      	adds	r4, #26
 8007062:	42b5      	cmp	r5, r6
 8007064:	d11a      	bne.n	800709c <_printf_common+0xc8>
 8007066:	2000      	movs	r0, #0
 8007068:	e008      	b.n	800707c <_printf_common+0xa8>
 800706a:	2301      	movs	r3, #1
 800706c:	4652      	mov	r2, sl
 800706e:	4649      	mov	r1, r9
 8007070:	4638      	mov	r0, r7
 8007072:	47c0      	blx	r8
 8007074:	3001      	adds	r0, #1
 8007076:	d103      	bne.n	8007080 <_printf_common+0xac>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	3501      	adds	r5, #1
 8007082:	e7c6      	b.n	8007012 <_printf_common+0x3e>
 8007084:	18e1      	adds	r1, r4, r3
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	2030      	movs	r0, #48	; 0x30
 800708a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708e:	4422      	add	r2, r4
 8007090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007098:	3302      	adds	r3, #2
 800709a:	e7c7      	b.n	800702c <_printf_common+0x58>
 800709c:	2301      	movs	r3, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	4649      	mov	r1, r9
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0e6      	beq.n	8007078 <_printf_common+0xa4>
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7d9      	b.n	8007062 <_printf_common+0x8e>
	...

080070b0 <_printf_i>:
 80070b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	7e0f      	ldrb	r7, [r1, #24]
 80070b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070b8:	2f78      	cmp	r7, #120	; 0x78
 80070ba:	4691      	mov	r9, r2
 80070bc:	4680      	mov	r8, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	469a      	mov	sl, r3
 80070c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070c6:	d807      	bhi.n	80070d8 <_printf_i+0x28>
 80070c8:	2f62      	cmp	r7, #98	; 0x62
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x32>
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	f000 80d4 	beq.w	800727a <_printf_i+0x1ca>
 80070d2:	2f58      	cmp	r7, #88	; 0x58
 80070d4:	f000 80c0 	beq.w	8007258 <_printf_i+0x1a8>
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070e0:	e03a      	b.n	8007158 <_printf_i+0xa8>
 80070e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e6:	2b15      	cmp	r3, #21
 80070e8:	d8f6      	bhi.n	80070d8 <_printf_i+0x28>
 80070ea:	a101      	add	r1, pc, #4	; (adr r1, 80070f0 <_printf_i+0x40>)
 80070ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f0:	08007149 	.word	0x08007149
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	080070d9 	.word	0x080070d9
 80070fc:	080070d9 	.word	0x080070d9
 8007100:	080070d9 	.word	0x080070d9
 8007104:	080070d9 	.word	0x080070d9
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080070d9 	.word	0x080070d9
 8007110:	080070d9 	.word	0x080070d9
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	08007261 	.word	0x08007261
 8007120:	08007189 	.word	0x08007189
 8007124:	0800721b 	.word	0x0800721b
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	08007283 	.word	0x08007283
 8007134:	080070d9 	.word	0x080070d9
 8007138:	08007189 	.word	0x08007189
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	08007223 	.word	0x08007223
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	602a      	str	r2, [r5, #0]
 8007150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007158:	2301      	movs	r3, #1
 800715a:	e09f      	b.n	800729c <_printf_i+0x1ec>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	0607      	lsls	r7, r0, #24
 8007162:	f103 0104 	add.w	r1, r3, #4
 8007166:	6029      	str	r1, [r5, #0]
 8007168:	d501      	bpl.n	800716e <_printf_i+0xbe>
 800716a:	681e      	ldr	r6, [r3, #0]
 800716c:	e003      	b.n	8007176 <_printf_i+0xc6>
 800716e:	0646      	lsls	r6, r0, #25
 8007170:	d5fb      	bpl.n	800716a <_printf_i+0xba>
 8007172:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007176:	2e00      	cmp	r6, #0
 8007178:	da03      	bge.n	8007182 <_printf_i+0xd2>
 800717a:	232d      	movs	r3, #45	; 0x2d
 800717c:	4276      	negs	r6, r6
 800717e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007182:	485a      	ldr	r0, [pc, #360]	; (80072ec <_printf_i+0x23c>)
 8007184:	230a      	movs	r3, #10
 8007186:	e012      	b.n	80071ae <_printf_i+0xfe>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	6820      	ldr	r0, [r4, #0]
 800718c:	1d19      	adds	r1, r3, #4
 800718e:	6029      	str	r1, [r5, #0]
 8007190:	0605      	lsls	r5, r0, #24
 8007192:	d501      	bpl.n	8007198 <_printf_i+0xe8>
 8007194:	681e      	ldr	r6, [r3, #0]
 8007196:	e002      	b.n	800719e <_printf_i+0xee>
 8007198:	0641      	lsls	r1, r0, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0xe4>
 800719c:	881e      	ldrh	r6, [r3, #0]
 800719e:	4853      	ldr	r0, [pc, #332]	; (80072ec <_printf_i+0x23c>)
 80071a0:	2f6f      	cmp	r7, #111	; 0x6f
 80071a2:	bf0c      	ite	eq
 80071a4:	2308      	moveq	r3, #8
 80071a6:	230a      	movne	r3, #10
 80071a8:	2100      	movs	r1, #0
 80071aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ae:	6865      	ldr	r5, [r4, #4]
 80071b0:	60a5      	str	r5, [r4, #8]
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	bfa2      	ittt	ge
 80071b6:	6821      	ldrge	r1, [r4, #0]
 80071b8:	f021 0104 	bicge.w	r1, r1, #4
 80071bc:	6021      	strge	r1, [r4, #0]
 80071be:	b90e      	cbnz	r6, 80071c4 <_printf_i+0x114>
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	d04b      	beq.n	800725c <_printf_i+0x1ac>
 80071c4:	4615      	mov	r5, r2
 80071c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071ca:	fb03 6711 	mls	r7, r3, r1, r6
 80071ce:	5dc7      	ldrb	r7, [r0, r7]
 80071d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071d4:	4637      	mov	r7, r6
 80071d6:	42bb      	cmp	r3, r7
 80071d8:	460e      	mov	r6, r1
 80071da:	d9f4      	bls.n	80071c6 <_printf_i+0x116>
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d10b      	bne.n	80071f8 <_printf_i+0x148>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	07de      	lsls	r6, r3, #31
 80071e4:	d508      	bpl.n	80071f8 <_printf_i+0x148>
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	6861      	ldr	r1, [r4, #4]
 80071ea:	4299      	cmp	r1, r3
 80071ec:	bfde      	ittt	le
 80071ee:	2330      	movle	r3, #48	; 0x30
 80071f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80071f8:	1b52      	subs	r2, r2, r5
 80071fa:	6122      	str	r2, [r4, #16]
 80071fc:	f8cd a000 	str.w	sl, [sp]
 8007200:	464b      	mov	r3, r9
 8007202:	aa03      	add	r2, sp, #12
 8007204:	4621      	mov	r1, r4
 8007206:	4640      	mov	r0, r8
 8007208:	f7ff fee4 	bl	8006fd4 <_printf_common>
 800720c:	3001      	adds	r0, #1
 800720e:	d14a      	bne.n	80072a6 <_printf_i+0x1f6>
 8007210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007214:	b004      	add	sp, #16
 8007216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	f043 0320 	orr.w	r3, r3, #32
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	4833      	ldr	r0, [pc, #204]	; (80072f0 <_printf_i+0x240>)
 8007224:	2778      	movs	r7, #120	; 0x78
 8007226:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	6829      	ldr	r1, [r5, #0]
 800722e:	061f      	lsls	r7, r3, #24
 8007230:	f851 6b04 	ldr.w	r6, [r1], #4
 8007234:	d402      	bmi.n	800723c <_printf_i+0x18c>
 8007236:	065f      	lsls	r7, r3, #25
 8007238:	bf48      	it	mi
 800723a:	b2b6      	uxthmi	r6, r6
 800723c:	07df      	lsls	r7, r3, #31
 800723e:	bf48      	it	mi
 8007240:	f043 0320 	orrmi.w	r3, r3, #32
 8007244:	6029      	str	r1, [r5, #0]
 8007246:	bf48      	it	mi
 8007248:	6023      	strmi	r3, [r4, #0]
 800724a:	b91e      	cbnz	r6, 8007254 <_printf_i+0x1a4>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	f023 0320 	bic.w	r3, r3, #32
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	2310      	movs	r3, #16
 8007256:	e7a7      	b.n	80071a8 <_printf_i+0xf8>
 8007258:	4824      	ldr	r0, [pc, #144]	; (80072ec <_printf_i+0x23c>)
 800725a:	e7e4      	b.n	8007226 <_printf_i+0x176>
 800725c:	4615      	mov	r5, r2
 800725e:	e7bd      	b.n	80071dc <_printf_i+0x12c>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	6826      	ldr	r6, [r4, #0]
 8007264:	6961      	ldr	r1, [r4, #20]
 8007266:	1d18      	adds	r0, r3, #4
 8007268:	6028      	str	r0, [r5, #0]
 800726a:	0635      	lsls	r5, r6, #24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	d501      	bpl.n	8007274 <_printf_i+0x1c4>
 8007270:	6019      	str	r1, [r3, #0]
 8007272:	e002      	b.n	800727a <_printf_i+0x1ca>
 8007274:	0670      	lsls	r0, r6, #25
 8007276:	d5fb      	bpl.n	8007270 <_printf_i+0x1c0>
 8007278:	8019      	strh	r1, [r3, #0]
 800727a:	2300      	movs	r3, #0
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	4615      	mov	r5, r2
 8007280:	e7bc      	b.n	80071fc <_printf_i+0x14c>
 8007282:	682b      	ldr	r3, [r5, #0]
 8007284:	1d1a      	adds	r2, r3, #4
 8007286:	602a      	str	r2, [r5, #0]
 8007288:	681d      	ldr	r5, [r3, #0]
 800728a:	6862      	ldr	r2, [r4, #4]
 800728c:	2100      	movs	r1, #0
 800728e:	4628      	mov	r0, r5
 8007290:	f7f8 ffae 	bl	80001f0 <memchr>
 8007294:	b108      	cbz	r0, 800729a <_printf_i+0x1ea>
 8007296:	1b40      	subs	r0, r0, r5
 8007298:	6060      	str	r0, [r4, #4]
 800729a:	6863      	ldr	r3, [r4, #4]
 800729c:	6123      	str	r3, [r4, #16]
 800729e:	2300      	movs	r3, #0
 80072a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a4:	e7aa      	b.n	80071fc <_printf_i+0x14c>
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	462a      	mov	r2, r5
 80072aa:	4649      	mov	r1, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	47d0      	blx	sl
 80072b0:	3001      	adds	r0, #1
 80072b2:	d0ad      	beq.n	8007210 <_printf_i+0x160>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	079b      	lsls	r3, r3, #30
 80072b8:	d413      	bmi.n	80072e2 <_printf_i+0x232>
 80072ba:	68e0      	ldr	r0, [r4, #12]
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	4298      	cmp	r0, r3
 80072c0:	bfb8      	it	lt
 80072c2:	4618      	movlt	r0, r3
 80072c4:	e7a6      	b.n	8007214 <_printf_i+0x164>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4632      	mov	r2, r6
 80072ca:	4649      	mov	r1, r9
 80072cc:	4640      	mov	r0, r8
 80072ce:	47d0      	blx	sl
 80072d0:	3001      	adds	r0, #1
 80072d2:	d09d      	beq.n	8007210 <_printf_i+0x160>
 80072d4:	3501      	adds	r5, #1
 80072d6:	68e3      	ldr	r3, [r4, #12]
 80072d8:	9903      	ldr	r1, [sp, #12]
 80072da:	1a5b      	subs	r3, r3, r1
 80072dc:	42ab      	cmp	r3, r5
 80072de:	dcf2      	bgt.n	80072c6 <_printf_i+0x216>
 80072e0:	e7eb      	b.n	80072ba <_printf_i+0x20a>
 80072e2:	2500      	movs	r5, #0
 80072e4:	f104 0619 	add.w	r6, r4, #25
 80072e8:	e7f5      	b.n	80072d6 <_printf_i+0x226>
 80072ea:	bf00      	nop
 80072ec:	08007725 	.word	0x08007725
 80072f0:	08007736 	.word	0x08007736

080072f4 <__sflush_r>:
 80072f4:	898a      	ldrh	r2, [r1, #12]
 80072f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	4605      	mov	r5, r0
 80072fc:	0710      	lsls	r0, r2, #28
 80072fe:	460c      	mov	r4, r1
 8007300:	d458      	bmi.n	80073b4 <__sflush_r+0xc0>
 8007302:	684b      	ldr	r3, [r1, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dc05      	bgt.n	8007314 <__sflush_r+0x20>
 8007308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	dc02      	bgt.n	8007314 <__sflush_r+0x20>
 800730e:	2000      	movs	r0, #0
 8007310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007316:	2e00      	cmp	r6, #0
 8007318:	d0f9      	beq.n	800730e <__sflush_r+0x1a>
 800731a:	2300      	movs	r3, #0
 800731c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007320:	682f      	ldr	r7, [r5, #0]
 8007322:	6a21      	ldr	r1, [r4, #32]
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	d032      	beq.n	800738e <__sflush_r+0x9a>
 8007328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	075a      	lsls	r2, r3, #29
 800732e:	d505      	bpl.n	800733c <__sflush_r+0x48>
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	1ac0      	subs	r0, r0, r3
 8007334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007336:	b10b      	cbz	r3, 800733c <__sflush_r+0x48>
 8007338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800733a:	1ac0      	subs	r0, r0, r3
 800733c:	2300      	movs	r3, #0
 800733e:	4602      	mov	r2, r0
 8007340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007342:	6a21      	ldr	r1, [r4, #32]
 8007344:	4628      	mov	r0, r5
 8007346:	47b0      	blx	r6
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	d106      	bne.n	800735c <__sflush_r+0x68>
 800734e:	6829      	ldr	r1, [r5, #0]
 8007350:	291d      	cmp	r1, #29
 8007352:	d82b      	bhi.n	80073ac <__sflush_r+0xb8>
 8007354:	4a29      	ldr	r2, [pc, #164]	; (80073fc <__sflush_r+0x108>)
 8007356:	410a      	asrs	r2, r1
 8007358:	07d6      	lsls	r6, r2, #31
 800735a:	d427      	bmi.n	80073ac <__sflush_r+0xb8>
 800735c:	2200      	movs	r2, #0
 800735e:	6062      	str	r2, [r4, #4]
 8007360:	04d9      	lsls	r1, r3, #19
 8007362:	6922      	ldr	r2, [r4, #16]
 8007364:	6022      	str	r2, [r4, #0]
 8007366:	d504      	bpl.n	8007372 <__sflush_r+0x7e>
 8007368:	1c42      	adds	r2, r0, #1
 800736a:	d101      	bne.n	8007370 <__sflush_r+0x7c>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b903      	cbnz	r3, 8007372 <__sflush_r+0x7e>
 8007370:	6560      	str	r0, [r4, #84]	; 0x54
 8007372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007374:	602f      	str	r7, [r5, #0]
 8007376:	2900      	cmp	r1, #0
 8007378:	d0c9      	beq.n	800730e <__sflush_r+0x1a>
 800737a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800737e:	4299      	cmp	r1, r3
 8007380:	d002      	beq.n	8007388 <__sflush_r+0x94>
 8007382:	4628      	mov	r0, r5
 8007384:	f7ff fbea 	bl	8006b5c <_free_r>
 8007388:	2000      	movs	r0, #0
 800738a:	6360      	str	r0, [r4, #52]	; 0x34
 800738c:	e7c0      	b.n	8007310 <__sflush_r+0x1c>
 800738e:	2301      	movs	r3, #1
 8007390:	4628      	mov	r0, r5
 8007392:	47b0      	blx	r6
 8007394:	1c41      	adds	r1, r0, #1
 8007396:	d1c8      	bne.n	800732a <__sflush_r+0x36>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0c5      	beq.n	800732a <__sflush_r+0x36>
 800739e:	2b1d      	cmp	r3, #29
 80073a0:	d001      	beq.n	80073a6 <__sflush_r+0xb2>
 80073a2:	2b16      	cmp	r3, #22
 80073a4:	d101      	bne.n	80073aa <__sflush_r+0xb6>
 80073a6:	602f      	str	r7, [r5, #0]
 80073a8:	e7b1      	b.n	800730e <__sflush_r+0x1a>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e7ad      	b.n	8007310 <__sflush_r+0x1c>
 80073b4:	690f      	ldr	r7, [r1, #16]
 80073b6:	2f00      	cmp	r7, #0
 80073b8:	d0a9      	beq.n	800730e <__sflush_r+0x1a>
 80073ba:	0793      	lsls	r3, r2, #30
 80073bc:	680e      	ldr	r6, [r1, #0]
 80073be:	bf08      	it	eq
 80073c0:	694b      	ldreq	r3, [r1, #20]
 80073c2:	600f      	str	r7, [r1, #0]
 80073c4:	bf18      	it	ne
 80073c6:	2300      	movne	r3, #0
 80073c8:	eba6 0807 	sub.w	r8, r6, r7
 80073cc:	608b      	str	r3, [r1, #8]
 80073ce:	f1b8 0f00 	cmp.w	r8, #0
 80073d2:	dd9c      	ble.n	800730e <__sflush_r+0x1a>
 80073d4:	6a21      	ldr	r1, [r4, #32]
 80073d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073d8:	4643      	mov	r3, r8
 80073da:	463a      	mov	r2, r7
 80073dc:	4628      	mov	r0, r5
 80073de:	47b0      	blx	r6
 80073e0:	2800      	cmp	r0, #0
 80073e2:	dc06      	bgt.n	80073f2 <__sflush_r+0xfe>
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f0:	e78e      	b.n	8007310 <__sflush_r+0x1c>
 80073f2:	4407      	add	r7, r0
 80073f4:	eba8 0800 	sub.w	r8, r8, r0
 80073f8:	e7e9      	b.n	80073ce <__sflush_r+0xda>
 80073fa:	bf00      	nop
 80073fc:	dfbffffe 	.word	0xdfbffffe

08007400 <_fflush_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	4605      	mov	r5, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b913      	cbnz	r3, 8007410 <_fflush_r+0x10>
 800740a:	2500      	movs	r5, #0
 800740c:	4628      	mov	r0, r5
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	b118      	cbz	r0, 800741a <_fflush_r+0x1a>
 8007412:	6a03      	ldr	r3, [r0, #32]
 8007414:	b90b      	cbnz	r3, 800741a <_fflush_r+0x1a>
 8007416:	f7ff f945 	bl	80066a4 <__sinit>
 800741a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0f3      	beq.n	800740a <_fflush_r+0xa>
 8007422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007424:	07d0      	lsls	r0, r2, #31
 8007426:	d404      	bmi.n	8007432 <_fflush_r+0x32>
 8007428:	0599      	lsls	r1, r3, #22
 800742a:	d402      	bmi.n	8007432 <_fflush_r+0x32>
 800742c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742e:	f7ff fb84 	bl	8006b3a <__retarget_lock_acquire_recursive>
 8007432:	4628      	mov	r0, r5
 8007434:	4621      	mov	r1, r4
 8007436:	f7ff ff5d 	bl	80072f4 <__sflush_r>
 800743a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800743c:	07da      	lsls	r2, r3, #31
 800743e:	4605      	mov	r5, r0
 8007440:	d4e4      	bmi.n	800740c <_fflush_r+0xc>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	059b      	lsls	r3, r3, #22
 8007446:	d4e1      	bmi.n	800740c <_fflush_r+0xc>
 8007448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800744a:	f7ff fb77 	bl	8006b3c <__retarget_lock_release_recursive>
 800744e:	e7dd      	b.n	800740c <_fflush_r+0xc>

08007450 <__swhatbuf_r>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	460c      	mov	r4, r1
 8007454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007458:	2900      	cmp	r1, #0
 800745a:	b096      	sub	sp, #88	; 0x58
 800745c:	4615      	mov	r5, r2
 800745e:	461e      	mov	r6, r3
 8007460:	da0d      	bge.n	800747e <__swhatbuf_r+0x2e>
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007468:	f04f 0100 	mov.w	r1, #0
 800746c:	bf0c      	ite	eq
 800746e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007472:	2340      	movne	r3, #64	; 0x40
 8007474:	2000      	movs	r0, #0
 8007476:	6031      	str	r1, [r6, #0]
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	b016      	add	sp, #88	; 0x58
 800747c:	bd70      	pop	{r4, r5, r6, pc}
 800747e:	466a      	mov	r2, sp
 8007480:	f000 f848 	bl	8007514 <_fstat_r>
 8007484:	2800      	cmp	r0, #0
 8007486:	dbec      	blt.n	8007462 <__swhatbuf_r+0x12>
 8007488:	9901      	ldr	r1, [sp, #4]
 800748a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800748e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007492:	4259      	negs	r1, r3
 8007494:	4159      	adcs	r1, r3
 8007496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800749a:	e7eb      	b.n	8007474 <__swhatbuf_r+0x24>

0800749c <__smakebuf_r>:
 800749c:	898b      	ldrh	r3, [r1, #12]
 800749e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074a0:	079d      	lsls	r5, r3, #30
 80074a2:	4606      	mov	r6, r0
 80074a4:	460c      	mov	r4, r1
 80074a6:	d507      	bpl.n	80074b8 <__smakebuf_r+0x1c>
 80074a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	2301      	movs	r3, #1
 80074b2:	6163      	str	r3, [r4, #20]
 80074b4:	b002      	add	sp, #8
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	ab01      	add	r3, sp, #4
 80074ba:	466a      	mov	r2, sp
 80074bc:	f7ff ffc8 	bl	8007450 <__swhatbuf_r>
 80074c0:	9900      	ldr	r1, [sp, #0]
 80074c2:	4605      	mov	r5, r0
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7ff fbb5 	bl	8006c34 <_malloc_r>
 80074ca:	b948      	cbnz	r0, 80074e0 <__smakebuf_r+0x44>
 80074cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d0:	059a      	lsls	r2, r3, #22
 80074d2:	d4ef      	bmi.n	80074b4 <__smakebuf_r+0x18>
 80074d4:	f023 0303 	bic.w	r3, r3, #3
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	e7e3      	b.n	80074a8 <__smakebuf_r+0xc>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	6020      	str	r0, [r4, #0]
 80074e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	9b00      	ldr	r3, [sp, #0]
 80074ec:	6163      	str	r3, [r4, #20]
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	6120      	str	r0, [r4, #16]
 80074f2:	b15b      	cbz	r3, 800750c <__smakebuf_r+0x70>
 80074f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f8:	4630      	mov	r0, r6
 80074fa:	f000 f81d 	bl	8007538 <_isatty_r>
 80074fe:	b128      	cbz	r0, 800750c <__smakebuf_r+0x70>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f023 0303 	bic.w	r3, r3, #3
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	431d      	orrs	r5, r3
 8007510:	81a5      	strh	r5, [r4, #12]
 8007512:	e7cf      	b.n	80074b4 <__smakebuf_r+0x18>

08007514 <_fstat_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_fstat_r+0x20>)
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	f7f9 fb0d 	bl	8000b40 <_fstat>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d102      	bne.n	8007530 <_fstat_r+0x1c>
 800752a:	682b      	ldr	r3, [r5, #0]
 800752c:	b103      	cbz	r3, 8007530 <_fstat_r+0x1c>
 800752e:	6023      	str	r3, [r4, #0]
 8007530:	bd38      	pop	{r3, r4, r5, pc}
 8007532:	bf00      	nop
 8007534:	20001c54 	.word	0x20001c54

08007538 <_isatty_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d06      	ldr	r5, [pc, #24]	; (8007554 <_isatty_r+0x1c>)
 800753c:	2300      	movs	r3, #0
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7f9 fb0c 	bl	8000b60 <_isatty>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_isatty_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_isatty_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20001c54 	.word	0x20001c54

08007558 <_sbrk_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d06      	ldr	r5, [pc, #24]	; (8007574 <_sbrk_r+0x1c>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	f7f9 fb14 	bl	8000b90 <_sbrk>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_sbrk_r+0x1a>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_sbrk_r+0x1a>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	20001c54 	.word	0x20001c54

08007578 <_init>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr

08007584 <_fini>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	bf00      	nop
 8007588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758a:	bc08      	pop	{r3}
 800758c:	469e      	mov	lr, r3
 800758e:	4770      	bx	lr
