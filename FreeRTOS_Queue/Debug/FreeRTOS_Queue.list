
FreeRTOS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007684  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800795c  0800795c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800795c  0800795c  0001795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007964  08007964  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007964  08007964  00017964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800796c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  2000006c  080079d8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc8  080079d8  00021bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a9ea  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003838  00000000  00000000  0003aac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  0003e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001211  00000000  00000000  0003fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ca5  00000000  00000000  00040c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001913e  00000000  00000000  00045906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ef5e  00000000  00000000  0005ea44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069d4  00000000  00000000  0016d9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00174378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800781c 	.word	0x0800781c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800781c 	.word	0x0800781c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fb59 	bl	8000c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f832 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8b0 	bl	80006fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800059c:	f000 f882 	bl	80006a4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f003 fa62 	bl	8003a68 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue_1 */
  Queue_1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue_1_attributes);
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <main+0x50>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	2008      	movs	r0, #8
 80005aa:	f003 fb54 	bl	8003c56 <osMessageQueueNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <main+0x54>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender_Task */
  Sender_TaskHandle = osThreadNew(Start_Sender_Task, NULL, &Sender_Task_attributes);
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <main+0x58>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <main+0x5c>)
 80005ba:	f003 fa9f 	bl	8003afc <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <main+0x60>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of Receiver_Task */
  Receiver_TaskHandle = osThreadNew(Start_Receiver_Task, NULL, &Receiver_Task_attributes);
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <main+0x64>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <main+0x68>)
 80005ca:	f003 fa97 	bl	8003afc <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <main+0x6c>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f003 fa6c 	bl	8003ab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x4c>
 80005da:	bf00      	nop
 80005dc:	080078c8 	.word	0x080078c8
 80005e0:	20000118 	.word	0x20000118
 80005e4:	08007880 	.word	0x08007880
 80005e8:	08000795 	.word	0x08000795
 80005ec:	20000110 	.word	0x20000110
 80005f0:	080078a4 	.word	0x080078a4
 80005f4:	080007dd 	.word	0x080007dd
 80005f8:	20000114 	.word	0x20000114

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f006 fb6e 	bl	8006cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f000 fde3 	bl	80011ec <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 f90a 	bl	8000844 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000630:	2310      	movs	r3, #16
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800063c:	2360      	movs	r3, #96	; 0x60
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800064c:	2347      	movs	r3, #71	; 0x47
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000658:	2306      	movs	r3, #6
 800065a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fe29 	bl	80012b8 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800066c:	f000 f8ea 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fa2e 	bl	8001aec <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 f8d5 	bl	8000844 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3758      	adds	r7, #88	; 0x58
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_LPUART1_UART_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006e2:	f002 fbd7 	bl	8002e94 <HAL_UART_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f8aa 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000088 	.word	0x20000088
 80006f8:	40008000 	.word	0x40008000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_GPIO_Init+0x90>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <MX_GPIO_Init+0x90>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_GPIO_Init+0x90>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800072a:	f000 fdb5 	bl	8001298 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_GPIO_Init+0x90>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_GPIO_Init+0x90>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_GPIO_Init+0x90>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_GPIO_Init+0x90>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <MX_GPIO_Init+0x90>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_GPIO_Init+0x90>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0x94>)
 8000764:	f000 fd1c 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0x94>)
 8000780:	f000 fb7c 	bl	8000e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <Start_Sender_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Sender_Task */
void Start_Sender_Task(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t x= 9;
 800079c:	2309      	movs	r3, #9
 800079e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	printf("S\r\n");
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <Start_Sender_Task+0x40>)
 80007a2:	f006 f9c3 	bl	8006b2c <puts>
	osMessageQueuePut(Queue_1Handle, &x, 0, 200);
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <Start_Sender_Task+0x44>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	f107 010f 	add.w	r1, r7, #15
 80007ae:	23c8      	movs	r3, #200	; 0xc8
 80007b0:	2200      	movs	r2, #0
 80007b2:	f003 fac3 	bl	8003d3c <osMessageQueuePut>
    x--;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	73fb      	strb	r3, [r7, #15]
    if(x == 0)
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d101      	bne.n	80007c8 <Start_Sender_Task+0x34>
    	x=9;
 80007c4:	2309      	movs	r3, #9
 80007c6:	73fb      	strb	r3, [r7, #15]
    osDelay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f003 fa28 	bl	8003c20 <osDelay>
	printf("S\r\n");
 80007d0:	e7e6      	b.n	80007a0 <Start_Sender_Task+0xc>
 80007d2:	bf00      	nop
 80007d4:	08007858 	.word	0x08007858
 80007d8:	20000118 	.word	0x20000118

080007dc <Start_Receiver_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Receiver_Task */
void Start_Receiver_Task(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Receiver_Task */
	uint8_t res;
  /* Infinite loop */
  for(;;)
  {
	printf("R\r\n");
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <Start_Receiver_Task+0x34>)
 80007e6:	f006 f9a1 	bl	8006b2c <puts>
	r_state = osMessageQueueGet(Queue_1Handle, &res, NULL, 1000);
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <Start_Receiver_Task+0x38>)
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	f107 010f 	add.w	r1, r7, #15
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	2200      	movs	r2, #0
 80007f8:	f003 fb00 	bl	8003dfc <osMessageQueueGet>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <Start_Receiver_Task+0x3c>)
 8000800:	6013      	str	r3, [r2, #0]
    printf("%d\r\n", res);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <Start_Receiver_Task+0x40>)
 8000808:	f006 f92a 	bl	8006a60 <iprintf>
	printf("R\r\n");
 800080c:	e7ea      	b.n	80007e4 <Start_Receiver_Task+0x8>
 800080e:	bf00      	nop
 8000810:	0800785c 	.word	0x0800785c
 8000814:	20000118 	.word	0x20000118
 8000818:	2000011c 	.word	0x2000011c
 800081c:	08007860 	.word	0x08007860

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 fa21 	bl	8000c78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40001000 	.word	0x40001000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_MspInit+0x4c>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	; 0x60
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_MspInit+0x4c>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_MspInit+0x4c>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	; 0x58
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 facb 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0ac      	sub	sp, #176	; 0xb0
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	228c      	movs	r2, #140	; 0x8c
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f006 fa13 	bl	8006cec <memset>
  if(huart->Instance==LPUART1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a22      	ldr	r2, [pc, #136]	; (8000954 <HAL_UART_MspInit+0xb4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d13d      	bne.n	800094c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008d0:	2320      	movs	r3, #32
 80008d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fb5b 	bl	8001f98 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e8:	f7ff ffac 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_UART_MspInit+0xb8>)
 80008ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f0:	4a19      	ldr	r2, [pc, #100]	; (8000958 <HAL_UART_MspInit+0xb8>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_UART_MspInit+0xb8>)
 80008fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_UART_MspInit+0xb8>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	4a13      	ldr	r2, [pc, #76]	; (8000958 <HAL_UART_MspInit+0xb8>)
 800090a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0xb8>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800091c:	f000 fcbc 	bl	8001298 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000920:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800093a:	2308      	movs	r3, #8
 800093c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000940:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_UART_MspInit+0xbc>)
 8000948:	f000 fa98 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	37b0      	adds	r7, #176	; 0xb0
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40008000 	.word	0x40008000
 8000958:	40021000 	.word	0x40021000
 800095c:	48001800 	.word	0x48001800

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800096e:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <HAL_InitTick+0xe0>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a33      	ldr	r2, [pc, #204]	; (8000a40 <HAL_InitTick+0xe0>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <HAL_InitTick+0xe0>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000986:	f107 0210 	add.w	r2, r7, #16
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fa6f 	bl	8001e74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	2b00      	cmp	r3, #0
 800099e:	d103      	bne.n	80009a8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a0:	f001 fa3c 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 80009a4:	6378      	str	r0, [r7, #52]	; 0x34
 80009a6:	e004      	b.n	80009b2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009a8:	f001 fa38 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 80009ac:	4603      	mov	r3, r0
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b4:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <HAL_InitTick+0xe4>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	0c9b      	lsrs	r3, r3, #18
 80009bc:	3b01      	subs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <HAL_InitTick+0xe8>)
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_InitTick+0xec>)
 80009c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <HAL_InitTick+0xe8>)
 80009c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <HAL_InitTick+0xe8>)
 80009d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <HAL_InitTick+0xe8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <HAL_InitTick+0xe8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <HAL_InitTick+0xe8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009e6:	4818      	ldr	r0, [pc, #96]	; (8000a48 <HAL_InitTick+0xe8>)
 80009e8:	f001 ffa0 	bl	800292c <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11b      	bne.n	8000a32 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009fa:	4813      	ldr	r0, [pc, #76]	; (8000a48 <HAL_InitTick+0xe8>)
 80009fc:	f001 fff8 	bl	80029f0 <HAL_TIM_Base_Start_IT>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d111      	bne.n	8000a32 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a0e:	2036      	movs	r0, #54	; 0x36
 8000a10:	f000 fa26 	bl	8000e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d808      	bhi.n	8000a2c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	2036      	movs	r0, #54	; 0x36
 8000a20:	f000 fa02 	bl	8000e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_InitTick+0xf0>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e002      	b.n	8000a32 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3738      	adds	r7, #56	; 0x38
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	20000120 	.word	0x20000120
 8000a4c:	40001000 	.word	0x40001000
 8000a50:	20000004 	.word	0x20000004

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <TIM6_DAC_IRQHandler+0x10>)
 8000a86:	f002 f823 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000120 	.word	0x20000120

08000a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa6:	f3af 8000 	nop.w
 8000aaa:	4601      	mov	r1, r0
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
  }

  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, 1000);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <_write+0x28>)
 8000ae8:	f002 fa22 	bl	8002f30 <HAL_UART_Transmit>
    return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000088 	.word	0x20000088

08000afc <_close>:

int _close(int file)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b24:	605a      	str	r2, [r3, #4]
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_isatty>:

int _isatty(int file)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3c:	2301      	movs	r3, #1
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f006 f8f8 	bl	8006d88 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20050000 	.word	0x20050000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	2000016c 	.word	0x2000016c
 8000bcc:	20001bc8 	.word	0x20001bc8

08000bd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ffea 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f006 f8b7 	bl	8006d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fcb1 	bl	800058c <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c38:	0800796c 	.word	0x0800796c
  ldr r2, =_sbss
 8000c3c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c40:	20001bc8 	.word	0x20001bc8

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>

08000c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8de 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff fe82 	bl	8000960 <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e001      	b.n	8000c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c68:	f7ff fdf2 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000170 	.word	0x20000170

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000170 	.word	0x20000170

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e166      	b.n	800115a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8158 	beq.w	8001154 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d005      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 0201 	and.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d017      	beq.n	8000f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d123      	bne.n	8000fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	6939      	ldr	r1, [r7, #16]
 8000faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0203 	and.w	r2, r3, #3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80b2 	beq.w	8001154 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b61      	ldr	r3, [pc, #388]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	4a60      	ldr	r2, [pc, #384]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffc:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001008:	4a5c      	ldr	r2, [pc, #368]	; (800117c <HAL_GPIO_Init+0x300>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001032:	d02b      	beq.n	800108c <HAL_GPIO_Init+0x210>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d025      	beq.n	8001088 <HAL_GPIO_Init+0x20c>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x308>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d01f      	beq.n	8001084 <HAL_GPIO_Init+0x208>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x30c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d019      	beq.n	8001080 <HAL_GPIO_Init+0x204>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x310>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d013      	beq.n	800107c <HAL_GPIO_Init+0x200>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x314>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1fc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x318>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1f8>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x31c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1f4>
 800106c:	2307      	movs	r3, #7
 800106e:	e00e      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001070:	2308      	movs	r3, #8
 8001072:	e00c      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001074:	2306      	movs	r3, #6
 8001076:	e00a      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001078:	2305      	movs	r3, #5
 800107a:	e008      	b.n	800108e <HAL_GPIO_Init+0x212>
 800107c:	2304      	movs	r3, #4
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001080:	2303      	movs	r3, #3
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001084:	2302      	movs	r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x212>
 800108c:	2300      	movs	r3, #0
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109e:	4937      	ldr	r1, [pc, #220]	; (800117c <HAL_GPIO_Init+0x300>)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_GPIO_Init+0x320>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d0:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_GPIO_Init+0x320>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <HAL_GPIO_Init+0x320>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010fa:	4a28      	ldr	r2, [pc, #160]	; (800119c <HAL_GPIO_Init+0x320>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_GPIO_Init+0x320>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_GPIO_Init+0x320>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_GPIO_Init+0x320>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_GPIO_Init+0x320>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f ae91 	bne.w	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	48000c00 	.word	0x48000c00
 800118c:	48001000 	.word	0x48001000
 8001190:	48001400 	.word	0x48001400
 8001194:	48001800 	.word	0x48001800
 8001198:	48001c00 	.word	0x48001c00
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fa:	d130      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	d038      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2232      	movs	r2, #50	; 0x32
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001230:	e002      	b.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3b01      	subs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001244:	d102      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f2      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001258:	d110      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e00f      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126a:	d007      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40007000 	.word	0x40007000
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83

08001298 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6053      	str	r3, [r2, #4]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f000 bc08 	b.w	8001adc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012cc:	4b96      	ldr	r3, [pc, #600]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d6:	4b94      	ldr	r3, [pc, #592]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80e4 	beq.w	80014b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_RCC_OscConfig+0x4c>
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b0c      	cmp	r3, #12
 80012f8:	f040 808b 	bne.w	8001412 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	f040 8087 	bne.w	8001412 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001304:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_OscConfig+0x64>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e3df      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_RCC_OscConfig+0x7e>
 800132c:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001334:	e005      	b.n	8001342 <HAL_RCC_OscConfig+0x8a>
 8001336:	4b7c      	ldr	r3, [pc, #496]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001342:	4293      	cmp	r3, r2
 8001344:	d223      	bcs.n	800138e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fdc4 	bl	8001ed8 <RCC_SetFlashLatencyFromMSIRange>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e3c0      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800135a:	4b73      	ldr	r3, [pc, #460]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a72      	ldr	r2, [pc, #456]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	496d      	ldr	r1, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001378:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	4968      	ldr	r1, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
 800138c:	e025      	b.n	80013da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138e:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4960      	ldr	r1, [pc, #384]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ac:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	495b      	ldr	r1, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fd84 	bl	8001ed8 <RCC_SetFlashLatencyFromMSIRange>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e380      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013da:	f000 fc87 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b51      	ldr	r3, [pc, #324]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4950      	ldr	r1, [pc, #320]	; (800152c <HAL_RCC_OscConfig+0x274>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_RCC_OscConfig+0x278>)
 80013f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013fa:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff faae 	bl	8000960 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d052      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	e364      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d032      	beq.n	8001480 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800141a:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001426:	f7ff fc3b 	bl	8000ca0 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142e:	f7ff fc37 	bl	8000ca0 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e34d      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a35      	ldr	r2, [pc, #212]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4930      	ldr	r1, [pc, #192]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	492b      	ldr	r1, [pc, #172]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e01a      	b.n	80014b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a28      	ldr	r2, [pc, #160]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148c:	f7ff fc08 	bl	8000ca0 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001494:	f7ff fc04 	bl	8000ca0 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e31a      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1dc>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d073      	beq.n	80015aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_OscConfig+0x21c>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d10e      	bne.n	80014ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d063      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d15f      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e2f7      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x24c>
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e025      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150c:	d114      	bne.n	8001538 <HAL_RCC_OscConfig+0x280>
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a02      	ldr	r2, [pc, #8]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e013      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001528:	40021000 	.word	0x40021000
 800152c:	080078e0 	.word	0x080078e0
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9f      	ldr	r2, [pc, #636]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a9c      	ldr	r2, [pc, #624]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fba2 	bl	8000ca0 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb9e 	bl	8000ca0 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e2b4      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb8e 	bl	8000ca0 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb8a 	bl	8000ca0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e2a0      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x310>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d116      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x328>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e27d      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	4973      	ldr	r1, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	e040      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb49 	bl	8000ca0 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb45 	bl	8000ca0 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e25b      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a5c      	ldr	r2, [pc, #368]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800164c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fb25 	bl	8000ca0 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fb21 	bl	8000ca0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e237      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001692:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fb00 	bl	8000ca0 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fafc 	bl	8000ca0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e212      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fae3 	bl	8000ca0 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fadf 	bl	8000ca0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1f5      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	; 0x58
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001750:	f7ff faa6 	bl	8000ca0 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff faa2 	bl	8000ca0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1b8      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d8>
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178e:	e029      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_OscConfig+0x50c>
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	4b9d      	ldr	r3, [pc, #628]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a9c      	ldr	r2, [pc, #624]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	4b99      	ldr	r3, [pc, #612]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a98      	ldr	r2, [pc, #608]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa58 	bl	8000ca0 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa54 	bl	8000ca0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e168      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	4b8c      	ldr	r3, [pc, #560]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ed      	beq.n	80017f4 <HAL_RCC_OscConfig+0x53c>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fa41 	bl	8000ca0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fa3d 	bl	8000ca0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e151      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b80      	ldr	r3, [pc, #512]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ed      	bne.n	8001822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b7b      	ldr	r3, [pc, #492]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a7a      	ldr	r2, [pc, #488]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d03c      	beq.n	80018de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800186c:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 800186e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001872:	4a72      	ldr	r2, [pc, #456]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fa10 	bl	8000ca0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001884:	f7ff fa0c 	bl	8000ca0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e122      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001896:	4b69      	ldr	r3, [pc, #420]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ef      	beq.n	8001884 <HAL_RCC_OscConfig+0x5cc>
 80018a4:	e01b      	b.n	80018de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a6:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80018a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ac:	4a63      	ldr	r2, [pc, #396]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff f9f3 	bl	8000ca0 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018be:	f7ff f9ef 	bl	8000ca0 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e105      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d0:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80018d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ef      	bne.n	80018be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80f9 	beq.w	8001ada <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	f040 80cf 	bne.w	8001a90 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0203 	and.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	429a      	cmp	r2, r3
 8001904:	d12c      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	3b01      	subs	r3, #1
 8001912:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d123      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d11b      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d113      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d109      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d071      	beq.n	8001a44 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d068      	beq.n	8001a38 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0ac      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001982:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2d      	ldr	r2, [pc, #180]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800198e:	f7ff f987 	bl	8000ca0 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff f983 	bl	8000ca0 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e099      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_RCC_OscConfig+0x788>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019c4:	3a01      	subs	r2, #1
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	4311      	orrs	r1, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019ce:	0212      	lsls	r2, r2, #8
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019d6:	0852      	lsrs	r2, r2, #1
 80019d8:	3a01      	subs	r2, #1
 80019da:	0552      	lsls	r2, r2, #21
 80019dc:	4311      	orrs	r1, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019e2:	0852      	lsrs	r2, r2, #1
 80019e4:	3a01      	subs	r2, #1
 80019e6:	0652      	lsls	r2, r2, #25
 80019e8:	4311      	orrs	r1, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019ee:	06d2      	lsls	r2, r2, #27
 80019f0:	430a      	orrs	r2, r1
 80019f2:	4912      	ldr	r1, [pc, #72]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019f8:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a10:	f7ff f946 	bl	8000ca0 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f942 	bl	8000ca0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e058      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a36:	e050      	b.n	8001ada <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e04f      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d144      	bne.n	8001ada <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a68:	f7ff f91a 	bl	8000ca0 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f916 	bl	8000ca0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e02c      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x7b8>
 8001a8e:	e024      	b.n	8001ada <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d01f      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f8fd 	bl	8000ca0 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f8f9 	bl	8000ca0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e00f      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4905      	ldr	r1, [pc, #20]	; (8001ae4 <HAL_RCC_OscConfig+0x82c>)
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x830>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e001      	b.n	8001ada <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	feeefffc 	.word	0xfeeefffc

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0e7      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b75      	ldr	r3, [pc, #468]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d910      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 0207 	bic.w	r2, r3, #7
 8001b16:	4970      	ldr	r1, [pc, #448]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b6e      	ldr	r3, [pc, #440]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0cf      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d908      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4960      	ldr	r1, [pc, #384]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d04c      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d121      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0a6      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d115      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e09a      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e08e      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e086      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4943      	ldr	r1, [pc, #268]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd4:	f7ff f864 	bl	8000ca0 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff f860 	bl	8000ca0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e06e      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d010      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d208      	bcs.n	8001c32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	492b      	ldr	r1, [pc, #172]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d210      	bcs.n	8001c62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 0207 	bic.w	r2, r3, #7
 8001c48:	4923      	ldr	r1, [pc, #140]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e036      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4918      	ldr	r1, [pc, #96]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4910      	ldr	r1, [pc, #64]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca0:	f000 f824 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	490b      	ldr	r1, [pc, #44]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_ClockConfig+0x1fc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fe4b 	bl	8000960 <HAL_InitTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cce:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	080078e0 	.word	0x080078e0
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x34>
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d121      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d11e      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d20:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d2c:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e005      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10d      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e004      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d134      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d003      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0xac>
 8001d90:	e005      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d94:	617b      	str	r3, [r7, #20]
      break;
 8001d96:	e005      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9a:	617b      	str	r3, [r7, #20]
      break;
 8001d9c:	e002      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	617b      	str	r3, [r7, #20]
      break;
 8001da2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	3301      	adds	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	fb03 f202 	mul.w	r2, r3, r2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	0e5b      	lsrs	r3, r3, #25
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de4:	69bb      	ldr	r3, [r7, #24]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080078f8 	.word	0x080078f8
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4904      	ldr	r1, [pc, #16]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	080078f0 	.word	0x080078f0

08001e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e4c:	f7ff ffda 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0adb      	lsrs	r3, r3, #11
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4904      	ldr	r1, [pc, #16]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080078f0 	.word	0x080078f0

08001e74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	220f      	movs	r2, #15
 8001e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_RCC_GetClockConfig+0x60>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0207 	and.w	r2, r3, #7
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	601a      	str	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ef0:	f7ff f96e 	bl	80011d0 <HAL_PWREx_GetVoltageRange>
 8001ef4:	6178      	str	r0, [r7, #20]
 8001ef6:	e014      	b.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6593      	str	r3, [r2, #88]	; 0x58
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f10:	f7ff f95e 	bl	80011d0 <HAL_PWREx_GetVoltageRange>
 8001f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f28:	d10b      	bne.n	8001f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b80      	cmp	r3, #128	; 0x80
 8001f2e:	d919      	bls.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2ba0      	cmp	r3, #160	; 0xa0
 8001f34:	d902      	bls.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f36:	2302      	movs	r3, #2
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e013      	b.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e010      	b.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b80      	cmp	r3, #128	; 0x80
 8001f46:	d902      	bls.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f48:	2303      	movs	r3, #3
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	e00a      	b.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d102      	bne.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f54:	2302      	movs	r3, #2
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e004      	b.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b70      	cmp	r3, #112	; 0x70
 8001f5e:	d101      	bne.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f60:	2301      	movs	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0207 	bic.w	r2, r3, #7
 8001f6c:	4909      	ldr	r1, [pc, #36]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d001      	beq.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d041      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fbc:	d02a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fc2:	d824      	bhi.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fc8:	d008      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fce:	d81e      	bhi.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fda:	e018      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fdc:	4b86      	ldr	r3, [pc, #536]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a85      	ldr	r2, [pc, #532]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe8:	e015      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 facd 	bl	8002590 <RCCEx_PLLSAI1_Config>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffa:	e00c      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3320      	adds	r3, #32
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fbb6 	bl	8002774 <RCCEx_PLLSAI2_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800200c:	e003      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	74fb      	strb	r3, [r7, #19]
      break;
 8002012:	e000      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002016:	7cfb      	ldrb	r3, [r7, #19]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800201c:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800202a:	4973      	ldr	r1, [pc, #460]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002032:	e001      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d041      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002048:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800204c:	d02a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800204e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002052:	d824      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800205a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800205e:	d81e      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d010      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800206a:	e018      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800206c:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a61      	ldr	r2, [pc, #388]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002078:	e015      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fa85 	bl	8002590 <RCCEx_PLLSAI1_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800208a:	e00c      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3320      	adds	r3, #32
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fb6e 	bl	8002774 <RCCEx_PLLSAI2_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209c:	e003      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	74fb      	strb	r3, [r7, #19]
      break;
 80020a2:	e000      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ac:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ba:	494f      	ldr	r1, [pc, #316]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020c2:	e001      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a0 	beq.w	8002216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00d      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a40      	ldr	r2, [pc, #256]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
 80020fc:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002108:	2301      	movs	r3, #1
 800210a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002118:	f7fe fdc2 	bl	8000ca0 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800211e:	e009      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe fdbe 	bl	8000ca0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	74fb      	strb	r3, [r7, #19]
        break;
 8002132:	e005      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002134:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ef      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d15c      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01f      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	d019      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002190:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7fe fd7d 	bl	8000ca0 <HAL_GetTick>
 80021a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a8:	e00b      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe fd79 	bl	8000ca0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d902      	bls.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	74fb      	strb	r3, [r7, #19]
            break;
 80021c0:	e006      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ec      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4904      	ldr	r1, [pc, #16]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021ee:	e009      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	74bb      	strb	r3, [r7, #18]
 80021f4:	e006      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002204:	7c7b      	ldrb	r3, [r7, #17]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4ba6      	ldr	r3, [pc, #664]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	4aa5      	ldr	r2, [pc, #660]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002222:	4ba0      	ldr	r3, [pc, #640]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f023 0203 	bic.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	499c      	ldr	r1, [pc, #624]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002244:	4b97      	ldr	r3, [pc, #604]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f023 020c 	bic.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	4994      	ldr	r1, [pc, #592]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002266:	4b8f      	ldr	r3, [pc, #572]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	498b      	ldr	r1, [pc, #556]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002288:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4983      	ldr	r1, [pc, #524]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022aa:	4b7e      	ldr	r3, [pc, #504]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b8:	497a      	ldr	r1, [pc, #488]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022cc:	4b75      	ldr	r3, [pc, #468]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4972      	ldr	r1, [pc, #456]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ee:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fc:	4969      	ldr	r1, [pc, #420]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002310:	4b64      	ldr	r3, [pc, #400]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800231e:	4961      	ldr	r1, [pc, #388]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	4958      	ldr	r1, [pc, #352]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	4950      	ldr	r1, [pc, #320]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002376:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	4947      	ldr	r1, [pc, #284]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002398:	4b42      	ldr	r3, [pc, #264]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	493f      	ldr	r1, [pc, #252]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d028      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e4:	60d3      	str	r3, [r2, #12]
 80023e6:	e011      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023f0:	d10c      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f8c9 	bl	8002590 <RCCEx_PLLSAI1_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d028      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	491f      	ldr	r1, [pc, #124]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002436:	d106      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002442:	60d3      	str	r3, [r2, #12]
 8002444:	e011      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800244e:	d10c      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	2101      	movs	r1, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f89a 	bl	8002590 <RCCEx_PLLSAI1_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002494:	d108      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002496:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a02      	ldr	r2, [pc, #8]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800249c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a0:	60d3      	str	r3, [r2, #12]
 80024a2:	e013      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80024a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f869 	bl	8002590 <RCCEx_PLLSAI1_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02f      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d8:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e6:	4929      	ldr	r1, [pc, #164]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f6:	d10d      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f846 	bl	8002590 <RCCEx_PLLSAI1_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d014      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	74bb      	strb	r3, [r7, #18]
 8002512:	e011      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251c:	d10c      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3320      	adds	r3, #32
 8002522:	2102      	movs	r1, #2
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f925 	bl	8002774 <RCCEx_PLLSAI2_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002554:	490d      	ldr	r1, [pc, #52]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002578:	4904      	ldr	r1, [pc, #16]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002580:	7cbb      	ldrb	r3, [r7, #18]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800259e:	4b74      	ldr	r3, [pc, #464]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d018      	beq.n	80025dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025aa:	4b71      	ldr	r3, [pc, #452]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0203 	and.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10d      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
       ||
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025c2:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
       ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d047      	beq.n	8002666 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e044      	b.n	8002666 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d018      	beq.n	8002616 <RCCEx_PLLSAI1_Config+0x86>
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d825      	bhi.n	8002634 <RCCEx_PLLSAI1_Config+0xa4>
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d002      	beq.n	80025f2 <RCCEx_PLLSAI1_Config+0x62>
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d009      	beq.n	8002604 <RCCEx_PLLSAI1_Config+0x74>
 80025f0:	e020      	b.n	8002634 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025f2:	4b5f      	ldr	r3, [pc, #380]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11d      	bne.n	800263a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002602:	e01a      	b.n	800263a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002604:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d116      	bne.n	800263e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002614:	e013      	b.n	800263e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002616:	4b56      	ldr	r3, [pc, #344]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002622:	4b53      	ldr	r3, [pc, #332]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002632:	e006      	b.n	8002642 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e004      	b.n	8002644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002642:	bf00      	nop
    }

    if(status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800264a:	4b49      	ldr	r3, [pc, #292]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	430b      	orrs	r3, r1
 8002660:	4943      	ldr	r1, [pc, #268]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002662:	4313      	orrs	r3, r2
 8002664:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d17c      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe fb12 	bl	8000ca0 <HAL_GetTick>
 800267c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800267e:	e009      	b.n	8002694 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002680:	f7fe fb0e 	bl	8000ca0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d902      	bls.n	8002694 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	73fb      	strb	r3, [r7, #15]
        break;
 8002692:	e005      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002694:	4b36      	ldr	r3, [pc, #216]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ef      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d15f      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d110      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80026b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6892      	ldr	r2, [r2, #8]
 80026bc:	0211      	lsls	r1, r2, #8
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68d2      	ldr	r2, [r2, #12]
 80026c2:	06d2      	lsls	r2, r2, #27
 80026c4:	430a      	orrs	r2, r1
 80026c6:	492a      	ldr	r1, [pc, #168]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	610b      	str	r3, [r1, #16]
 80026cc:	e027      	b.n	800271e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d112      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6892      	ldr	r2, [r2, #8]
 80026e4:	0211      	lsls	r1, r2, #8
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6912      	ldr	r2, [r2, #16]
 80026ea:	0852      	lsrs	r2, r2, #1
 80026ec:	3a01      	subs	r2, #1
 80026ee:	0552      	lsls	r2, r2, #21
 80026f0:	430a      	orrs	r2, r1
 80026f2:	491f      	ldr	r1, [pc, #124]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	610b      	str	r3, [r1, #16]
 80026f8:	e011      	b.n	800271e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	0211      	lsls	r1, r2, #8
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6952      	ldr	r2, [r2, #20]
 8002710:	0852      	lsrs	r2, r2, #1
 8002712:	3a01      	subs	r2, #1
 8002714:	0652      	lsls	r2, r2, #25
 8002716:	430a      	orrs	r2, r1
 8002718:	4915      	ldr	r1, [pc, #84]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002724:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002728:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fab9 	bl	8000ca0 <HAL_GetTick>
 800272e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002730:	e009      	b.n	8002746 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002732:	f7fe fab5 	bl	8000ca0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d902      	bls.n	8002746 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	73fb      	strb	r3, [r7, #15]
          break;
 8002744:	e005      	b.n	8002752 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ef      	beq.n	8002732 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4903      	ldr	r1, [pc, #12]	; (8002770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	4313      	orrs	r3, r2
 8002764:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000

08002774 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002782:	4b69      	ldr	r3, [pc, #420]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800278e:	4b66      	ldr	r3, [pc, #408]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d10d      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
       ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027a6:	4b60      	ldr	r3, [pc, #384]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
       ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d047      	beq.n	800284a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e044      	b.n	800284a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d018      	beq.n	80027fa <RCCEx_PLLSAI2_Config+0x86>
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d825      	bhi.n	8002818 <RCCEx_PLLSAI2_Config+0xa4>
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d002      	beq.n	80027d6 <RCCEx_PLLSAI2_Config+0x62>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d009      	beq.n	80027e8 <RCCEx_PLLSAI2_Config+0x74>
 80027d4:	e020      	b.n	8002818 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d6:	4b54      	ldr	r3, [pc, #336]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e01a      	b.n	800281e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f8:	e013      	b.n	8002822 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002806:	4b48      	ldr	r3, [pc, #288]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002816:	e006      	b.n	8002826 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e004      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002826:	bf00      	nop
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	430b      	orrs	r3, r1
 8002844:	4938      	ldr	r1, [pc, #224]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d166      	bne.n	800291e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002850:	4b35      	ldr	r3, [pc, #212]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a34      	ldr	r2, [pc, #208]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe fa20 	bl	8000ca0 <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002862:	e009      	b.n	8002878 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002864:	f7fe fa1c 	bl	8000ca0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	73fb      	strb	r3, [r7, #15]
        break;
 8002876:	e005      	b.n	8002884 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ef      	bne.n	8002864 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d149      	bne.n	800291e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d110      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	0211      	lsls	r1, r2, #8
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	06d2      	lsls	r2, r2, #27
 80028a8:	430a      	orrs	r2, r1
 80028aa:	491f      	ldr	r1, [pc, #124]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	614b      	str	r3, [r1, #20]
 80028b0:	e011      	b.n	80028d6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	0211      	lsls	r1, r2, #8
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6912      	ldr	r2, [r2, #16]
 80028c8:	0852      	lsrs	r2, r2, #1
 80028ca:	3a01      	subs	r2, #1
 80028cc:	0652      	lsls	r2, r2, #25
 80028ce:	430a      	orrs	r2, r1
 80028d0:	4915      	ldr	r1, [pc, #84]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe f9dd 	bl	8000ca0 <HAL_GetTick>
 80028e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028e8:	e009      	b.n	80028fe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ea:	f7fe f9d9 	bl	8000ca0 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d902      	bls.n	80028fe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	73fb      	strb	r3, [r7, #15]
          break;
 80028fc:	e005      	b.n	800290a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ef      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000

0800292c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e049      	b.n	80029d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f841 	bl	80029da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f000 f9da 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04f      	b.n	8002aa8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01d      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d018      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_TIM_Base_Start_IT+0x76>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d115      	bne.n	8002a92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d015      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d011      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	e008      	b.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e000      	b.n	8002aa6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40013400 	.word	0x40013400
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	00010007 	.word	0x00010007

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d020      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0202 	mvn.w	r2, #2
 8002b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8e4 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8d6 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f8e7 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d020      	beq.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8be 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8b0 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f8c1 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d020      	beq.n	8002bcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01b      	beq.n	8002bcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0208 	mvn.w	r2, #8
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f898 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f88a 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f89b 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d020      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0210 	mvn.w	r2, #16
 8002be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2208      	movs	r2, #8
 8002bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f872 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f864 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f875 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fdf2 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f906 	bl	8002e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8fe 	bl	8002e80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f834 	bl	8002d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0220 	mvn.w	r2, #32
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8c6 	bl	8002e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d00f      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	; (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d01b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d017      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <TIM_Base_SetConfig+0x128>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d003      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <TIM_Base_SetConfig+0x130>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00f      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <TIM_Base_SetConfig+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <TIM_Base_SetConfig+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	615a      	str	r2, [r3, #20]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e040      	b.n	8002f28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd fcf2 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fb6a 	bl	80035b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f8af 	bl	8003044 <UART_SetConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01b      	b.n	8002f28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002efe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fbe9 	bl	80036f8 <UART_CheckIdleState>
 8002f26:	4603      	mov	r3, r0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d178      	bne.n	800303a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_UART_Transmit+0x24>
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e071      	b.n	800303c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2221      	movs	r2, #33	; 0x21
 8002f64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f66:	f7fd fe9b 	bl	8000ca0 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f84:	d108      	bne.n	8002f98 <HAL_UART_Transmit+0x68>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	e003      	b.n	8002fa0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa0:	e030      	b.n	8003004 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fc4b 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e03c      	b.n	800303c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	881a      	ldrh	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	3302      	adds	r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e008      	b.n	8002ff2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1c8      	bne.n	8002fa2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fc14 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e005      	b.n	800303c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800303a:	2302      	movs	r3, #2
  }
}
 800303c:	4618      	mov	r0, r3
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4313      	orrs	r3, r2
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4ba4      	ldr	r3, [pc, #656]	; (8003304 <UART_SetConfig+0x2c0>)
 8003074:	4013      	ands	r3, r2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800307c:	430b      	orrs	r3, r1
 800307e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a99      	ldr	r2, [pc, #612]	; (8003308 <UART_SetConfig+0x2c4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	4313      	orrs	r3, r2
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a90      	ldr	r2, [pc, #576]	; (800330c <UART_SetConfig+0x2c8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d126      	bne.n	800311c <UART_SetConfig+0xd8>
 80030ce:	4b90      	ldr	r3, [pc, #576]	; (8003310 <UART_SetConfig+0x2cc>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d81b      	bhi.n	8003114 <UART_SetConfig+0xd0>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <UART_SetConfig+0xa0>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	08003105 	.word	0x08003105
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e116      	b.n	800332a <UART_SetConfig+0x2e6>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e112      	b.n	800332a <UART_SetConfig+0x2e6>
 8003104:	2304      	movs	r3, #4
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e10e      	b.n	800332a <UART_SetConfig+0x2e6>
 800310c:	2308      	movs	r3, #8
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e10a      	b.n	800332a <UART_SetConfig+0x2e6>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e106      	b.n	800332a <UART_SetConfig+0x2e6>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a7c      	ldr	r2, [pc, #496]	; (8003314 <UART_SetConfig+0x2d0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d138      	bne.n	8003198 <UART_SetConfig+0x154>
 8003126:	4b7a      	ldr	r3, [pc, #488]	; (8003310 <UART_SetConfig+0x2cc>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d82d      	bhi.n	8003190 <UART_SetConfig+0x14c>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <UART_SetConfig+0xf8>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003171 	.word	0x08003171
 8003140:	08003191 	.word	0x08003191
 8003144:	08003191 	.word	0x08003191
 8003148:	08003191 	.word	0x08003191
 800314c:	08003181 	.word	0x08003181
 8003150:	08003191 	.word	0x08003191
 8003154:	08003191 	.word	0x08003191
 8003158:	08003191 	.word	0x08003191
 800315c:	08003179 	.word	0x08003179
 8003160:	08003191 	.word	0x08003191
 8003164:	08003191 	.word	0x08003191
 8003168:	08003191 	.word	0x08003191
 800316c:	08003189 	.word	0x08003189
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e0d8      	b.n	800332a <UART_SetConfig+0x2e6>
 8003178:	2302      	movs	r3, #2
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e0d4      	b.n	800332a <UART_SetConfig+0x2e6>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e0d0      	b.n	800332a <UART_SetConfig+0x2e6>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e0cc      	b.n	800332a <UART_SetConfig+0x2e6>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e0c8      	b.n	800332a <UART_SetConfig+0x2e6>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <UART_SetConfig+0x2d4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d125      	bne.n	80031ee <UART_SetConfig+0x1aa>
 80031a2:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <UART_SetConfig+0x2cc>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031ac:	2b30      	cmp	r3, #48	; 0x30
 80031ae:	d016      	beq.n	80031de <UART_SetConfig+0x19a>
 80031b0:	2b30      	cmp	r3, #48	; 0x30
 80031b2:	d818      	bhi.n	80031e6 <UART_SetConfig+0x1a2>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d00a      	beq.n	80031ce <UART_SetConfig+0x18a>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d814      	bhi.n	80031e6 <UART_SetConfig+0x1a2>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <UART_SetConfig+0x182>
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d008      	beq.n	80031d6 <UART_SetConfig+0x192>
 80031c4:	e00f      	b.n	80031e6 <UART_SetConfig+0x1a2>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031cc:	e0ad      	b.n	800332a <UART_SetConfig+0x2e6>
 80031ce:	2302      	movs	r3, #2
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d4:	e0a9      	b.n	800332a <UART_SetConfig+0x2e6>
 80031d6:	2304      	movs	r3, #4
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031dc:	e0a5      	b.n	800332a <UART_SetConfig+0x2e6>
 80031de:	2308      	movs	r3, #8
 80031e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e4:	e0a1      	b.n	800332a <UART_SetConfig+0x2e6>
 80031e6:	2310      	movs	r3, #16
 80031e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ec:	e09d      	b.n	800332a <UART_SetConfig+0x2e6>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a4a      	ldr	r2, [pc, #296]	; (800331c <UART_SetConfig+0x2d8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <UART_SetConfig+0x200>
 80031f8:	4b45      	ldr	r3, [pc, #276]	; (8003310 <UART_SetConfig+0x2cc>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003202:	2bc0      	cmp	r3, #192	; 0xc0
 8003204:	d016      	beq.n	8003234 <UART_SetConfig+0x1f0>
 8003206:	2bc0      	cmp	r3, #192	; 0xc0
 8003208:	d818      	bhi.n	800323c <UART_SetConfig+0x1f8>
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	d00a      	beq.n	8003224 <UART_SetConfig+0x1e0>
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d814      	bhi.n	800323c <UART_SetConfig+0x1f8>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <UART_SetConfig+0x1d8>
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d008      	beq.n	800322c <UART_SetConfig+0x1e8>
 800321a:	e00f      	b.n	800323c <UART_SetConfig+0x1f8>
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e082      	b.n	800332a <UART_SetConfig+0x2e6>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e07e      	b.n	800332a <UART_SetConfig+0x2e6>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e07a      	b.n	800332a <UART_SetConfig+0x2e6>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e076      	b.n	800332a <UART_SetConfig+0x2e6>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e072      	b.n	800332a <UART_SetConfig+0x2e6>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a35      	ldr	r2, [pc, #212]	; (8003320 <UART_SetConfig+0x2dc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d12a      	bne.n	80032a4 <UART_SetConfig+0x260>
 800324e:	4b30      	ldr	r3, [pc, #192]	; (8003310 <UART_SetConfig+0x2cc>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325c:	d01a      	beq.n	8003294 <UART_SetConfig+0x250>
 800325e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003262:	d81b      	bhi.n	800329c <UART_SetConfig+0x258>
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d00c      	beq.n	8003284 <UART_SetConfig+0x240>
 800326a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326e:	d815      	bhi.n	800329c <UART_SetConfig+0x258>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x238>
 8003274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003278:	d008      	beq.n	800328c <UART_SetConfig+0x248>
 800327a:	e00f      	b.n	800329c <UART_SetConfig+0x258>
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e052      	b.n	800332a <UART_SetConfig+0x2e6>
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e04e      	b.n	800332a <UART_SetConfig+0x2e6>
 800328c:	2304      	movs	r3, #4
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e04a      	b.n	800332a <UART_SetConfig+0x2e6>
 8003294:	2308      	movs	r3, #8
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e046      	b.n	800332a <UART_SetConfig+0x2e6>
 800329c:	2310      	movs	r3, #16
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e042      	b.n	800332a <UART_SetConfig+0x2e6>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <UART_SetConfig+0x2c4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d13a      	bne.n	8003324 <UART_SetConfig+0x2e0>
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <UART_SetConfig+0x2cc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032bc:	d01a      	beq.n	80032f4 <UART_SetConfig+0x2b0>
 80032be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c2:	d81b      	bhi.n	80032fc <UART_SetConfig+0x2b8>
 80032c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c8:	d00c      	beq.n	80032e4 <UART_SetConfig+0x2a0>
 80032ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ce:	d815      	bhi.n	80032fc <UART_SetConfig+0x2b8>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <UART_SetConfig+0x298>
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d008      	beq.n	80032ec <UART_SetConfig+0x2a8>
 80032da:	e00f      	b.n	80032fc <UART_SetConfig+0x2b8>
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e022      	b.n	800332a <UART_SetConfig+0x2e6>
 80032e4:	2302      	movs	r3, #2
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e01e      	b.n	800332a <UART_SetConfig+0x2e6>
 80032ec:	2304      	movs	r3, #4
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e01a      	b.n	800332a <UART_SetConfig+0x2e6>
 80032f4:	2308      	movs	r3, #8
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e016      	b.n	800332a <UART_SetConfig+0x2e6>
 80032fc:	2310      	movs	r3, #16
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e012      	b.n	800332a <UART_SetConfig+0x2e6>
 8003304:	efff69f3 	.word	0xefff69f3
 8003308:	40008000 	.word	0x40008000
 800330c:	40013800 	.word	0x40013800
 8003310:	40021000 	.word	0x40021000
 8003314:	40004400 	.word	0x40004400
 8003318:	40004800 	.word	0x40004800
 800331c:	40004c00 	.word	0x40004c00
 8003320:	40005000 	.word	0x40005000
 8003324:	2310      	movs	r3, #16
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a9f      	ldr	r2, [pc, #636]	; (80035ac <UART_SetConfig+0x568>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d17a      	bne.n	800342a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003338:	2b08      	cmp	r3, #8
 800333a:	d824      	bhi.n	8003386 <UART_SetConfig+0x342>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x300>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003369 	.word	0x08003369
 8003348:	08003387 	.word	0x08003387
 800334c:	08003371 	.word	0x08003371
 8003350:	08003387 	.word	0x08003387
 8003354:	08003377 	.word	0x08003377
 8003358:	08003387 	.word	0x08003387
 800335c:	08003387 	.word	0x08003387
 8003360:	08003387 	.word	0x08003387
 8003364:	0800337f 	.word	0x0800337f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7fe fd58 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 800336c:	61f8      	str	r0, [r7, #28]
        break;
 800336e:	e010      	b.n	8003392 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003370:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <UART_SetConfig+0x56c>)
 8003372:	61fb      	str	r3, [r7, #28]
        break;
 8003374:	e00d      	b.n	8003392 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003376:	f7fe fcb9 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 800337a:	61f8      	str	r0, [r7, #28]
        break;
 800337c:	e009      	b.n	8003392 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003382:	61fb      	str	r3, [r7, #28]
        break;
 8003384:	e005      	b.n	8003392 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003390:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80fb 	beq.w	8003590 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d305      	bcc.n	80033b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d903      	bls.n	80033be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033bc:	e0e8      	b.n	8003590 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	2200      	movs	r2, #0
 80033c2:	461c      	mov	r4, r3
 80033c4:	4615      	mov	r5, r2
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	022b      	lsls	r3, r5, #8
 80033d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033d4:	0222      	lsls	r2, r4, #8
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	6849      	ldr	r1, [r1, #4]
 80033da:	0849      	lsrs	r1, r1, #1
 80033dc:	2000      	movs	r0, #0
 80033de:	4688      	mov	r8, r1
 80033e0:	4681      	mov	r9, r0
 80033e2:	eb12 0a08 	adds.w	sl, r2, r8
 80033e6:	eb43 0b09 	adc.w	fp, r3, r9
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033f8:	4650      	mov	r0, sl
 80033fa:	4659      	mov	r1, fp
 80033fc:	f7fc ff48 	bl	8000290 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4613      	mov	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340e:	d308      	bcc.n	8003422 <UART_SetConfig+0x3de>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003416:	d204      	bcs.n	8003422 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	e0b6      	b.n	8003590 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003428:	e0b2      	b.n	8003590 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003432:	d15e      	bne.n	80034f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003438:	2b08      	cmp	r3, #8
 800343a:	d828      	bhi.n	800348e <UART_SetConfig+0x44a>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0x400>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003469 	.word	0x08003469
 8003448:	08003471 	.word	0x08003471
 800344c:	08003479 	.word	0x08003479
 8003450:	0800348f 	.word	0x0800348f
 8003454:	0800347f 	.word	0x0800347f
 8003458:	0800348f 	.word	0x0800348f
 800345c:	0800348f 	.word	0x0800348f
 8003460:	0800348f 	.word	0x0800348f
 8003464:	08003487 	.word	0x08003487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe fcd8 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 800346c:	61f8      	str	r0, [r7, #28]
        break;
 800346e:	e014      	b.n	800349a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003470:	f7fe fcea 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8003474:	61f8      	str	r0, [r7, #28]
        break;
 8003476:	e010      	b.n	800349a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003478:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <UART_SetConfig+0x56c>)
 800347a:	61fb      	str	r3, [r7, #28]
        break;
 800347c:	e00d      	b.n	800349a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347e:	f7fe fc35 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8003482:	61f8      	str	r0, [r7, #28]
        break;
 8003484:	e009      	b.n	800349a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348a:	61fb      	str	r3, [r7, #28]
        break;
 800348c:	e005      	b.n	800349a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d077      	beq.n	8003590 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005a      	lsls	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	441a      	add	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d916      	bls.n	80034ea <UART_SetConfig+0x4a6>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c2:	d212      	bcs.n	80034ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f023 030f 	bic.w	r3, r3, #15
 80034cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	b29a      	uxth	r2, r3
 80034da:	8afb      	ldrh	r3, [r7, #22]
 80034dc:	4313      	orrs	r3, r2
 80034de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	8afa      	ldrh	r2, [r7, #22]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e052      	b.n	8003590 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034f0:	e04e      	b.n	8003590 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d827      	bhi.n	800354a <UART_SetConfig+0x506>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0x4bc>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003525 	.word	0x08003525
 8003504:	0800352d 	.word	0x0800352d
 8003508:	08003535 	.word	0x08003535
 800350c:	0800354b 	.word	0x0800354b
 8003510:	0800353b 	.word	0x0800353b
 8003514:	0800354b 	.word	0x0800354b
 8003518:	0800354b 	.word	0x0800354b
 800351c:	0800354b 	.word	0x0800354b
 8003520:	08003543 	.word	0x08003543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003524:	f7fe fc7a 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8003528:	61f8      	str	r0, [r7, #28]
        break;
 800352a:	e014      	b.n	8003556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800352c:	f7fe fc8c 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8003530:	61f8      	str	r0, [r7, #28]
        break;
 8003532:	e010      	b.n	8003556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003534:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <UART_SetConfig+0x56c>)
 8003536:	61fb      	str	r3, [r7, #28]
        break;
 8003538:	e00d      	b.n	8003556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353a:	f7fe fbd7 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 800353e:	61f8      	str	r0, [r7, #28]
        break;
 8003540:	e009      	b.n	8003556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003546:	61fb      	str	r3, [r7, #28]
        break;
 8003548:	e005      	b.n	8003556 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003554:	bf00      	nop
    }

    if (pclk != 0U)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d019      	beq.n	8003590 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	085a      	lsrs	r2, r3, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	441a      	add	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	d909      	bls.n	800358a <UART_SetConfig+0x546>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d205      	bcs.n	800358a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	e002      	b.n	8003590 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800359c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40008000 	.word	0x40008000
 80035b0:	00f42400 	.word	0x00f42400

080035b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01a      	beq.n	80036ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d10a      	bne.n	80036ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b098      	sub	sp, #96	; 0x60
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003708:	f7fd faca 	bl	8000ca0 <HAL_GetTick>
 800370c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b08      	cmp	r3, #8
 800371a:	d12e      	bne.n	800377a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800371c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003724:	2200      	movs	r2, #0
 8003726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f88c 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d021      	beq.n	800377a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374a:	653b      	str	r3, [r7, #80]	; 0x50
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
 8003756:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800375a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e6      	bne.n	8003736 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e062      	b.n	8003840 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d149      	bne.n	800381c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f856 	bl	8003848 <UART_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d03c      	beq.n	800381c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	623b      	str	r3, [r7, #32]
   return(result);
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30
 80037c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e6      	bne.n	80037a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3308      	adds	r3, #8
 80037da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f4:	61fa      	str	r2, [r7, #28]
 80037f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	69b9      	ldr	r1, [r7, #24]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	617b      	str	r3, [r7, #20]
   return(result);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e5      	bne.n	80037d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e011      	b.n	8003840 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3758      	adds	r7, #88	; 0x58
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003858:	e049      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003860:	d045      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fd fa1d 	bl	8000ca0 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <UART_WaitOnFlagUntilTimeout+0x30>
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e048      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d031      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b08      	cmp	r3, #8
 8003896:	d110      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2208      	movs	r2, #8
 800389e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f838 	bl	8003916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2208      	movs	r2, #8
 80038aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e029      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d111      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f81e 	bl	8003916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	429a      	cmp	r2, r3
 800390a:	d0a6      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003916:	b480      	push	{r7}
 8003918:	b095      	sub	sp, #84	; 0x54
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	643b      	str	r3, [r7, #64]	; 0x40
 800393e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e6      	bne.n	800391e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	64bb      	str	r3, [r7, #72]	; 0x48
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	2b01      	cmp	r3, #1
 800398a:	d118      	bne.n	80039be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	60bb      	str	r3, [r7, #8]
   return(result);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f023 0310 	bic.w	r3, r3, #16
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	613b      	str	r3, [r7, #16]
   return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e6      	bne.n	800398c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039d2:	bf00      	nop
 80039d4:	3754      	adds	r7, #84	; 0x54
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <__NVIC_SetPriority>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	db0a      	blt.n	8003a0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	490c      	ldr	r1, [pc, #48]	; (8003a2c <__NVIC_SetPriority+0x4c>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	0112      	lsls	r2, r2, #4
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	440b      	add	r3, r1
 8003a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a08:	e00a      	b.n	8003a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4908      	ldr	r1, [pc, #32]	; (8003a30 <__NVIC_SetPriority+0x50>)
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	3b04      	subs	r3, #4
 8003a18:	0112      	lsls	r2, r2, #4
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	761a      	strb	r2, [r3, #24]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e100 	.word	0xe000e100
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <SysTick_Handler+0x1c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a3c:	f001 fee8 	bl	8005810 <xTaskGetSchedulerState>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a46:	f002 fccf 	bl	80063e8 <xPortSysTickHandler>
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	e000e010 	.word	0xe000e010

08003a54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f06f 0004 	mvn.w	r0, #4
 8003a5e:	f7ff ffbf 	bl	80039e0 <__NVIC_SetPriority>
#endif
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a6e:	f3ef 8305 	mrs	r3, IPSR
 8003a72:	603b      	str	r3, [r7, #0]
  return(result);
 8003a74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a7a:	f06f 0305 	mvn.w	r3, #5
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	e00c      	b.n	8003a9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <osKernelInitialize+0x44>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <osKernelInitialize+0x44>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	e002      	b.n	8003a9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a9c:	687b      	ldr	r3, [r7, #4]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000174 	.word	0x20000174

08003ab0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab6:	f3ef 8305 	mrs	r3, IPSR
 8003aba:	603b      	str	r3, [r7, #0]
  return(result);
 8003abc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ac2:	f06f 0305 	mvn.w	r3, #5
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e010      	b.n	8003aec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <osKernelStart+0x48>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d109      	bne.n	8003ae6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ad2:	f7ff ffbf 	bl	8003a54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <osKernelStart+0x48>)
 8003ad8:	2202      	movs	r2, #2
 8003ada:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003adc:	f001 fa50 	bl	8004f80 <vTaskStartScheduler>
      stat = osOK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	e002      	b.n	8003aec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003aec:	687b      	ldr	r3, [r7, #4]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000174 	.word	0x20000174

08003afc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b0c:	f3ef 8305 	mrs	r3, IPSR
 8003b10:	617b      	str	r3, [r7, #20]
  return(result);
 8003b12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d17e      	bne.n	8003c16 <osThreadNew+0x11a>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d07b      	beq.n	8003c16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b22:	2318      	movs	r3, #24
 8003b24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d045      	beq.n	8003bc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <osThreadNew+0x48>
        name = attr->name;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <osThreadNew+0x6e>
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b38      	cmp	r3, #56	; 0x38
 8003b5c:	d805      	bhi.n	8003b6a <osThreadNew+0x6e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <osThreadNew+0x72>
        return (NULL);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e054      	b.n	8003c18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00e      	beq.n	8003ba4 <osThreadNew+0xa8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b5b      	cmp	r3, #91	; 0x5b
 8003b8c:	d90a      	bls.n	8003ba4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <osThreadNew+0xa8>
        mem = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e010      	b.n	8003bc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10c      	bne.n	8003bc6 <osThreadNew+0xca>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d108      	bne.n	8003bc6 <osThreadNew+0xca>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <osThreadNew+0xca>
          mem = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	e001      	b.n	8003bc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d110      	bne.n	8003bee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bd4:	9202      	str	r2, [sp, #8]
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fff6 	bl	8004bd4 <xTaskCreateStatic>
 8003be8:	4603      	mov	r3, r0
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e013      	b.n	8003c16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d110      	bne.n	8003c16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	f107 0310 	add.w	r3, r7, #16
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f001 f841 	bl	8004c8e <xTaskCreate>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <osThreadNew+0x11a>
            hTask = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c16:	693b      	ldr	r3, [r7, #16]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3728      	adds	r7, #40	; 0x28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c28:	f3ef 8305 	mrs	r3, IPSR
 8003c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <osDelay+0x1c>
    stat = osErrorISR;
 8003c34:	f06f 0305 	mvn.w	r3, #5
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e007      	b.n	8003c4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f001 f966 	bl	8004f18 <vTaskDelay>
    }
  }

  return (stat);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08a      	sub	sp, #40	; 0x28
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c66:	f3ef 8305 	mrs	r3, IPSR
 8003c6a:	613b      	str	r3, [r7, #16]
  return(result);
 8003c6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d15f      	bne.n	8003d32 <osMessageQueueNew+0xdc>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05c      	beq.n	8003d32 <osMessageQueueNew+0xdc>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d059      	beq.n	8003d32 <osMessageQueueNew+0xdc>
    mem = -1;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d029      	beq.n	8003cde <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d012      	beq.n	8003cb8 <osMessageQueueNew+0x62>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b4f      	cmp	r3, #79	; 0x4f
 8003c98:	d90e      	bls.n	8003cb8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <osMessageQueueNew+0x62>
        mem = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e014      	b.n	8003ce2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d110      	bne.n	8003ce2 <osMessageQueueNew+0x8c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10c      	bne.n	8003ce2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d108      	bne.n	8003ce2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <osMessageQueueNew+0x8c>
          mem = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e001      	b.n	8003ce2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d10b      	bne.n	8003d00 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	9100      	str	r1, [sp, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fa2e 	bl	8004158 <xQueueGenericCreateStatic>
 8003cfc:	61f8      	str	r0, [r7, #28]
 8003cfe:	e008      	b.n	8003d12 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003d06:	2200      	movs	r2, #0
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fa9c 	bl	8004248 <xQueueGenericCreate>
 8003d10:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e001      	b.n	8003d2a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003d2a:	6979      	ldr	r1, [r7, #20]
 8003d2c:	69f8      	ldr	r0, [r7, #28]
 8003d2e:	f000 fef3 	bl	8004b18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003d32:	69fb      	ldr	r3, [r7, #28]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d54:	f3ef 8305 	mrs	r3, IPSR
 8003d58:	617b      	str	r3, [r7, #20]
  return(result);
 8003d5a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d028      	beq.n	8003db2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <osMessageQueuePut+0x36>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <osMessageQueuePut+0x36>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003d72:	f06f 0303 	mvn.w	r3, #3
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e038      	b.n	8003dec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003d7e:	f107 0210 	add.w	r2, r7, #16
 8003d82:	2300      	movs	r3, #0
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	69b8      	ldr	r0, [r7, #24]
 8003d88:	f000 fbba 	bl	8004500 <xQueueGenericSendFromISR>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d003      	beq.n	8003d9a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003d92:	f06f 0302 	mvn.w	r3, #2
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	e028      	b.n	8003dec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d025      	beq.n	8003dec <osMessageQueuePut+0xb0>
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <osMessageQueuePut+0xbc>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	e01c      	b.n	8003dec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <osMessageQueuePut+0x82>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003dbe:	f06f 0303 	mvn.w	r3, #3
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	e012      	b.n	8003dec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	69b8      	ldr	r0, [r7, #24]
 8003dce:	f000 fa99 	bl	8004304 <xQueueGenericSend>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d009      	beq.n	8003dec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003dde:	f06f 0301 	mvn.w	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e002      	b.n	8003dec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003de6:	f06f 0302 	mvn.w	r3, #2
 8003dea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003dec:	69fb      	ldr	r3, [r7, #28]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e12:	f3ef 8305 	mrs	r3, IPSR
 8003e16:	617b      	str	r3, [r7, #20]
  return(result);
 8003e18:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <osMessageQueueGet+0x34>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <osMessageQueueGet+0x34>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003e30:	f06f 0303 	mvn.w	r3, #3
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	e037      	b.n	8003ea8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	461a      	mov	r2, r3
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	69b8      	ldr	r0, [r7, #24]
 8003e46:	f000 fcd7 	bl	80047f8 <xQueueReceiveFromISR>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d003      	beq.n	8003e58 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003e50:	f06f 0302 	mvn.w	r3, #2
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e027      	b.n	8003ea8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d024      	beq.n	8003ea8 <osMessageQueueGet+0xac>
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <osMessageQueueGet+0xb8>)
 8003e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	e01b      	b.n	8003ea8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <osMessageQueueGet+0x80>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003e7c:	f06f 0303 	mvn.w	r3, #3
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e011      	b.n	8003ea8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	69b8      	ldr	r0, [r7, #24]
 8003e8a:	f000 fbd5 	bl	8004638 <xQueueReceive>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d009      	beq.n	8003ea8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003e9a:	f06f 0301 	mvn.w	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e002      	b.n	8003ea8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003ea2:	f06f 0302 	mvn.w	r3, #2
 8003ea6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ec8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <vApplicationGetIdleTaskMemory+0x30>)
 8003ece:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	601a      	str	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000178 	.word	0x20000178
 8003ee8:	200001d4 	.word	0x200001d4

08003eec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <vApplicationGetTimerTaskMemory+0x2c>)
 8003efc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <vApplicationGetTimerTaskMemory+0x30>)
 8003f02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f0a:	601a      	str	r2, [r3, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	200003d4 	.word	0x200003d4
 8003f1c:	20000430 	.word	0x20000430

08003f20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f103 0208 	add.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f103 0208 	add.w	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0208 	add.w	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd8:	d103      	bne.n	8003fe2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e00c      	b.n	8003ffc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e002      	b.n	8003ff0 <vListInsert+0x2e>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d2f6      	bcs.n	8003fea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6892      	ldr	r2, [r2, #8]
 800404a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6852      	ldr	r2, [r2, #4]
 8004054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d103      	bne.n	8004068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1e5a      	subs	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040b2:	f002 f907 	bl	80062c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	441a      	add	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	3b01      	subs	r3, #1
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	441a      	add	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	22ff      	movs	r2, #255	; 0xff
 80040f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d114      	bne.n	8004132 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01a      	beq.n	8004146 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3310      	adds	r3, #16
 8004114:	4618      	mov	r0, r3
 8004116:	f001 f9bd 	bl	8005494 <xTaskRemoveFromEventList>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d012      	beq.n	8004146 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <xQueueGenericReset+0xcc>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	e009      	b.n	8004146 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3310      	adds	r3, #16
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fef2 	bl	8003f20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3324      	adds	r3, #36	; 0x24
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff feed 	bl	8003f20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004146:	f002 f8ed 	bl	8006324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800414a:	2301      	movs	r3, #1
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <xQueueGenericCreateStatic+0x52>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <xQueueGenericCreateStatic+0x56>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <xQueueGenericCreateStatic+0x58>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	623b      	str	r3, [r7, #32]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <xQueueGenericCreateStatic+0x7e>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <xQueueGenericCreateStatic+0x82>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <xQueueGenericCreateStatic+0x84>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	61fb      	str	r3, [r7, #28]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041f6:	2350      	movs	r3, #80	; 0x50
 80041f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b50      	cmp	r3, #80	; 0x50
 80041fe:	d00a      	beq.n	8004216 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	61bb      	str	r3, [r7, #24]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004216:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800422a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4613      	mov	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f83f 	bl	80042bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004240:	4618      	mov	r0, r3
 8004242:	3730      	adds	r7, #48	; 0x30
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xQueueGenericCreate+0x2a>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	613b      	str	r3, [r7, #16]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	3350      	adds	r3, #80	; 0x50
 8004280:	4618      	mov	r0, r3
 8004282:	f002 f941 	bl	8006508 <pvPortMalloc>
 8004286:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3350      	adds	r3, #80	; 0x50
 8004296:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042a0:	79fa      	ldrb	r2, [r7, #7]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f805 	bl	80042bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042b2:	69bb      	ldr	r3, [r7, #24]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e002      	b.n	80042de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042ea:	2101      	movs	r1, #1
 80042ec:	69b8      	ldr	r0, [r7, #24]
 80042ee:	f7ff fecb 	bl	8004088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08e      	sub	sp, #56	; 0x38
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004312:	2300      	movs	r3, #0
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xQueueGenericSend+0x32>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d103      	bne.n	8004344 <xQueueGenericSend+0x40>
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <xQueueGenericSend+0x44>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <xQueueGenericSend+0x46>
 8004348:	2300      	movs	r3, #0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <xQueueGenericSend+0x60>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004360:	bf00      	nop
 8004362:	e7fe      	b.n	8004362 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d103      	bne.n	8004372 <xQueueGenericSend+0x6e>
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <xQueueGenericSend+0x72>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <xQueueGenericSend+0x74>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <xQueueGenericSend+0x8e>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	623b      	str	r3, [r7, #32]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004392:	f001 fa3d 	bl	8005810 <xTaskGetSchedulerState>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <xQueueGenericSend+0x9e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <xQueueGenericSend+0xa2>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <xQueueGenericSend+0xa4>
 80043a6:	2300      	movs	r3, #0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	61fb      	str	r3, [r7, #28]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043c2:	f001 ff7f 	bl	80062c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <xQueueGenericSend+0xd4>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d129      	bne.n	800442c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043de:	f000 fa8b 	bl	80048f8 <prvCopyDataToQueue>
 80043e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d010      	beq.n	800440e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 f84f 	bl	8005494 <xTaskRemoveFromEventList>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043fc:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <xQueueGenericSend+0x1f8>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	e00a      	b.n	8004424 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004414:	4b39      	ldr	r3, [pc, #228]	; (80044fc <xQueueGenericSend+0x1f8>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004424:	f001 ff7e 	bl	8006324 <vPortExitCritical>
				return pdPASS;
 8004428:	2301      	movs	r3, #1
 800442a:	e063      	b.n	80044f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004432:	f001 ff77 	bl	8006324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004436:	2300      	movs	r3, #0
 8004438:	e05c      	b.n	80044f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004440:	f107 0314 	add.w	r3, r7, #20
 8004444:	4618      	mov	r0, r3
 8004446:	f001 f889 	bl	800555c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800444a:	2301      	movs	r3, #1
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800444e:	f001 ff69 	bl	8006324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004452:	f000 fdfb 	bl	800504c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004456:	f001 ff35 	bl	80062c4 <vPortEnterCritical>
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004460:	b25b      	sxtb	r3, r3
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004466:	d103      	bne.n	8004470 <xQueueGenericSend+0x16c>
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004476:	b25b      	sxtb	r3, r3
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447c:	d103      	bne.n	8004486 <xQueueGenericSend+0x182>
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004486:	f001 ff4d 	bl	8006324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800448a:	1d3a      	adds	r2, r7, #4
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f001 f878 	bl	8005588 <xTaskCheckForTimeOut>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d124      	bne.n	80044e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800449e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a0:	f000 fb22 	bl	8004ae8 <prvIsQueueFull>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d018      	beq.n	80044dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	3310      	adds	r3, #16
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 ff9e 	bl	80053f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ba:	f000 faad 	bl	8004a18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044be:	f000 fdd3 	bl	8005068 <xTaskResumeAll>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f47f af7c 	bne.w	80043c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <xQueueGenericSend+0x1f8>)
 80044cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	e772      	b.n	80043c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044de:	f000 fa9b 	bl	8004a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044e2:	f000 fdc1 	bl	8005068 <xTaskResumeAll>
 80044e6:	e76c      	b.n	80043c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ea:	f000 fa95 	bl	8004a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ee:	f000 fdbb 	bl	8005068 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3738      	adds	r7, #56	; 0x38
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b090      	sub	sp, #64	; 0x40
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d103      	bne.n	800453c <xQueueGenericSendFromISR+0x3c>
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <xQueueGenericSendFromISR+0x40>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <xQueueGenericSendFromISR+0x42>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d103      	bne.n	800456a <xQueueGenericSendFromISR+0x6a>
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <xQueueGenericSendFromISR+0x6e>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <xQueueGenericSendFromISR+0x70>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	623b      	str	r3, [r7, #32]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800458a:	f001 ff7d 	bl	8006488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800458e:	f3ef 8211 	mrs	r2, BASEPRI
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	61fa      	str	r2, [r7, #28]
 80045a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <xQueueGenericSendFromISR+0xbc>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d12f      	bne.n	800461c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045d2:	f000 f991 	bl	80048f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045de:	d112      	bne.n	8004606 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d016      	beq.n	8004616 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	3324      	adds	r3, #36	; 0x24
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 ff51 	bl	8005494 <xTaskRemoveFromEventList>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e007      	b.n	8004616 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004606:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800460a:	3301      	adds	r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	b25a      	sxtb	r2, r3
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004616:	2301      	movs	r3, #1
 8004618:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800461a:	e001      	b.n	8004620 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800462a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800462c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800462e:	4618      	mov	r0, r3
 8004630:	3740      	adds	r7, #64	; 0x40
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08c      	sub	sp, #48	; 0x30
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <xQueueReceive+0x30>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	623b      	str	r3, [r7, #32]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <xQueueReceive+0x3e>
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <xQueueReceive+0x42>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <xQueueReceive+0x44>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xQueueReceive+0x5e>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	61fb      	str	r3, [r7, #28]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004696:	f001 f8bb 	bl	8005810 <xTaskGetSchedulerState>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <xQueueReceive+0x6e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <xQueueReceive+0x72>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueReceive+0x74>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xQueueReceive+0x8e>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	61bb      	str	r3, [r7, #24]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c6:	f001 fdfd 	bl	80062c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01f      	beq.n	8004716 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046da:	f000 f977 	bl	80049cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	1e5a      	subs	r2, r3, #1
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00f      	beq.n	800470e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	3310      	adds	r3, #16
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fece 	bl	8005494 <xTaskRemoveFromEventList>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046fe:	4b3d      	ldr	r3, [pc, #244]	; (80047f4 <xQueueReceive+0x1bc>)
 8004700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800470e:	f001 fe09 	bl	8006324 <vPortExitCritical>
				return pdPASS;
 8004712:	2301      	movs	r3, #1
 8004714:	e069      	b.n	80047ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471c:	f001 fe02 	bl	8006324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004720:	2300      	movs	r3, #0
 8004722:	e062      	b.n	80047ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472a:	f107 0310 	add.w	r3, r7, #16
 800472e:	4618      	mov	r0, r3
 8004730:	f000 ff14 	bl	800555c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004738:	f001 fdf4 	bl	8006324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473c:	f000 fc86 	bl	800504c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004740:	f001 fdc0 	bl	80062c4 <vPortEnterCritical>
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800474a:	b25b      	sxtb	r3, r3
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004750:	d103      	bne.n	800475a <xQueueReceive+0x122>
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004760:	b25b      	sxtb	r3, r3
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004766:	d103      	bne.n	8004770 <xQueueReceive+0x138>
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004770:	f001 fdd8 	bl	8006324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004774:	1d3a      	adds	r2, r7, #4
 8004776:	f107 0310 	add.w	r3, r7, #16
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f000 ff03 	bl	8005588 <xTaskCheckForTimeOut>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d123      	bne.n	80047d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478a:	f000 f997 	bl	8004abc <prvIsQueueEmpty>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d017      	beq.n	80047c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	3324      	adds	r3, #36	; 0x24
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fe29 	bl	80053f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a4:	f000 f938 	bl	8004a18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047a8:	f000 fc5e 	bl	8005068 <xTaskResumeAll>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d189      	bne.n	80046c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <xQueueReceive+0x1bc>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	e780      	b.n	80046c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c6:	f000 f927 	bl	8004a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ca:	f000 fc4d 	bl	8005068 <xTaskResumeAll>
 80047ce:	e77a      	b.n	80046c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d2:	f000 f921 	bl	8004a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d6:	f000 fc47 	bl	8005068 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047dc:	f000 f96e 	bl	8004abc <prvIsQueueEmpty>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f43f af6f 	beq.w	80046c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3730      	adds	r7, #48	; 0x30
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08e      	sub	sp, #56	; 0x38
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	623b      	str	r3, [r7, #32]
}
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <xQueueReceiveFromISR+0x3a>
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <xQueueReceiveFromISR+0x3e>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <xQueueReceiveFromISR+0x40>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	61fb      	str	r3, [r7, #28]
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004852:	f001 fe19 	bl	8006488 <vPortValidateInterruptPriority>
	__asm volatile
 8004856:	f3ef 8211 	mrs	r2, BASEPRI
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	61ba      	str	r2, [r7, #24]
 800486c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800486e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02f      	beq.n	80048de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488c:	f000 f89e 	bl	80049cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	1e5a      	subs	r2, r3, #1
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a0:	d112      	bne.n	80048c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	3310      	adds	r3, #16
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fdf0 	bl	8005494 <xTaskRemoveFromEventList>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00e      	beq.n	80048d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e007      	b.n	80048d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80048c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048cc:	3301      	adds	r3, #1
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	b25a      	sxtb	r2, r3
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80048d8:	2301      	movs	r3, #1
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
 80048dc:	e001      	b.n	80048e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80048de:	2300      	movs	r3, #0
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f383 8811 	msr	BASEPRI, r3
}
 80048ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3738      	adds	r7, #56	; 0x38
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d14d      	bne.n	80049ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 ff92 	bl	800584c <xTaskPriorityDisinherit>
 8004928:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	e043      	b.n	80049ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d119      	bne.n	800496c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6858      	ldr	r0, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	461a      	mov	r2, r3
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	f002 fa4d 	bl	8006de2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	441a      	add	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d32b      	bcc.n	80049ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e026      	b.n	80049ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68d8      	ldr	r0, [r3, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	461a      	mov	r2, r3
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	f002 fa33 	bl	8006de2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	425b      	negs	r3, r3
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d207      	bcs.n	80049a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	425b      	negs	r3, r3
 80049a2:	441a      	add	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d105      	bne.n	80049ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049c2:	697b      	ldr	r3, [r7, #20]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	441a      	add	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d303      	bcc.n	8004a00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68d9      	ldr	r1, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6838      	ldr	r0, [r7, #0]
 8004a0c:	f002 f9e9 	bl	8006de2 <memcpy>
	}
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a20:	f001 fc50 	bl	80062c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a2c:	e011      	b.n	8004a52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d012      	beq.n	8004a5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3324      	adds	r3, #36	; 0x24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fd2a 	bl	8005494 <xTaskRemoveFromEventList>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a46:	f000 fe01 	bl	800564c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	dce9      	bgt.n	8004a2e <prvUnlockQueue+0x16>
 8004a5a:	e000      	b.n	8004a5e <prvUnlockQueue+0x46>
					break;
 8004a5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	22ff      	movs	r2, #255	; 0xff
 8004a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a66:	f001 fc5d 	bl	8006324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a6a:	f001 fc2b 	bl	80062c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a76:	e011      	b.n	8004a9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d012      	beq.n	8004aa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3310      	adds	r3, #16
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd05 	bl	8005494 <xTaskRemoveFromEventList>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a90:	f000 fddc 	bl	800564c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a94:	7bbb      	ldrb	r3, [r7, #14]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	dce9      	bgt.n	8004a78 <prvUnlockQueue+0x60>
 8004aa4:	e000      	b.n	8004aa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004aa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	22ff      	movs	r2, #255	; 0xff
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ab0:	f001 fc38 	bl	8006324 <vPortExitCritical>
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ac4:	f001 fbfe 	bl	80062c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e001      	b.n	8004ada <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ada:	f001 fc23 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004af0:	f001 fbe8 	bl	80062c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d102      	bne.n	8004b06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e001      	b.n	8004b0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b0a:	f001 fc0b 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e014      	b.n	8004b52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b28:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <vQueueAddToRegistry+0x50>)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b34:	490c      	ldr	r1, [pc, #48]	; (8004b68 <vQueueAddToRegistry+0x50>)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <vQueueAddToRegistry+0x50>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b4a:	e006      	b.n	8004b5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b07      	cmp	r3, #7
 8004b56:	d9e7      	bls.n	8004b28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000830 	.word	0x20000830

08004b6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b7c:	f001 fba2 	bl	80062c4 <vPortEnterCritical>
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b86:	b25b      	sxtb	r3, r3
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8c:	d103      	bne.n	8004b96 <vQueueWaitForMessageRestricted+0x2a>
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba2:	d103      	bne.n	8004bac <vQueueWaitForMessageRestricted+0x40>
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bac:	f001 fbba 	bl	8006324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fc3b 	bl	800543c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bc6:	6978      	ldr	r0, [r7, #20]
 8004bc8:	f7ff ff26 	bl	8004a18 <prvUnlockQueue>
	}
 8004bcc:	bf00      	nop
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	; 0x38
 8004bd8:	af04      	add	r7, sp, #16
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	623b      	str	r3, [r7, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xTaskCreateStatic+0x46>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	61fb      	str	r3, [r7, #28]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c1a:	235c      	movs	r3, #92	; 0x5c
 8004c1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b5c      	cmp	r3, #92	; 0x5c
 8004c22:	d00a      	beq.n	8004c3a <xTaskCreateStatic+0x66>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61bb      	str	r3, [r7, #24]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01e      	beq.n	8004c80 <xTaskCreateStatic+0xac>
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9303      	str	r3, [sp, #12]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	9302      	str	r3, [sp, #8]
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f850 	bl	8004d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c7a:	f000 f8dd 	bl	8004e38 <prvAddNewTaskToReadyList>
 8004c7e:	e001      	b.n	8004c84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c84:	697b      	ldr	r3, [r7, #20]
	}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3728      	adds	r7, #40	; 0x28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b08c      	sub	sp, #48	; 0x30
 8004c92:	af04      	add	r7, sp, #16
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fc30 	bl	8006508 <pvPortMalloc>
 8004ca8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cb0:	205c      	movs	r0, #92	; 0x5c
 8004cb2:	f001 fc29 	bl	8006508 <pvPortMalloc>
 8004cb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc4:	e005      	b.n	8004cd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cc6:	6978      	ldr	r0, [r7, #20]
 8004cc8:	f001 fcea 	bl	80066a0 <vPortFree>
 8004ccc:	e001      	b.n	8004cd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d017      	beq.n	8004d08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ce0:	88fa      	ldrh	r2, [r7, #6]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f80e 	bl	8004d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cfc:	69f8      	ldr	r0, [r7, #28]
 8004cfe:	f000 f89b 	bl	8004e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d02:	2301      	movs	r3, #1
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e002      	b.n	8004d0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	21a5      	movs	r1, #165	; 0xa5
 8004d32:	f001 ffdb 	bl	8006cec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d40:	3b01      	subs	r3, #1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	617b      	str	r3, [r7, #20]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01f      	beq.n	8004db6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e012      	b.n	8004da2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	7819      	ldrb	r1, [r3, #0]
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	3334      	adds	r3, #52	; 0x34
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2b0f      	cmp	r3, #15
 8004da6:	d9e9      	bls.n	8004d7c <prvInitialiseNewTask+0x64>
 8004da8:	e000      	b.n	8004dac <prvInitialiseNewTask+0x94>
			{
				break;
 8004daa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db4:	e003      	b.n	8004dbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	2b37      	cmp	r3, #55	; 0x37
 8004dc2:	d901      	bls.n	8004dc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dc4:	2337      	movs	r3, #55	; 0x37
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff f8be 	bl	8003f60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	3318      	adds	r3, #24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff f8b9 	bl	8003f60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	2200      	movs	r2, #0
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	69b8      	ldr	r0, [r7, #24]
 8004e18:	f001 f928 	bl	800606c <pxPortInitialiseStack>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e2e:	bf00      	nop
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e40:	f001 fa40 	bl	80062c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e44:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <prvAddNewTaskToReadyList+0xc4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	4a2c      	ldr	r2, [pc, #176]	; (8004efc <prvAddNewTaskToReadyList+0xc4>)
 8004e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e4e:	4b2c      	ldr	r3, [pc, #176]	; (8004f00 <prvAddNewTaskToReadyList+0xc8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e56:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <prvAddNewTaskToReadyList+0xc8>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e5c:	4b27      	ldr	r3, [pc, #156]	; (8004efc <prvAddNewTaskToReadyList+0xc4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d110      	bne.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e64:	f000 fc16 	bl	8005694 <prvInitialiseTaskLists>
 8004e68:	e00d      	b.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e6a:	4b26      	ldr	r3, [pc, #152]	; (8004f04 <prvAddNewTaskToReadyList+0xcc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e72:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <prvAddNewTaskToReadyList+0xc8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d802      	bhi.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e80:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <prvAddNewTaskToReadyList+0xc8>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <prvAddNewTaskToReadyList+0xd0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <prvAddNewTaskToReadyList+0xd0>)
 8004e8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e90:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <prvAddNewTaskToReadyList+0xd0>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <prvAddNewTaskToReadyList+0xd4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d903      	bls.n	8004eac <prvAddNewTaskToReadyList+0x74>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <prvAddNewTaskToReadyList+0xd4>)
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <prvAddNewTaskToReadyList+0xd8>)
 8004eba:	441a      	add	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7ff f859 	bl	8003f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ec8:	f001 fa2c 	bl	8006324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <prvAddNewTaskToReadyList+0xcc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <prvAddNewTaskToReadyList+0xc8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d207      	bcs.n	8004ef2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <prvAddNewTaskToReadyList+0xdc>)
 8004ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000d44 	.word	0x20000d44
 8004f00:	20000870 	.word	0x20000870
 8004f04:	20000d50 	.word	0x20000d50
 8004f08:	20000d60 	.word	0x20000d60
 8004f0c:	20000d4c 	.word	0x20000d4c
 8004f10:	20000874 	.word	0x20000874
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d017      	beq.n	8004f5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <vTaskDelay+0x60>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <vTaskDelay+0x30>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60bb      	str	r3, [r7, #8]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f48:	f000 f880 	bl	800504c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fcea 	bl	8005928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f54:	f000 f888 	bl	8005068 <xTaskResumeAll>
 8004f58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <vTaskDelay+0x64>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000d6c 	.word	0x20000d6c
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f8e:	463a      	mov	r2, r7
 8004f90:	1d39      	adds	r1, r7, #4
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe ff8e 	bl	8003eb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	9202      	str	r2, [sp, #8]
 8004fa4:	9301      	str	r3, [sp, #4]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	460a      	mov	r2, r1
 8004fae:	4921      	ldr	r1, [pc, #132]	; (8005034 <vTaskStartScheduler+0xb4>)
 8004fb0:	4821      	ldr	r0, [pc, #132]	; (8005038 <vTaskStartScheduler+0xb8>)
 8004fb2:	f7ff fe0f 	bl	8004bd4 <xTaskCreateStatic>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4a20      	ldr	r2, [pc, #128]	; (800503c <vTaskStartScheduler+0xbc>)
 8004fba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fbc:	4b1f      	ldr	r3, [pc, #124]	; (800503c <vTaskStartScheduler+0xbc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e001      	b.n	8004fce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d102      	bne.n	8004fda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fd4:	f000 fcfc 	bl	80059d0 <xTimerCreateTimerTask>
 8004fd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d116      	bne.n	800500e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	613b      	str	r3, [r7, #16]
}
 8004ff2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <vTaskStartScheduler+0xc0>)
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ffa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <vTaskStartScheduler+0xc4>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005002:	4b11      	ldr	r3, [pc, #68]	; (8005048 <vTaskStartScheduler+0xc8>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005008:	f001 f8ba 	bl	8006180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800500c:	e00e      	b.n	800502c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005014:	d10a      	bne.n	800502c <vTaskStartScheduler+0xac>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60fb      	str	r3, [r7, #12]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <vTaskStartScheduler+0xaa>
}
 800502c:	bf00      	nop
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	08007868 	.word	0x08007868
 8005038:	08005665 	.word	0x08005665
 800503c:	20000d68 	.word	0x20000d68
 8005040:	20000d64 	.word	0x20000d64
 8005044:	20000d50 	.word	0x20000d50
 8005048:	20000d48 	.word	0x20000d48

0800504c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <vTaskSuspendAll+0x18>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	4a03      	ldr	r2, [pc, #12]	; (8005064 <vTaskSuspendAll+0x18>)
 8005058:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000d6c 	.word	0x20000d6c

08005068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005076:	4b42      	ldr	r3, [pc, #264]	; (8005180 <xTaskResumeAll+0x118>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xTaskResumeAll+0x2c>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	603b      	str	r3, [r7, #0]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005094:	f001 f916 	bl	80062c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <xTaskResumeAll+0x118>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	4a38      	ldr	r2, [pc, #224]	; (8005180 <xTaskResumeAll+0x118>)
 80050a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a2:	4b37      	ldr	r3, [pc, #220]	; (8005180 <xTaskResumeAll+0x118>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d162      	bne.n	8005170 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <xTaskResumeAll+0x11c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d05e      	beq.n	8005170 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050b2:	e02f      	b.n	8005114 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b4:	4b34      	ldr	r3, [pc, #208]	; (8005188 <xTaskResumeAll+0x120>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3318      	adds	r3, #24
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe ffb7 	bl	8004034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe ffb2 	bl	8004034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4b2d      	ldr	r3, [pc, #180]	; (800518c <xTaskResumeAll+0x124>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d903      	bls.n	80050e4 <xTaskResumeAll+0x7c>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <xTaskResumeAll+0x124>)
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a27      	ldr	r2, [pc, #156]	; (8005190 <xTaskResumeAll+0x128>)
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fe ff3d 	bl	8003f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4b23      	ldr	r3, [pc, #140]	; (8005194 <xTaskResumeAll+0x12c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <xTaskResumeAll+0x130>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <xTaskResumeAll+0x120>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1cb      	bne.n	80050b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005122:	f000 fb55 	bl	80057d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <xTaskResumeAll+0x134>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005132:	f000 f847 	bl	80051c4 <xTaskIncrementTick>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800513c:	4b16      	ldr	r3, [pc, #88]	; (8005198 <xTaskResumeAll+0x130>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3b01      	subs	r3, #1
 8005146:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f1      	bne.n	8005132 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <xTaskResumeAll+0x134>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <xTaskResumeAll+0x130>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <xTaskResumeAll+0x138>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005170:	f001 f8d8 	bl	8006324 <vPortExitCritical>

	return xAlreadyYielded;
 8005174:	68bb      	ldr	r3, [r7, #8]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000d6c 	.word	0x20000d6c
 8005184:	20000d44 	.word	0x20000d44
 8005188:	20000d04 	.word	0x20000d04
 800518c:	20000d4c 	.word	0x20000d4c
 8005190:	20000874 	.word	0x20000874
 8005194:	20000870 	.word	0x20000870
 8005198:	20000d58 	.word	0x20000d58
 800519c:	20000d54 	.word	0x20000d54
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <xTaskGetTickCount+0x1c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051b0:	687b      	ldr	r3, [r7, #4]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000d48 	.word	0x20000d48

080051c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ce:	4b4f      	ldr	r3, [pc, #316]	; (800530c <xTaskIncrementTick+0x148>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 808f 	bne.w	80052f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051d8:	4b4d      	ldr	r3, [pc, #308]	; (8005310 <xTaskIncrementTick+0x14c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051e0:	4a4b      	ldr	r2, [pc, #300]	; (8005310 <xTaskIncrementTick+0x14c>)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d120      	bne.n	800522e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051ec:	4b49      	ldr	r3, [pc, #292]	; (8005314 <xTaskIncrementTick+0x150>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <xTaskIncrementTick+0x48>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	603b      	str	r3, [r7, #0]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <xTaskIncrementTick+0x46>
 800520c:	4b41      	ldr	r3, [pc, #260]	; (8005314 <xTaskIncrementTick+0x150>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	4b41      	ldr	r3, [pc, #260]	; (8005318 <xTaskIncrementTick+0x154>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a3f      	ldr	r2, [pc, #252]	; (8005314 <xTaskIncrementTick+0x150>)
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4a3f      	ldr	r2, [pc, #252]	; (8005318 <xTaskIncrementTick+0x154>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	4b3e      	ldr	r3, [pc, #248]	; (800531c <xTaskIncrementTick+0x158>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	4a3d      	ldr	r2, [pc, #244]	; (800531c <xTaskIncrementTick+0x158>)
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	f000 fad1 	bl	80057d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800522e:	4b3c      	ldr	r3, [pc, #240]	; (8005320 <xTaskIncrementTick+0x15c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	429a      	cmp	r2, r3
 8005236:	d349      	bcc.n	80052cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <xTaskIncrementTick+0x150>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005242:	4b37      	ldr	r3, [pc, #220]	; (8005320 <xTaskIncrementTick+0x15c>)
 8005244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005248:	601a      	str	r2, [r3, #0]
					break;
 800524a:	e03f      	b.n	80052cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524c:	4b31      	ldr	r3, [pc, #196]	; (8005314 <xTaskIncrementTick+0x150>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d203      	bcs.n	800526c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005264:	4a2e      	ldr	r2, [pc, #184]	; (8005320 <xTaskIncrementTick+0x15c>)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800526a:	e02f      	b.n	80052cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	3304      	adds	r3, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe fedf 	bl	8004034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	3318      	adds	r3, #24
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fed6 	bl	8004034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4b25      	ldr	r3, [pc, #148]	; (8005324 <xTaskIncrementTick+0x160>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d903      	bls.n	800529c <xTaskIncrementTick+0xd8>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <xTaskIncrementTick+0x160>)
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <xTaskIncrementTick+0x164>)
 80052aa:	441a      	add	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7fe fe61 	bl	8003f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	4b1b      	ldr	r3, [pc, #108]	; (800532c <xTaskIncrementTick+0x168>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d3b8      	bcc.n	8005238 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ca:	e7b5      	b.n	8005238 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <xTaskIncrementTick+0x168>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d2:	4915      	ldr	r1, [pc, #84]	; (8005328 <xTaskIncrementTick+0x164>)
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d901      	bls.n	80052e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80052e4:	2301      	movs	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <xTaskIncrementTick+0x16c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e004      	b.n	8005300 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <xTaskIncrementTick+0x170>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3301      	adds	r3, #1
 80052fc:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <xTaskIncrementTick+0x170>)
 80052fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005300:	697b      	ldr	r3, [r7, #20]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000d6c 	.word	0x20000d6c
 8005310:	20000d48 	.word	0x20000d48
 8005314:	20000cfc 	.word	0x20000cfc
 8005318:	20000d00 	.word	0x20000d00
 800531c:	20000d5c 	.word	0x20000d5c
 8005320:	20000d64 	.word	0x20000d64
 8005324:	20000d4c 	.word	0x20000d4c
 8005328:	20000874 	.word	0x20000874
 800532c:	20000870 	.word	0x20000870
 8005330:	20000d58 	.word	0x20000d58
 8005334:	20000d54 	.word	0x20000d54

08005338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800533e:	4b28      	ldr	r3, [pc, #160]	; (80053e0 <vTaskSwitchContext+0xa8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <vTaskSwitchContext+0xac>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800534c:	e041      	b.n	80053d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800534e:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <vTaskSwitchContext+0xac>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005354:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <vTaskSwitchContext+0xb0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e010      	b.n	800537e <vTaskSwitchContext+0x46>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10a      	bne.n	8005378 <vTaskSwitchContext+0x40>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	607b      	str	r3, [r7, #4]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <vTaskSwitchContext+0x3e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b01      	subs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	491b      	ldr	r1, [pc, #108]	; (80053ec <vTaskSwitchContext+0xb4>)
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0e4      	beq.n	800535c <vTaskSwitchContext+0x24>
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <vTaskSwitchContext+0xb4>)
 800539e:	4413      	add	r3, r2
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	3308      	adds	r3, #8
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d104      	bne.n	80053c2 <vTaskSwitchContext+0x8a>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <vTaskSwitchContext+0xb8>)
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <vTaskSwitchContext+0xb0>)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6013      	str	r3, [r2, #0]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000d6c 	.word	0x20000d6c
 80053e4:	20000d58 	.word	0x20000d58
 80053e8:	20000d4c 	.word	0x20000d4c
 80053ec:	20000874 	.word	0x20000874
 80053f0:	20000870 	.word	0x20000870

080053f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <vTaskPlaceOnEventList+0x44>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3318      	adds	r3, #24
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fe fdcd 	bl	8003fc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005428:	2101      	movs	r1, #1
 800542a:	6838      	ldr	r0, [r7, #0]
 800542c:	f000 fa7c 	bl	8005928 <prvAddCurrentTaskToDelayedList>
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000870 	.word	0x20000870

0800543c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <vTaskPlaceOnEventListRestricted+0x54>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3318      	adds	r3, #24
 800546a:	4619      	mov	r1, r3
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7fe fd84 	bl	8003f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800547c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	68b8      	ldr	r0, [r7, #8]
 8005482:	f000 fa51 	bl	8005928 <prvAddCurrentTaskToDelayedList>
	}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000870 	.word	0x20000870

08005494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	60fb      	str	r3, [r7, #12]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3318      	adds	r3, #24
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe fdb5 	bl	8004034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <xTaskRemoveFromEventList+0xb0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d11d      	bne.n	800550e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe fdac 	bl	8004034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <xTaskRemoveFromEventList+0xb4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d903      	bls.n	80054f0 <xTaskRemoveFromEventList+0x5c>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	4a16      	ldr	r2, [pc, #88]	; (8005548 <xTaskRemoveFromEventList+0xb4>)
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4a13      	ldr	r2, [pc, #76]	; (800554c <xTaskRemoveFromEventList+0xb8>)
 80054fe:	441a      	add	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f7fe fd37 	bl	8003f7a <vListInsertEnd>
 800550c:	e005      	b.n	800551a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3318      	adds	r3, #24
 8005512:	4619      	mov	r1, r3
 8005514:	480e      	ldr	r0, [pc, #56]	; (8005550 <xTaskRemoveFromEventList+0xbc>)
 8005516:	f7fe fd30 	bl	8003f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <xTaskRemoveFromEventList+0xc0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	429a      	cmp	r2, r3
 8005526:	d905      	bls.n	8005534 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <xTaskRemoveFromEventList+0xc4>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e001      	b.n	8005538 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005538:	697b      	ldr	r3, [r7, #20]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000d6c 	.word	0x20000d6c
 8005548:	20000d4c 	.word	0x20000d4c
 800554c:	20000874 	.word	0x20000874
 8005550:	20000d04 	.word	0x20000d04
 8005554:	20000870 	.word	0x20000870
 8005558:	20000d58 	.word	0x20000d58

0800555c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <vTaskInternalSetTimeOutState+0x24>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <vTaskInternalSetTimeOutState+0x28>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	605a      	str	r2, [r3, #4]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000d5c 	.word	0x20000d5c
 8005584:	20000d48 	.word	0x20000d48

08005588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	613b      	str	r3, [r7, #16]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	60fb      	str	r3, [r7, #12]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055ca:	f000 fe7b 	bl	80062c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055ce:	4b1d      	ldr	r3, [pc, #116]	; (8005644 <xTaskCheckForTimeOut+0xbc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e6:	d102      	bne.n	80055ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	e023      	b.n	8005636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <xTaskCheckForTimeOut+0xc0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d007      	beq.n	800560a <xTaskCheckForTimeOut+0x82>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	e015      	b.n	8005636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	429a      	cmp	r2, r3
 8005612:	d20b      	bcs.n	800562c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad2      	subs	r2, r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ff9b 	bl	800555c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	e004      	b.n	8005636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005632:	2301      	movs	r3, #1
 8005634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005636:	f000 fe75 	bl	8006324 <vPortExitCritical>

	return xReturn;
 800563a:	69fb      	ldr	r3, [r7, #28]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000d48 	.word	0x20000d48
 8005648:	20000d5c 	.word	0x20000d5c

0800564c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <vTaskMissedYield+0x14>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000d58 	.word	0x20000d58

08005664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800566c:	f000 f852 	bl	8005714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <prvIdleTask+0x28>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d9f9      	bls.n	800566c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <prvIdleTask+0x2c>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005688:	e7f0      	b.n	800566c <prvIdleTask+0x8>
 800568a:	bf00      	nop
 800568c:	20000874 	.word	0x20000874
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	e00c      	b.n	80056ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <prvInitialiseTaskLists+0x60>)
 80056ac:	4413      	add	r3, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fc36 	bl	8003f20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3301      	adds	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b37      	cmp	r3, #55	; 0x37
 80056be:	d9ef      	bls.n	80056a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056c0:	480d      	ldr	r0, [pc, #52]	; (80056f8 <prvInitialiseTaskLists+0x64>)
 80056c2:	f7fe fc2d 	bl	8003f20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056c6:	480d      	ldr	r0, [pc, #52]	; (80056fc <prvInitialiseTaskLists+0x68>)
 80056c8:	f7fe fc2a 	bl	8003f20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056cc:	480c      	ldr	r0, [pc, #48]	; (8005700 <prvInitialiseTaskLists+0x6c>)
 80056ce:	f7fe fc27 	bl	8003f20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056d2:	480c      	ldr	r0, [pc, #48]	; (8005704 <prvInitialiseTaskLists+0x70>)
 80056d4:	f7fe fc24 	bl	8003f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056d8:	480b      	ldr	r0, [pc, #44]	; (8005708 <prvInitialiseTaskLists+0x74>)
 80056da:	f7fe fc21 	bl	8003f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <prvInitialiseTaskLists+0x78>)
 80056e0:	4a05      	ldr	r2, [pc, #20]	; (80056f8 <prvInitialiseTaskLists+0x64>)
 80056e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <prvInitialiseTaskLists+0x7c>)
 80056e6:	4a05      	ldr	r2, [pc, #20]	; (80056fc <prvInitialiseTaskLists+0x68>)
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000874 	.word	0x20000874
 80056f8:	20000cd4 	.word	0x20000cd4
 80056fc:	20000ce8 	.word	0x20000ce8
 8005700:	20000d04 	.word	0x20000d04
 8005704:	20000d18 	.word	0x20000d18
 8005708:	20000d30 	.word	0x20000d30
 800570c:	20000cfc 	.word	0x20000cfc
 8005710:	20000d00 	.word	0x20000d00

08005714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800571a:	e019      	b.n	8005750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800571c:	f000 fdd2 	bl	80062c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005720:	4b10      	ldr	r3, [pc, #64]	; (8005764 <prvCheckTasksWaitingTermination+0x50>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe fc81 	bl	8004034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <prvCheckTasksWaitingTermination+0x54>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3b01      	subs	r3, #1
 8005738:	4a0b      	ldr	r2, [pc, #44]	; (8005768 <prvCheckTasksWaitingTermination+0x54>)
 800573a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <prvCheckTasksWaitingTermination+0x58>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3b01      	subs	r3, #1
 8005742:	4a0a      	ldr	r2, [pc, #40]	; (800576c <prvCheckTasksWaitingTermination+0x58>)
 8005744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005746:	f000 fded 	bl	8006324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f810 	bl	8005770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <prvCheckTasksWaitingTermination+0x58>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e1      	bne.n	800571c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000d18 	.word	0x20000d18
 8005768:	20000d44 	.word	0x20000d44
 800576c:	20000d2c 	.word	0x20000d2c

08005770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800577e:	2b00      	cmp	r3, #0
 8005780:	d108      	bne.n	8005794 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	4618      	mov	r0, r3
 8005788:	f000 ff8a 	bl	80066a0 <vPortFree>
				vPortFree( pxTCB );
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 ff87 	bl	80066a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005792:	e018      	b.n	80057c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800579a:	2b01      	cmp	r3, #1
 800579c:	d103      	bne.n	80057a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 ff7e 	bl	80066a0 <vPortFree>
	}
 80057a4:	e00f      	b.n	80057c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d00a      	beq.n	80057c6 <prvDeleteTCB+0x56>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60fb      	str	r3, [r7, #12]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <prvDeleteTCB+0x54>
	}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <prvResetNextTaskUnblockTime+0x38>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <prvResetNextTaskUnblockTime+0x3c>)
 80057e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057e8:	e008      	b.n	80057fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <prvResetNextTaskUnblockTime+0x38>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4a04      	ldr	r2, [pc, #16]	; (800580c <prvResetNextTaskUnblockTime+0x3c>)
 80057fa:	6013      	str	r3, [r2, #0]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20000cfc 	.word	0x20000cfc
 800580c:	20000d64 	.word	0x20000d64

08005810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <xTaskGetSchedulerState+0x34>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800581e:	2301      	movs	r3, #1
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	e008      	b.n	8005836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <xTaskGetSchedulerState+0x38>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800582c:	2302      	movs	r3, #2
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	e001      	b.n	8005836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005836:	687b      	ldr	r3, [r7, #4]
	}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	20000d50 	.word	0x20000d50
 8005848:	20000d6c 	.word	0x20000d6c

0800584c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d056      	beq.n	8005910 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005862:	4b2e      	ldr	r3, [pc, #184]	; (800591c <xTaskPriorityDisinherit+0xd0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	429a      	cmp	r2, r3
 800586a:	d00a      	beq.n	8005882 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60fb      	str	r3, [r7, #12]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	60bb      	str	r3, [r7, #8]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	1e5a      	subs	r2, r3, #1
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d02c      	beq.n	8005910 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d128      	bne.n	8005910 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fbb6 	bl	8004034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <xTaskPriorityDisinherit+0xd4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d903      	bls.n	80058f0 <xTaskPriorityDisinherit+0xa4>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4a0c      	ldr	r2, [pc, #48]	; (8005920 <xTaskPriorityDisinherit+0xd4>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4a09      	ldr	r2, [pc, #36]	; (8005924 <xTaskPriorityDisinherit+0xd8>)
 80058fe:	441a      	add	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7fe fb37 	bl	8003f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005910:	697b      	ldr	r3, [r7, #20]
	}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000870 	.word	0x20000870
 8005920:	20000d4c 	.word	0x20000d4c
 8005924:	20000874 	.word	0x20000874

08005928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005932:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005938:	4b20      	ldr	r3, [pc, #128]	; (80059bc <prvAddCurrentTaskToDelayedList+0x94>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3304      	adds	r3, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fb78 	bl	8004034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594a:	d10a      	bne.n	8005962 <prvAddCurrentTaskToDelayedList+0x3a>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005952:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <prvAddCurrentTaskToDelayedList+0x94>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4819      	ldr	r0, [pc, #100]	; (80059c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800595c:	f7fe fb0d 	bl	8003f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005960:	e026      	b.n	80059b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <prvAddCurrentTaskToDelayedList+0x94>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	429a      	cmp	r2, r3
 8005978:	d209      	bcs.n	800598e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <prvAddCurrentTaskToDelayedList+0x94>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f7fe fb1b 	bl	8003fc2 <vListInsert>
}
 800598c:	e010      	b.n	80059b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800598e:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <prvAddCurrentTaskToDelayedList+0x94>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f7fe fb11 	bl	8003fc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d202      	bcs.n	80059b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059aa:	4a08      	ldr	r2, [pc, #32]	; (80059cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6013      	str	r3, [r2, #0]
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000d48 	.word	0x20000d48
 80059bc:	20000870 	.word	0x20000870
 80059c0:	20000d30 	.word	0x20000d30
 80059c4:	20000d00 	.word	0x20000d00
 80059c8:	20000cfc 	.word	0x20000cfc
 80059cc:	20000d64 	.word	0x20000d64

080059d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059da:	f000 fb07 	bl	8005fec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059de:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <xTimerCreateTimerTask+0x80>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d021      	beq.n	8005a2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059ee:	1d3a      	adds	r2, r7, #4
 80059f0:	f107 0108 	add.w	r1, r7, #8
 80059f4:	f107 030c 	add.w	r3, r7, #12
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fa77 	bl	8003eec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	9202      	str	r2, [sp, #8]
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	2302      	movs	r3, #2
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	460a      	mov	r2, r1
 8005a10:	4910      	ldr	r1, [pc, #64]	; (8005a54 <xTimerCreateTimerTask+0x84>)
 8005a12:	4811      	ldr	r0, [pc, #68]	; (8005a58 <xTimerCreateTimerTask+0x88>)
 8005a14:	f7ff f8de 	bl	8004bd4 <xTaskCreateStatic>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4a10      	ldr	r2, [pc, #64]	; (8005a5c <xTimerCreateTimerTask+0x8c>)
 8005a1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <xTimerCreateTimerTask+0x8c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a26:	2301      	movs	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	613b      	str	r3, [r7, #16]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a46:	697b      	ldr	r3, [r7, #20]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000da0 	.word	0x20000da0
 8005a54:	08007870 	.word	0x08007870
 8005a58:	08005b95 	.word	0x08005b95
 8005a5c:	20000da4 	.word	0x20000da4

08005a60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	623b      	str	r3, [r7, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <xTimerGenericCommand+0x98>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02a      	beq.n	8005aec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	dc18      	bgt.n	8005ada <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005aa8:	f7ff feb2 	bl	8005810 <xTaskGetSchedulerState>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d109      	bne.n	8005ac6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ab2:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <xTimerGenericCommand+0x98>)
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f107 0110 	add.w	r1, r7, #16
 8005aba:	2300      	movs	r3, #0
 8005abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005abe:	f7fe fc21 	bl	8004304 <xQueueGenericSend>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ac4:	e012      	b.n	8005aec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <xTimerGenericCommand+0x98>)
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	f107 0110 	add.w	r1, r7, #16
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f7fe fc17 	bl	8004304 <xQueueGenericSend>
 8005ad6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ad8:	e008      	b.n	8005aec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <xTimerGenericCommand+0x98>)
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	f107 0110 	add.w	r1, r7, #16
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	f7fe fd0b 	bl	8004500 <xQueueGenericSendFromISR>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000da0 	.word	0x20000da0

08005afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b06:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <prvProcessExpiredTimer+0x94>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fa8d 	bl	8004034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d022      	beq.n	8005b6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	18d1      	adds	r1, r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	f000 f8d1 	bl	8005cdc <prvInsertTimerInActiveList>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01f      	beq.n	8005b80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b40:	2300      	movs	r3, #0
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	2100      	movs	r1, #0
 8005b4a:	6978      	ldr	r0, [r7, #20]
 8005b4c:	f7ff ff88 	bl	8005a60 <xTimerGenericCommand>
 8005b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d113      	bne.n	8005b80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	60fb      	str	r3, [r7, #12]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	6978      	ldr	r0, [r7, #20]
 8005b86:	4798      	blx	r3
}
 8005b88:	bf00      	nop
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000d98 	.word	0x20000d98

08005b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b9c:	f107 0308 	add.w	r3, r7, #8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f857 	bl	8005c54 <prvGetNextExpireTime>
 8005ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f803 	bl	8005bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005bb2:	f000 f8d5 	bl	8005d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bb6:	e7f1      	b.n	8005b9c <prvTimerTask+0x8>

08005bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bc2:	f7ff fa43 	bl	800504c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f866 	bl	8005c9c <prvSampleTimeNow>
 8005bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d130      	bne.n	8005c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <prvProcessTimerOrBlockTask+0x3c>
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d806      	bhi.n	8005bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005be6:	f7ff fa3f 	bl	8005068 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff85 	bl	8005afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bf2:	e024      	b.n	8005c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <prvProcessTimerOrBlockTask+0x90>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <prvProcessTimerOrBlockTask+0x50>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <prvProcessTimerOrBlockTask+0x52>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <prvProcessTimerOrBlockTask+0x94>)
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f7fe ffa7 	bl	8004b6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c1e:	f7ff fa23 	bl	8005068 <xTaskResumeAll>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <prvProcessTimerOrBlockTask+0x98>)
 8005c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	f3bf 8f6f 	isb	sy
}
 8005c38:	e001      	b.n	8005c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c3a:	f7ff fa15 	bl	8005068 <xTaskResumeAll>
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000d9c 	.word	0x20000d9c
 8005c4c:	20000da0 	.word	0x20000da0
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <prvGetNextExpireTime+0x44>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <prvGetNextExpireTime+0x16>
 8005c66:	2201      	movs	r2, #1
 8005c68:	e000      	b.n	8005c6c <prvGetNextExpireTime+0x18>
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c78:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <prvGetNextExpireTime+0x44>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e001      	b.n	8005c88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c88:	68fb      	ldr	r3, [r7, #12]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000d98 	.word	0x20000d98

08005c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ca4:	f7ff fa7e 	bl	80051a4 <xTaskGetTickCount>
 8005ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <prvSampleTimeNow+0x3c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d205      	bcs.n	8005cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cb4:	f000 f936 	bl	8005f24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e002      	b.n	8005cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cc6:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <prvSampleTimeNow+0x3c>)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000da8 	.word	0x20000da8

08005cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d812      	bhi.n	8005d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e01b      	b.n	8005d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <prvInsertTimerInActiveList+0x7c>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fe f94e 	bl	8003fc2 <vListInsert>
 8005d26:	e012      	b.n	8005d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d206      	bcs.n	8005d3e <prvInsertTimerInActiveList+0x62>
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e007      	b.n	8005d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <prvInsertTimerInActiveList+0x80>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f7fe f93a 	bl	8003fc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000d9c 	.word	0x20000d9c
 8005d5c:	20000d98 	.word	0x20000d98

08005d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d66:	e0ca      	b.n	8005efe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da18      	bge.n	8005da0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	3304      	adds	r3, #4
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	61fb      	str	r3, [r7, #28]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d96:	6850      	ldr	r0, [r2, #4]
 8005d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9a:	6892      	ldr	r2, [r2, #8]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f2c0 80ab 	blt.w	8005efe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	3304      	adds	r3, #4
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe f93b 	bl	8004034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff ff6b 	bl	8005c9c <prvSampleTimeNow>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b09      	cmp	r3, #9
 8005dcc:	f200 8096 	bhi.w	8005efc <prvProcessReceivedCommands+0x19c>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <prvProcessReceivedCommands+0x78>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e01 	.word	0x08005e01
 8005de4:	08005e75 	.word	0x08005e75
 8005de8:	08005e89 	.word	0x08005e89
 8005dec:	08005ed3 	.word	0x08005ed3
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005e01 	.word	0x08005e01
 8005df8:	08005e75 	.word	0x08005e75
 8005dfc:	08005e89 	.word	0x08005e89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	18d1      	adds	r1, r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e20:	f7ff ff5c 	bl	8005cdc <prvInsertTimerInActiveList>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d069      	beq.n	8005efe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d05e      	beq.n	8005efe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	441a      	add	r2, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2100      	movs	r1, #0
 8005e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e52:	f7ff fe05 	bl	8005a60 <xTimerGenericCommand>
 8005e56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d14f      	bne.n	8005efe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	61bb      	str	r3, [r7, #24]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e86:	e03a      	b.n	8005efe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	617b      	str	r3, [r7, #20]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	18d1      	adds	r1, r2, r3
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ecc:	f7ff ff06 	bl	8005cdc <prvInsertTimerInActiveList>
					break;
 8005ed0:	e015      	b.n	8005efe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee2:	f000 fbdd 	bl	80066a0 <vPortFree>
 8005ee6:	e00a      	b.n	8005efe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005efa:	e000      	b.n	8005efe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <prvProcessReceivedCommands+0x1c0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	1d39      	adds	r1, r7, #4
 8005f04:	2200      	movs	r2, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fb96 	bl	8004638 <xQueueReceive>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f47f af2a 	bne.w	8005d68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	3730      	adds	r7, #48	; 0x30
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000da0 	.word	0x20000da0

08005f24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f2a:	e048      	b.n	8005fbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <prvSwitchTimerLists+0xc0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f36:	4b2b      	ldr	r3, [pc, #172]	; (8005fe4 <prvSwitchTimerLists+0xc0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fe f875 	bl	8004034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d02e      	beq.n	8005fbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d90e      	bls.n	8005f90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f7e:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <prvSwitchTimerLists+0xc0>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f7fe f81a 	bl	8003fc2 <vListInsert>
 8005f8e:	e016      	b.n	8005fbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f90:	2300      	movs	r3, #0
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	2100      	movs	r1, #0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff fd60 	bl	8005a60 <xTimerGenericCommand>
 8005fa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	603b      	str	r3, [r7, #0]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <prvSwitchTimerLists+0xc0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1b1      	bne.n	8005f2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <prvSwitchTimerLists+0xc0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <prvSwitchTimerLists+0xc4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <prvSwitchTimerLists+0xc0>)
 8005fd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fd6:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <prvSwitchTimerLists+0xc4>)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	6013      	str	r3, [r2, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000d98 	.word	0x20000d98
 8005fe8:	20000d9c 	.word	0x20000d9c

08005fec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ff2:	f000 f967 	bl	80062c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ff6:	4b15      	ldr	r3, [pc, #84]	; (800604c <prvCheckForValidListAndQueue+0x60>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d120      	bne.n	8006040 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ffe:	4814      	ldr	r0, [pc, #80]	; (8006050 <prvCheckForValidListAndQueue+0x64>)
 8006000:	f7fd ff8e 	bl	8003f20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006004:	4813      	ldr	r0, [pc, #76]	; (8006054 <prvCheckForValidListAndQueue+0x68>)
 8006006:	f7fd ff8b 	bl	8003f20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <prvCheckForValidListAndQueue+0x6c>)
 800600c:	4a10      	ldr	r2, [pc, #64]	; (8006050 <prvCheckForValidListAndQueue+0x64>)
 800600e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <prvCheckForValidListAndQueue+0x70>)
 8006012:	4a10      	ldr	r2, [pc, #64]	; (8006054 <prvCheckForValidListAndQueue+0x68>)
 8006014:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	4b11      	ldr	r3, [pc, #68]	; (8006060 <prvCheckForValidListAndQueue+0x74>)
 800601c:	4a11      	ldr	r2, [pc, #68]	; (8006064 <prvCheckForValidListAndQueue+0x78>)
 800601e:	2110      	movs	r1, #16
 8006020:	200a      	movs	r0, #10
 8006022:	f7fe f899 	bl	8004158 <xQueueGenericCreateStatic>
 8006026:	4603      	mov	r3, r0
 8006028:	4a08      	ldr	r2, [pc, #32]	; (800604c <prvCheckForValidListAndQueue+0x60>)
 800602a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <prvCheckForValidListAndQueue+0x60>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <prvCheckForValidListAndQueue+0x60>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	490b      	ldr	r1, [pc, #44]	; (8006068 <prvCheckForValidListAndQueue+0x7c>)
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fd6c 	bl	8004b18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006040:	f000 f970 	bl	8006324 <vPortExitCritical>
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000da0 	.word	0x20000da0
 8006050:	20000d70 	.word	0x20000d70
 8006054:	20000d84 	.word	0x20000d84
 8006058:	20000d98 	.word	0x20000d98
 800605c:	20000d9c 	.word	0x20000d9c
 8006060:	20000e4c 	.word	0x20000e4c
 8006064:	20000dac 	.word	0x20000dac
 8006068:	08007878 	.word	0x08007878

0800606c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3b04      	subs	r3, #4
 800607c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b04      	subs	r3, #4
 800608a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3b04      	subs	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800609c:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <pxPortInitialiseStack+0x64>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3b14      	subs	r3, #20
 80060a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f06f 0202 	mvn.w	r2, #2
 80060ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3b20      	subs	r3, #32
 80060c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	080060d5 	.word	0x080060d5

080060d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <prvTaskExitError+0x54>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e6:	d00a      	beq.n	80060fe <prvTaskExitError+0x2a>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <prvTaskExitError+0x28>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60bb      	str	r3, [r7, #8]
}
 8006110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006112:	bf00      	nop
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0fc      	beq.n	8006114 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	2000000c 	.word	0x2000000c
 800612c:	00000000 	.word	0x00000000

08006130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <pxCurrentTCBConst2>)
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	f380 8809 	msr	PSP, r0
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8811 	msr	BASEPRI, r0
 800614a:	4770      	bx	lr
 800614c:	f3af 8000 	nop.w

08006150 <pxCurrentTCBConst2>:
 8006150:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop

08006158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006158:	4808      	ldr	r0, [pc, #32]	; (800617c <prvPortStartFirstTask+0x24>)
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	6800      	ldr	r0, [r0, #0]
 800615e:	f380 8808 	msr	MSP, r0
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8814 	msr	CONTROL, r0
 800616a:	b662      	cpsie	i
 800616c:	b661      	cpsie	f
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	df00      	svc	0
 8006178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800617a:	bf00      	nop
 800617c:	e000ed08 	.word	0xe000ed08

08006180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006186:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <xPortStartScheduler+0x120>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a46      	ldr	r2, [pc, #280]	; (80062a4 <xPortStartScheduler+0x124>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10a      	bne.n	80061a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061a6:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <xPortStartScheduler+0x120>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3f      	ldr	r2, [pc, #252]	; (80062a8 <xPortStartScheduler+0x128>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10a      	bne.n	80061c6 <xPortStartScheduler+0x46>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60fb      	str	r3, [r7, #12]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <xPortStartScheduler+0x12c>)
 80061c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <xPortStartScheduler+0x130>)
 80061ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061ee:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <xPortStartScheduler+0x134>)
 80061f0:	2207      	movs	r2, #7
 80061f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061f4:	e009      	b.n	800620a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061f6:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <xPortStartScheduler+0x134>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <xPortStartScheduler+0x134>)
 80061fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d0ef      	beq.n	80061f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006216:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <xPortStartScheduler+0x134>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	2b04      	cmp	r3, #4
 8006220:	d00a      	beq.n	8006238 <xPortStartScheduler+0xb8>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60bb      	str	r3, [r7, #8]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <xPortStartScheduler+0x134>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <xPortStartScheduler+0x134>)
 8006240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006242:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <xPortStartScheduler+0x134>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <xPortStartScheduler+0x134>)
 800624c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006256:	4b18      	ldr	r3, [pc, #96]	; (80062b8 <xPortStartScheduler+0x138>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <xPortStartScheduler+0x138>)
 800625c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <xPortStartScheduler+0x138>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <xPortStartScheduler+0x138>)
 8006268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800626c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800626e:	f000 f8dd 	bl	800642c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006272:	4b12      	ldr	r3, [pc, #72]	; (80062bc <xPortStartScheduler+0x13c>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006278:	f000 f8fc 	bl	8006474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800627c:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <xPortStartScheduler+0x140>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <xPortStartScheduler+0x140>)
 8006282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006288:	f7ff ff66 	bl	8006158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800628c:	f7ff f854 	bl	8005338 <vTaskSwitchContext>
	prvTaskExitError();
 8006290:	f7ff ff20 	bl	80060d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	e000ed00 	.word	0xe000ed00
 80062a4:	410fc271 	.word	0x410fc271
 80062a8:	410fc270 	.word	0x410fc270
 80062ac:	e000e400 	.word	0xe000e400
 80062b0:	20000e9c 	.word	0x20000e9c
 80062b4:	20000ea0 	.word	0x20000ea0
 80062b8:	e000ed20 	.word	0xe000ed20
 80062bc:	2000000c 	.word	0x2000000c
 80062c0:	e000ef34 	.word	0xe000ef34

080062c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	607b      	str	r3, [r7, #4]
}
 80062dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <vPortEnterCritical+0x58>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <vPortEnterCritical+0x58>)
 80062e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <vPortEnterCritical+0x58>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10f      	bne.n	8006310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <vPortEnterCritical+0x5c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <vPortEnterCritical+0x4c>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	603b      	str	r3, [r7, #0]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <vPortEnterCritical+0x4a>
	}
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	2000000c 	.word	0x2000000c
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <vPortExitCritical+0x50>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <vPortExitCritical+0x24>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	607b      	str	r3, [r7, #4]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <vPortExitCritical+0x50>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3b01      	subs	r3, #1
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <vPortExitCritical+0x50>)
 8006350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <vPortExitCritical+0x42>
 800635a:	2300      	movs	r3, #0
 800635c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f383 8811 	msr	BASEPRI, r3
}
 8006364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	2000000c 	.word	0x2000000c
	...

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f01e 0f10 	tst.w	lr, #16
 8006390:	bf08      	it	eq
 8006392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	6010      	str	r0, [r2, #0]
 800639c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063a4:	f380 8811 	msr	BASEPRI, r0
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f7fe ffc2 	bl	8005338 <vTaskSwitchContext>
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f380 8811 	msr	BASEPRI, r0
 80063bc:	bc09      	pop	{r0, r3}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c6:	f01e 0f10 	tst.w	lr, #16
 80063ca:	bf08      	it	eq
 80063cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063d0:	f380 8809 	msr	PSP, r0
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst>:
 80063e0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006402:	f7fe fedf 	bl	80051c4 <xTaskIncrementTick>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <xPortSysTickHandler+0x40>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <vPortSetupTimerInterrupt+0x38>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <vPortSetupTimerInterrupt+0x3c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <vPortSetupTimerInterrupt+0x40>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <vPortSetupTimerInterrupt+0x44>)
 800644a:	3b01      	subs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644e:	4b04      	ldr	r3, [pc, #16]	; (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	e000e010 	.word	0xe000e010
 8006464:	e000e018 	.word	0xe000e018
 8006468:	20000000 	.word	0x20000000
 800646c:	10624dd3 	.word	0x10624dd3
 8006470:	e000e014 	.word	0xe000e014

08006474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006484 <vPortEnableVFP+0x10>
 8006478:	6801      	ldr	r1, [r0, #0]
 800647a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800647e:	6001      	str	r1, [r0, #0]
 8006480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006482:	bf00      	nop
 8006484:	e000ed88 	.word	0xe000ed88

08006488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b0f      	cmp	r3, #15
 8006498:	d914      	bls.n	80064c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <vPortValidateInterruptPriority+0x70>)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064a4:	4b15      	ldr	r3, [pc, #84]	; (80064fc <vPortValidateInterruptPriority+0x74>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	7afa      	ldrb	r2, [r7, #11]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20a      	bcs.n	80064c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064c4:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <vPortValidateInterruptPriority+0x78>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <vPortValidateInterruptPriority+0x7c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d90a      	bls.n	80064ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	603b      	str	r3, [r7, #0]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <vPortValidateInterruptPriority+0x60>
	}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	e000e3f0 	.word	0xe000e3f0
 80064fc:	20000e9c 	.word	0x20000e9c
 8006500:	e000ed0c 	.word	0xe000ed0c
 8006504:	20000ea0 	.word	0x20000ea0

08006508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006514:	f7fe fd9a 	bl	800504c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006518:	4b5b      	ldr	r3, [pc, #364]	; (8006688 <pvPortMalloc+0x180>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006520:	f000 f920 	bl	8006764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <pvPortMalloc+0x184>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8093 	bne.w	8006658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01d      	beq.n	8006574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006538:	2208      	movs	r2, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d014      	beq.n	8006574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	3308      	adds	r3, #8
 8006552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <pvPortMalloc+0x6c>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	617b      	str	r3, [r7, #20]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d06e      	beq.n	8006658 <pvPortMalloc+0x150>
 800657a:	4b45      	ldr	r3, [pc, #276]	; (8006690 <pvPortMalloc+0x188>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	d869      	bhi.n	8006658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006584:	4b43      	ldr	r3, [pc, #268]	; (8006694 <pvPortMalloc+0x18c>)
 8006586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006588:	4b42      	ldr	r3, [pc, #264]	; (8006694 <pvPortMalloc+0x18c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800658e:	e004      	b.n	800659a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d903      	bls.n	80065ac <pvPortMalloc+0xa4>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f1      	bne.n	8006590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065ac:	4b36      	ldr	r3, [pc, #216]	; (8006688 <pvPortMalloc+0x180>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d050      	beq.n	8006658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2208      	movs	r2, #8
 80065bc:	4413      	add	r3, r2
 80065be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	2308      	movs	r3, #8
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d91f      	bls.n	8006618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <pvPortMalloc+0xf8>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	613b      	str	r3, [r7, #16]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006612:	69b8      	ldr	r0, [r7, #24]
 8006614:	f000 f908 	bl	8006828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <pvPortMalloc+0x188>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <pvPortMalloc+0x188>)
 8006624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <pvPortMalloc+0x188>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <pvPortMalloc+0x190>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d203      	bcs.n	800663a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006632:	4b17      	ldr	r3, [pc, #92]	; (8006690 <pvPortMalloc+0x188>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a18      	ldr	r2, [pc, #96]	; (8006698 <pvPortMalloc+0x190>)
 8006638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <pvPortMalloc+0x184>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	431a      	orrs	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <pvPortMalloc+0x194>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	4a11      	ldr	r2, [pc, #68]	; (800669c <pvPortMalloc+0x194>)
 8006656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006658:	f7fe fd06 	bl	8005068 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <pvPortMalloc+0x174>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	60fb      	str	r3, [r7, #12]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <pvPortMalloc+0x172>
	return pvReturn;
 800667c:	69fb      	ldr	r3, [r7, #28]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20001a64 	.word	0x20001a64
 800668c:	20001a78 	.word	0x20001a78
 8006690:	20001a68 	.word	0x20001a68
 8006694:	20001a5c 	.word	0x20001a5c
 8006698:	20001a6c 	.word	0x20001a6c
 800669c:	20001a70 	.word	0x20001a70

080066a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d04d      	beq.n	800674e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066b2:	2308      	movs	r3, #8
 80066b4:	425b      	negs	r3, r3
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	4b24      	ldr	r3, [pc, #144]	; (8006758 <vPortFree+0xb8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4013      	ands	r3, r2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <vPortFree+0x44>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60fb      	str	r3, [r7, #12]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <vPortFree+0x62>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	60bb      	str	r3, [r7, #8]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <vPortFree+0xb8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11a      	bne.n	800674e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <vPortFree+0xb8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006728:	f7fe fc90 	bl	800504c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <vPortFree+0xbc>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4413      	add	r3, r2
 8006736:	4a09      	ldr	r2, [pc, #36]	; (800675c <vPortFree+0xbc>)
 8006738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800673a:	6938      	ldr	r0, [r7, #16]
 800673c:	f000 f874 	bl	8006828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <vPortFree+0xc0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	4a06      	ldr	r2, [pc, #24]	; (8006760 <vPortFree+0xc0>)
 8006748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800674a:	f7fe fc8d 	bl	8005068 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800674e:	bf00      	nop
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20001a78 	.word	0x20001a78
 800675c:	20001a68 	.word	0x20001a68
 8006760:	20001a74 	.word	0x20001a74

08006764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800676a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800676e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006770:	4b27      	ldr	r3, [pc, #156]	; (8006810 <prvHeapInit+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3307      	adds	r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <prvHeapInit+0xac>)
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <prvHeapInit+0xb0>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067a2:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <prvHeapInit+0xb0>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067b0:	2208      	movs	r2, #8
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0307 	bic.w	r3, r3, #7
 80067be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <prvHeapInit+0xb4>)
 80067c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <prvHeapInit+0xb4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <prvHeapInit+0xb4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvHeapInit+0xb4>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <prvHeapInit+0xb8>)
 80067f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <prvHeapInit+0xbc>)
 80067fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <prvHeapInit+0xc0>)
 80067fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	20000ea4 	.word	0x20000ea4
 8006814:	20001a5c 	.word	0x20001a5c
 8006818:	20001a64 	.word	0x20001a64
 800681c:	20001a6c 	.word	0x20001a6c
 8006820:	20001a68 	.word	0x20001a68
 8006824:	20001a78 	.word	0x20001a78

08006828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006830:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <prvInsertBlockIntoFreeList+0xac>)
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e002      	b.n	800683c <prvInsertBlockIntoFreeList+0x14>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d8f7      	bhi.n	8006836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4413      	add	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d108      	bne.n	800686a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	441a      	add	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d118      	bne.n	80068b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d00d      	beq.n	80068a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e008      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e003      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d002      	beq.n	80068c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20001a5c 	.word	0x20001a5c
 80068d8:	20001a64 	.word	0x20001a64

080068dc <std>:
 80068dc:	2300      	movs	r3, #0
 80068de:	b510      	push	{r4, lr}
 80068e0:	4604      	mov	r4, r0
 80068e2:	e9c0 3300 	strd	r3, r3, [r0]
 80068e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ea:	6083      	str	r3, [r0, #8]
 80068ec:	8181      	strh	r1, [r0, #12]
 80068ee:	6643      	str	r3, [r0, #100]	; 0x64
 80068f0:	81c2      	strh	r2, [r0, #14]
 80068f2:	6183      	str	r3, [r0, #24]
 80068f4:	4619      	mov	r1, r3
 80068f6:	2208      	movs	r2, #8
 80068f8:	305c      	adds	r0, #92	; 0x5c
 80068fa:	f000 f9f7 	bl	8006cec <memset>
 80068fe:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <std+0x58>)
 8006900:	6263      	str	r3, [r4, #36]	; 0x24
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <std+0x5c>)
 8006904:	62a3      	str	r3, [r4, #40]	; 0x28
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <std+0x60>)
 8006908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <std+0x64>)
 800690c:	6323      	str	r3, [r4, #48]	; 0x30
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <std+0x68>)
 8006910:	6224      	str	r4, [r4, #32]
 8006912:	429c      	cmp	r4, r3
 8006914:	d006      	beq.n	8006924 <std+0x48>
 8006916:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800691a:	4294      	cmp	r4, r2
 800691c:	d002      	beq.n	8006924 <std+0x48>
 800691e:	33d0      	adds	r3, #208	; 0xd0
 8006920:	429c      	cmp	r4, r3
 8006922:	d105      	bne.n	8006930 <std+0x54>
 8006924:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692c:	f000 ba56 	b.w	8006ddc <__retarget_lock_init_recursive>
 8006930:	bd10      	pop	{r4, pc}
 8006932:	bf00      	nop
 8006934:	08006b3d 	.word	0x08006b3d
 8006938:	08006b5f 	.word	0x08006b5f
 800693c:	08006b97 	.word	0x08006b97
 8006940:	08006bbb 	.word	0x08006bbb
 8006944:	20001a7c 	.word	0x20001a7c

08006948 <stdio_exit_handler>:
 8006948:	4a02      	ldr	r2, [pc, #8]	; (8006954 <stdio_exit_handler+0xc>)
 800694a:	4903      	ldr	r1, [pc, #12]	; (8006958 <stdio_exit_handler+0x10>)
 800694c:	4803      	ldr	r0, [pc, #12]	; (800695c <stdio_exit_handler+0x14>)
 800694e:	f000 b869 	b.w	8006a24 <_fwalk_sglue>
 8006952:	bf00      	nop
 8006954:	20000010 	.word	0x20000010
 8006958:	080076a5 	.word	0x080076a5
 800695c:	2000001c 	.word	0x2000001c

08006960 <cleanup_stdio>:
 8006960:	6841      	ldr	r1, [r0, #4]
 8006962:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <cleanup_stdio+0x34>)
 8006964:	4299      	cmp	r1, r3
 8006966:	b510      	push	{r4, lr}
 8006968:	4604      	mov	r4, r0
 800696a:	d001      	beq.n	8006970 <cleanup_stdio+0x10>
 800696c:	f000 fe9a 	bl	80076a4 <_fflush_r>
 8006970:	68a1      	ldr	r1, [r4, #8]
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <cleanup_stdio+0x38>)
 8006974:	4299      	cmp	r1, r3
 8006976:	d002      	beq.n	800697e <cleanup_stdio+0x1e>
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fe93 	bl	80076a4 <_fflush_r>
 800697e:	68e1      	ldr	r1, [r4, #12]
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <cleanup_stdio+0x3c>)
 8006982:	4299      	cmp	r1, r3
 8006984:	d004      	beq.n	8006990 <cleanup_stdio+0x30>
 8006986:	4620      	mov	r0, r4
 8006988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698c:	f000 be8a 	b.w	80076a4 <_fflush_r>
 8006990:	bd10      	pop	{r4, pc}
 8006992:	bf00      	nop
 8006994:	20001a7c 	.word	0x20001a7c
 8006998:	20001ae4 	.word	0x20001ae4
 800699c:	20001b4c 	.word	0x20001b4c

080069a0 <global_stdio_init.part.0>:
 80069a0:	b510      	push	{r4, lr}
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <global_stdio_init.part.0+0x30>)
 80069a4:	4c0b      	ldr	r4, [pc, #44]	; (80069d4 <global_stdio_init.part.0+0x34>)
 80069a6:	4a0c      	ldr	r2, [pc, #48]	; (80069d8 <global_stdio_init.part.0+0x38>)
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	4620      	mov	r0, r4
 80069ac:	2200      	movs	r2, #0
 80069ae:	2104      	movs	r1, #4
 80069b0:	f7ff ff94 	bl	80068dc <std>
 80069b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069b8:	2201      	movs	r2, #1
 80069ba:	2109      	movs	r1, #9
 80069bc:	f7ff ff8e 	bl	80068dc <std>
 80069c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80069c4:	2202      	movs	r2, #2
 80069c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ca:	2112      	movs	r1, #18
 80069cc:	f7ff bf86 	b.w	80068dc <std>
 80069d0:	20001bb4 	.word	0x20001bb4
 80069d4:	20001a7c 	.word	0x20001a7c
 80069d8:	08006949 	.word	0x08006949

080069dc <__sfp_lock_acquire>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__sfp_lock_acquire+0x8>)
 80069de:	f000 b9fe 	b.w	8006dde <__retarget_lock_acquire_recursive>
 80069e2:	bf00      	nop
 80069e4:	20001bbd 	.word	0x20001bbd

080069e8 <__sfp_lock_release>:
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <__sfp_lock_release+0x8>)
 80069ea:	f000 b9f9 	b.w	8006de0 <__retarget_lock_release_recursive>
 80069ee:	bf00      	nop
 80069f0:	20001bbd 	.word	0x20001bbd

080069f4 <__sinit>:
 80069f4:	b510      	push	{r4, lr}
 80069f6:	4604      	mov	r4, r0
 80069f8:	f7ff fff0 	bl	80069dc <__sfp_lock_acquire>
 80069fc:	6a23      	ldr	r3, [r4, #32]
 80069fe:	b11b      	cbz	r3, 8006a08 <__sinit+0x14>
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a04:	f7ff bff0 	b.w	80069e8 <__sfp_lock_release>
 8006a08:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <__sinit+0x28>)
 8006a0a:	6223      	str	r3, [r4, #32]
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <__sinit+0x2c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f5      	bne.n	8006a00 <__sinit+0xc>
 8006a14:	f7ff ffc4 	bl	80069a0 <global_stdio_init.part.0>
 8006a18:	e7f2      	b.n	8006a00 <__sinit+0xc>
 8006a1a:	bf00      	nop
 8006a1c:	08006961 	.word	0x08006961
 8006a20:	20001bb4 	.word	0x20001bb4

08006a24 <_fwalk_sglue>:
 8006a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a28:	4607      	mov	r7, r0
 8006a2a:	4688      	mov	r8, r1
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	2600      	movs	r6, #0
 8006a30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a34:	f1b9 0901 	subs.w	r9, r9, #1
 8006a38:	d505      	bpl.n	8006a46 <_fwalk_sglue+0x22>
 8006a3a:	6824      	ldr	r4, [r4, #0]
 8006a3c:	2c00      	cmp	r4, #0
 8006a3e:	d1f7      	bne.n	8006a30 <_fwalk_sglue+0xc>
 8006a40:	4630      	mov	r0, r6
 8006a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d907      	bls.n	8006a5c <_fwalk_sglue+0x38>
 8006a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a50:	3301      	adds	r3, #1
 8006a52:	d003      	beq.n	8006a5c <_fwalk_sglue+0x38>
 8006a54:	4629      	mov	r1, r5
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c0      	blx	r8
 8006a5a:	4306      	orrs	r6, r0
 8006a5c:	3568      	adds	r5, #104	; 0x68
 8006a5e:	e7e9      	b.n	8006a34 <_fwalk_sglue+0x10>

08006a60 <iprintf>:
 8006a60:	b40f      	push	{r0, r1, r2, r3}
 8006a62:	b507      	push	{r0, r1, r2, lr}
 8006a64:	4906      	ldr	r1, [pc, #24]	; (8006a80 <iprintf+0x20>)
 8006a66:	ab04      	add	r3, sp, #16
 8006a68:	6808      	ldr	r0, [r1, #0]
 8006a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6e:	6881      	ldr	r1, [r0, #8]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	f000 fae7 	bl	8007044 <_vfiprintf_r>
 8006a76:	b003      	add	sp, #12
 8006a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a7c:	b004      	add	sp, #16
 8006a7e:	4770      	bx	lr
 8006a80:	20000068 	.word	0x20000068

08006a84 <_puts_r>:
 8006a84:	6a03      	ldr	r3, [r0, #32]
 8006a86:	b570      	push	{r4, r5, r6, lr}
 8006a88:	6884      	ldr	r4, [r0, #8]
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	460e      	mov	r6, r1
 8006a8e:	b90b      	cbnz	r3, 8006a94 <_puts_r+0x10>
 8006a90:	f7ff ffb0 	bl	80069f4 <__sinit>
 8006a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a96:	07db      	lsls	r3, r3, #31
 8006a98:	d405      	bmi.n	8006aa6 <_puts_r+0x22>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	0598      	lsls	r0, r3, #22
 8006a9e:	d402      	bmi.n	8006aa6 <_puts_r+0x22>
 8006aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa2:	f000 f99c 	bl	8006dde <__retarget_lock_acquire_recursive>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	0719      	lsls	r1, r3, #28
 8006aaa:	d513      	bpl.n	8006ad4 <_puts_r+0x50>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	b18b      	cbz	r3, 8006ad4 <_puts_r+0x50>
 8006ab0:	3e01      	subs	r6, #1
 8006ab2:	68a3      	ldr	r3, [r4, #8]
 8006ab4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	60a3      	str	r3, [r4, #8]
 8006abc:	b9e9      	cbnz	r1, 8006afa <_puts_r+0x76>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	da2e      	bge.n	8006b20 <_puts_r+0x9c>
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	210a      	movs	r1, #10
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 f87b 	bl	8006bc2 <__swbuf_r>
 8006acc:	3001      	adds	r0, #1
 8006ace:	d007      	beq.n	8006ae0 <_puts_r+0x5c>
 8006ad0:	250a      	movs	r5, #10
 8006ad2:	e007      	b.n	8006ae4 <_puts_r+0x60>
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 f8b0 	bl	8006c3c <__swsetup_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d0e7      	beq.n	8006ab0 <_puts_r+0x2c>
 8006ae0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae6:	07da      	lsls	r2, r3, #31
 8006ae8:	d405      	bmi.n	8006af6 <_puts_r+0x72>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	059b      	lsls	r3, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_puts_r+0x72>
 8006af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af2:	f000 f975 	bl	8006de0 <__retarget_lock_release_recursive>
 8006af6:	4628      	mov	r0, r5
 8006af8:	bd70      	pop	{r4, r5, r6, pc}
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da04      	bge.n	8006b08 <_puts_r+0x84>
 8006afe:	69a2      	ldr	r2, [r4, #24]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	dc06      	bgt.n	8006b12 <_puts_r+0x8e>
 8006b04:	290a      	cmp	r1, #10
 8006b06:	d004      	beq.n	8006b12 <_puts_r+0x8e>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	6022      	str	r2, [r4, #0]
 8006b0e:	7019      	strb	r1, [r3, #0]
 8006b10:	e7cf      	b.n	8006ab2 <_puts_r+0x2e>
 8006b12:	4622      	mov	r2, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 f854 	bl	8006bc2 <__swbuf_r>
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d1c9      	bne.n	8006ab2 <_puts_r+0x2e>
 8006b1e:	e7df      	b.n	8006ae0 <_puts_r+0x5c>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	250a      	movs	r5, #10
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	6022      	str	r2, [r4, #0]
 8006b28:	701d      	strb	r5, [r3, #0]
 8006b2a:	e7db      	b.n	8006ae4 <_puts_r+0x60>

08006b2c <puts>:
 8006b2c:	4b02      	ldr	r3, [pc, #8]	; (8006b38 <puts+0xc>)
 8006b2e:	4601      	mov	r1, r0
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	f7ff bfa7 	b.w	8006a84 <_puts_r>
 8006b36:	bf00      	nop
 8006b38:	20000068 	.word	0x20000068

08006b3c <__sread>:
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	460c      	mov	r4, r1
 8006b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b44:	f000 f8fc 	bl	8006d40 <_read_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	bfab      	itete	ge
 8006b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b50:	181b      	addge	r3, r3, r0
 8006b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b56:	bfac      	ite	ge
 8006b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b5a:	81a3      	strhlt	r3, [r4, #12]
 8006b5c:	bd10      	pop	{r4, pc}

08006b5e <__swrite>:
 8006b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b62:	461f      	mov	r7, r3
 8006b64:	898b      	ldrh	r3, [r1, #12]
 8006b66:	05db      	lsls	r3, r3, #23
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	4616      	mov	r6, r2
 8006b6e:	d505      	bpl.n	8006b7c <__swrite+0x1e>
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	2302      	movs	r3, #2
 8006b76:	2200      	movs	r2, #0
 8006b78:	f000 f8d0 	bl	8006d1c <_lseek_r>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	4632      	mov	r2, r6
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b92:	f000 b8e7 	b.w	8006d64 <_write_r>

08006b96 <__sseek>:
 8006b96:	b510      	push	{r4, lr}
 8006b98:	460c      	mov	r4, r1
 8006b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9e:	f000 f8bd 	bl	8006d1c <_lseek_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	bf15      	itete	ne
 8006ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bb2:	81a3      	strheq	r3, [r4, #12]
 8006bb4:	bf18      	it	ne
 8006bb6:	81a3      	strhne	r3, [r4, #12]
 8006bb8:	bd10      	pop	{r4, pc}

08006bba <__sclose>:
 8006bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbe:	f000 b89d 	b.w	8006cfc <_close_r>

08006bc2 <__swbuf_r>:
 8006bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc4:	460e      	mov	r6, r1
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	4605      	mov	r5, r0
 8006bca:	b118      	cbz	r0, 8006bd4 <__swbuf_r+0x12>
 8006bcc:	6a03      	ldr	r3, [r0, #32]
 8006bce:	b90b      	cbnz	r3, 8006bd4 <__swbuf_r+0x12>
 8006bd0:	f7ff ff10 	bl	80069f4 <__sinit>
 8006bd4:	69a3      	ldr	r3, [r4, #24]
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	071a      	lsls	r2, r3, #28
 8006bdc:	d525      	bpl.n	8006c2a <__swbuf_r+0x68>
 8006bde:	6923      	ldr	r3, [r4, #16]
 8006be0:	b31b      	cbz	r3, 8006c2a <__swbuf_r+0x68>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	6922      	ldr	r2, [r4, #16]
 8006be6:	1a98      	subs	r0, r3, r2
 8006be8:	6963      	ldr	r3, [r4, #20]
 8006bea:	b2f6      	uxtb	r6, r6
 8006bec:	4283      	cmp	r3, r0
 8006bee:	4637      	mov	r7, r6
 8006bf0:	dc04      	bgt.n	8006bfc <__swbuf_r+0x3a>
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f000 fd55 	bl	80076a4 <_fflush_r>
 8006bfa:	b9e0      	cbnz	r0, 8006c36 <__swbuf_r+0x74>
 8006bfc:	68a3      	ldr	r3, [r4, #8]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	6022      	str	r2, [r4, #0]
 8006c08:	701e      	strb	r6, [r3, #0]
 8006c0a:	6962      	ldr	r2, [r4, #20]
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d004      	beq.n	8006c1c <__swbuf_r+0x5a>
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	07db      	lsls	r3, r3, #31
 8006c16:	d506      	bpl.n	8006c26 <__swbuf_r+0x64>
 8006c18:	2e0a      	cmp	r6, #10
 8006c1a:	d104      	bne.n	8006c26 <__swbuf_r+0x64>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fd40 	bl	80076a4 <_fflush_r>
 8006c24:	b938      	cbnz	r0, 8006c36 <__swbuf_r+0x74>
 8006c26:	4638      	mov	r0, r7
 8006c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f805 	bl	8006c3c <__swsetup_r>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0d5      	beq.n	8006be2 <__swbuf_r+0x20>
 8006c36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c3a:	e7f4      	b.n	8006c26 <__swbuf_r+0x64>

08006c3c <__swsetup_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ce8 <__swsetup_r+0xac>)
 8006c40:	4605      	mov	r5, r0
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	460c      	mov	r4, r1
 8006c46:	b118      	cbz	r0, 8006c50 <__swsetup_r+0x14>
 8006c48:	6a03      	ldr	r3, [r0, #32]
 8006c4a:	b90b      	cbnz	r3, 8006c50 <__swsetup_r+0x14>
 8006c4c:	f7ff fed2 	bl	80069f4 <__sinit>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c56:	0718      	lsls	r0, r3, #28
 8006c58:	d422      	bmi.n	8006ca0 <__swsetup_r+0x64>
 8006c5a:	06d9      	lsls	r1, r3, #27
 8006c5c:	d407      	bmi.n	8006c6e <__swsetup_r+0x32>
 8006c5e:	2309      	movs	r3, #9
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c66:	81a3      	strh	r3, [r4, #12]
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c6c:	e034      	b.n	8006cd8 <__swsetup_r+0x9c>
 8006c6e:	0758      	lsls	r0, r3, #29
 8006c70:	d512      	bpl.n	8006c98 <__swsetup_r+0x5c>
 8006c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c74:	b141      	cbz	r1, 8006c88 <__swsetup_r+0x4c>
 8006c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	d002      	beq.n	8006c84 <__swsetup_r+0x48>
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 f8be 	bl	8006e00 <_free_r>
 8006c84:	2300      	movs	r3, #0
 8006c86:	6363      	str	r3, [r4, #52]	; 0x34
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	2300      	movs	r3, #0
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f043 0308 	orr.w	r3, r3, #8
 8006c9e:	81a3      	strh	r3, [r4, #12]
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	b94b      	cbnz	r3, 8006cb8 <__swsetup_r+0x7c>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cae:	d003      	beq.n	8006cb8 <__swsetup_r+0x7c>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 fd44 	bl	8007740 <__smakebuf_r>
 8006cb8:	89a0      	ldrh	r0, [r4, #12]
 8006cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cbe:	f010 0301 	ands.w	r3, r0, #1
 8006cc2:	d00a      	beq.n	8006cda <__swsetup_r+0x9e>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60a3      	str	r3, [r4, #8]
 8006cc8:	6963      	ldr	r3, [r4, #20]
 8006cca:	425b      	negs	r3, r3
 8006ccc:	61a3      	str	r3, [r4, #24]
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	b943      	cbnz	r3, 8006ce4 <__swsetup_r+0xa8>
 8006cd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cd6:	d1c4      	bne.n	8006c62 <__swsetup_r+0x26>
 8006cd8:	bd38      	pop	{r3, r4, r5, pc}
 8006cda:	0781      	lsls	r1, r0, #30
 8006cdc:	bf58      	it	pl
 8006cde:	6963      	ldrpl	r3, [r4, #20]
 8006ce0:	60a3      	str	r3, [r4, #8]
 8006ce2:	e7f4      	b.n	8006cce <__swsetup_r+0x92>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	e7f7      	b.n	8006cd8 <__swsetup_r+0x9c>
 8006ce8:	20000068 	.word	0x20000068

08006cec <memset>:
 8006cec:	4402      	add	r2, r0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d100      	bne.n	8006cf6 <memset+0xa>
 8006cf4:	4770      	bx	lr
 8006cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfa:	e7f9      	b.n	8006cf0 <memset+0x4>

08006cfc <_close_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d06      	ldr	r5, [pc, #24]	; (8006d18 <_close_r+0x1c>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	602b      	str	r3, [r5, #0]
 8006d08:	f7f9 fef8 	bl	8000afc <_close>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_close_r+0x1a>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_close_r+0x1a>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	20001bb8 	.word	0x20001bb8

08006d1c <_lseek_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	; (8006d3c <_lseek_r+0x20>)
 8006d20:	4604      	mov	r4, r0
 8006d22:	4608      	mov	r0, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	602a      	str	r2, [r5, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f7f9 ff0d 	bl	8000b4a <_lseek>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_lseek_r+0x1e>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_lseek_r+0x1e>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20001bb8 	.word	0x20001bb8

08006d40 <_read_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d07      	ldr	r5, [pc, #28]	; (8006d60 <_read_r+0x20>)
 8006d44:	4604      	mov	r4, r0
 8006d46:	4608      	mov	r0, r1
 8006d48:	4611      	mov	r1, r2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	602a      	str	r2, [r5, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f7f9 fea0 	bl	8000a94 <_read>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_read_r+0x1e>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_read_r+0x1e>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	20001bb8 	.word	0x20001bb8

08006d64 <_write_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d07      	ldr	r5, [pc, #28]	; (8006d84 <_write_r+0x20>)
 8006d68:	4604      	mov	r4, r0
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	602a      	str	r2, [r5, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f7f9 feac 	bl	8000ad0 <_write>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_write_r+0x1e>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_write_r+0x1e>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	20001bb8 	.word	0x20001bb8

08006d88 <__errno>:
 8006d88:	4b01      	ldr	r3, [pc, #4]	; (8006d90 <__errno+0x8>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000068 	.word	0x20000068

08006d94 <__libc_init_array>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4d0d      	ldr	r5, [pc, #52]	; (8006dcc <__libc_init_array+0x38>)
 8006d98:	4c0d      	ldr	r4, [pc, #52]	; (8006dd0 <__libc_init_array+0x3c>)
 8006d9a:	1b64      	subs	r4, r4, r5
 8006d9c:	10a4      	asrs	r4, r4, #2
 8006d9e:	2600      	movs	r6, #0
 8006da0:	42a6      	cmp	r6, r4
 8006da2:	d109      	bne.n	8006db8 <__libc_init_array+0x24>
 8006da4:	4d0b      	ldr	r5, [pc, #44]	; (8006dd4 <__libc_init_array+0x40>)
 8006da6:	4c0c      	ldr	r4, [pc, #48]	; (8006dd8 <__libc_init_array+0x44>)
 8006da8:	f000 fd38 	bl	800781c <_init>
 8006dac:	1b64      	subs	r4, r4, r5
 8006dae:	10a4      	asrs	r4, r4, #2
 8006db0:	2600      	movs	r6, #0
 8006db2:	42a6      	cmp	r6, r4
 8006db4:	d105      	bne.n	8006dc2 <__libc_init_array+0x2e>
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbc:	4798      	blx	r3
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	e7ee      	b.n	8006da0 <__libc_init_array+0xc>
 8006dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc6:	4798      	blx	r3
 8006dc8:	3601      	adds	r6, #1
 8006dca:	e7f2      	b.n	8006db2 <__libc_init_array+0x1e>
 8006dcc:	08007964 	.word	0x08007964
 8006dd0:	08007964 	.word	0x08007964
 8006dd4:	08007964 	.word	0x08007964
 8006dd8:	08007968 	.word	0x08007968

08006ddc <__retarget_lock_init_recursive>:
 8006ddc:	4770      	bx	lr

08006dde <__retarget_lock_acquire_recursive>:
 8006dde:	4770      	bx	lr

08006de0 <__retarget_lock_release_recursive>:
 8006de0:	4770      	bx	lr

08006de2 <memcpy>:
 8006de2:	440a      	add	r2, r1
 8006de4:	4291      	cmp	r1, r2
 8006de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006dea:	d100      	bne.n	8006dee <memcpy+0xc>
 8006dec:	4770      	bx	lr
 8006dee:	b510      	push	{r4, lr}
 8006df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006df8:	4291      	cmp	r1, r2
 8006dfa:	d1f9      	bne.n	8006df0 <memcpy+0xe>
 8006dfc:	bd10      	pop	{r4, pc}
	...

08006e00 <_free_r>:
 8006e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e02:	2900      	cmp	r1, #0
 8006e04:	d044      	beq.n	8006e90 <_free_r+0x90>
 8006e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0a:	9001      	str	r0, [sp, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e12:	bfb8      	it	lt
 8006e14:	18e4      	addlt	r4, r4, r3
 8006e16:	f000 f8df 	bl	8006fd8 <__malloc_lock>
 8006e1a:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <_free_r+0x94>)
 8006e1c:	9801      	ldr	r0, [sp, #4]
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	b933      	cbnz	r3, 8006e30 <_free_r+0x30>
 8006e22:	6063      	str	r3, [r4, #4]
 8006e24:	6014      	str	r4, [r2, #0]
 8006e26:	b003      	add	sp, #12
 8006e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e2c:	f000 b8da 	b.w	8006fe4 <__malloc_unlock>
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d908      	bls.n	8006e46 <_free_r+0x46>
 8006e34:	6825      	ldr	r5, [r4, #0]
 8006e36:	1961      	adds	r1, r4, r5
 8006e38:	428b      	cmp	r3, r1
 8006e3a:	bf01      	itttt	eq
 8006e3c:	6819      	ldreq	r1, [r3, #0]
 8006e3e:	685b      	ldreq	r3, [r3, #4]
 8006e40:	1949      	addeq	r1, r1, r5
 8006e42:	6021      	streq	r1, [r4, #0]
 8006e44:	e7ed      	b.n	8006e22 <_free_r+0x22>
 8006e46:	461a      	mov	r2, r3
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	b10b      	cbz	r3, 8006e50 <_free_r+0x50>
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d9fa      	bls.n	8006e46 <_free_r+0x46>
 8006e50:	6811      	ldr	r1, [r2, #0]
 8006e52:	1855      	adds	r5, r2, r1
 8006e54:	42a5      	cmp	r5, r4
 8006e56:	d10b      	bne.n	8006e70 <_free_r+0x70>
 8006e58:	6824      	ldr	r4, [r4, #0]
 8006e5a:	4421      	add	r1, r4
 8006e5c:	1854      	adds	r4, r2, r1
 8006e5e:	42a3      	cmp	r3, r4
 8006e60:	6011      	str	r1, [r2, #0]
 8006e62:	d1e0      	bne.n	8006e26 <_free_r+0x26>
 8006e64:	681c      	ldr	r4, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	6053      	str	r3, [r2, #4]
 8006e6a:	440c      	add	r4, r1
 8006e6c:	6014      	str	r4, [r2, #0]
 8006e6e:	e7da      	b.n	8006e26 <_free_r+0x26>
 8006e70:	d902      	bls.n	8006e78 <_free_r+0x78>
 8006e72:	230c      	movs	r3, #12
 8006e74:	6003      	str	r3, [r0, #0]
 8006e76:	e7d6      	b.n	8006e26 <_free_r+0x26>
 8006e78:	6825      	ldr	r5, [r4, #0]
 8006e7a:	1961      	adds	r1, r4, r5
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	bf04      	itt	eq
 8006e80:	6819      	ldreq	r1, [r3, #0]
 8006e82:	685b      	ldreq	r3, [r3, #4]
 8006e84:	6063      	str	r3, [r4, #4]
 8006e86:	bf04      	itt	eq
 8006e88:	1949      	addeq	r1, r1, r5
 8006e8a:	6021      	streq	r1, [r4, #0]
 8006e8c:	6054      	str	r4, [r2, #4]
 8006e8e:	e7ca      	b.n	8006e26 <_free_r+0x26>
 8006e90:	b003      	add	sp, #12
 8006e92:	bd30      	pop	{r4, r5, pc}
 8006e94:	20001bc0 	.word	0x20001bc0

08006e98 <sbrk_aligned>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4e0e      	ldr	r6, [pc, #56]	; (8006ed4 <sbrk_aligned+0x3c>)
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	6831      	ldr	r1, [r6, #0]
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	b911      	cbnz	r1, 8006eaa <sbrk_aligned+0x12>
 8006ea4:	f000 fcaa 	bl	80077fc <_sbrk_r>
 8006ea8:	6030      	str	r0, [r6, #0]
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 fca5 	bl	80077fc <_sbrk_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d00a      	beq.n	8006ecc <sbrk_aligned+0x34>
 8006eb6:	1cc4      	adds	r4, r0, #3
 8006eb8:	f024 0403 	bic.w	r4, r4, #3
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d007      	beq.n	8006ed0 <sbrk_aligned+0x38>
 8006ec0:	1a21      	subs	r1, r4, r0
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 fc9a 	bl	80077fc <_sbrk_r>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d101      	bne.n	8006ed0 <sbrk_aligned+0x38>
 8006ecc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	20001bc4 	.word	0x20001bc4

08006ed8 <_malloc_r>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	1ccd      	adds	r5, r1, #3
 8006ede:	f025 0503 	bic.w	r5, r5, #3
 8006ee2:	3508      	adds	r5, #8
 8006ee4:	2d0c      	cmp	r5, #12
 8006ee6:	bf38      	it	cc
 8006ee8:	250c      	movcc	r5, #12
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	4607      	mov	r7, r0
 8006eee:	db01      	blt.n	8006ef4 <_malloc_r+0x1c>
 8006ef0:	42a9      	cmp	r1, r5
 8006ef2:	d905      	bls.n	8006f00 <_malloc_r+0x28>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	2600      	movs	r6, #0
 8006efa:	4630      	mov	r0, r6
 8006efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fd4 <_malloc_r+0xfc>
 8006f04:	f000 f868 	bl	8006fd8 <__malloc_lock>
 8006f08:	f8d8 3000 	ldr.w	r3, [r8]
 8006f0c:	461c      	mov	r4, r3
 8006f0e:	bb5c      	cbnz	r4, 8006f68 <_malloc_r+0x90>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4638      	mov	r0, r7
 8006f14:	f7ff ffc0 	bl	8006e98 <sbrk_aligned>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	d155      	bne.n	8006fca <_malloc_r+0xf2>
 8006f1e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f22:	4626      	mov	r6, r4
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	d145      	bne.n	8006fb4 <_malloc_r+0xdc>
 8006f28:	2c00      	cmp	r4, #0
 8006f2a:	d048      	beq.n	8006fbe <_malloc_r+0xe6>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4638      	mov	r0, r7
 8006f32:	eb04 0903 	add.w	r9, r4, r3
 8006f36:	f000 fc61 	bl	80077fc <_sbrk_r>
 8006f3a:	4581      	cmp	r9, r0
 8006f3c:	d13f      	bne.n	8006fbe <_malloc_r+0xe6>
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	1a6d      	subs	r5, r5, r1
 8006f42:	4629      	mov	r1, r5
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ffa7 	bl	8006e98 <sbrk_aligned>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d037      	beq.n	8006fbe <_malloc_r+0xe6>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	442b      	add	r3, r5
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	f8d8 3000 	ldr.w	r3, [r8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d038      	beq.n	8006fce <_malloc_r+0xf6>
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	42a2      	cmp	r2, r4
 8006f60:	d12b      	bne.n	8006fba <_malloc_r+0xe2>
 8006f62:	2200      	movs	r2, #0
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	e00f      	b.n	8006f88 <_malloc_r+0xb0>
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	1b52      	subs	r2, r2, r5
 8006f6c:	d41f      	bmi.n	8006fae <_malloc_r+0xd6>
 8006f6e:	2a0b      	cmp	r2, #11
 8006f70:	d917      	bls.n	8006fa2 <_malloc_r+0xca>
 8006f72:	1961      	adds	r1, r4, r5
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	6025      	str	r5, [r4, #0]
 8006f78:	bf18      	it	ne
 8006f7a:	6059      	strne	r1, [r3, #4]
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	bf08      	it	eq
 8006f80:	f8c8 1000 	streq.w	r1, [r8]
 8006f84:	5162      	str	r2, [r4, r5]
 8006f86:	604b      	str	r3, [r1, #4]
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f104 060b 	add.w	r6, r4, #11
 8006f8e:	f000 f829 	bl	8006fe4 <__malloc_unlock>
 8006f92:	f026 0607 	bic.w	r6, r6, #7
 8006f96:	1d23      	adds	r3, r4, #4
 8006f98:	1af2      	subs	r2, r6, r3
 8006f9a:	d0ae      	beq.n	8006efa <_malloc_r+0x22>
 8006f9c:	1b9b      	subs	r3, r3, r6
 8006f9e:	50a3      	str	r3, [r4, r2]
 8006fa0:	e7ab      	b.n	8006efa <_malloc_r+0x22>
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	6862      	ldr	r2, [r4, #4]
 8006fa6:	d1dd      	bne.n	8006f64 <_malloc_r+0x8c>
 8006fa8:	f8c8 2000 	str.w	r2, [r8]
 8006fac:	e7ec      	b.n	8006f88 <_malloc_r+0xb0>
 8006fae:	4623      	mov	r3, r4
 8006fb0:	6864      	ldr	r4, [r4, #4]
 8006fb2:	e7ac      	b.n	8006f0e <_malloc_r+0x36>
 8006fb4:	4634      	mov	r4, r6
 8006fb6:	6876      	ldr	r6, [r6, #4]
 8006fb8:	e7b4      	b.n	8006f24 <_malloc_r+0x4c>
 8006fba:	4613      	mov	r3, r2
 8006fbc:	e7cc      	b.n	8006f58 <_malloc_r+0x80>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f000 f80e 	bl	8006fe4 <__malloc_unlock>
 8006fc8:	e797      	b.n	8006efa <_malloc_r+0x22>
 8006fca:	6025      	str	r5, [r4, #0]
 8006fcc:	e7dc      	b.n	8006f88 <_malloc_r+0xb0>
 8006fce:	605b      	str	r3, [r3, #4]
 8006fd0:	deff      	udf	#255	; 0xff
 8006fd2:	bf00      	nop
 8006fd4:	20001bc0 	.word	0x20001bc0

08006fd8 <__malloc_lock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_lock+0x8>)
 8006fda:	f7ff bf00 	b.w	8006dde <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20001bbc 	.word	0x20001bbc

08006fe4 <__malloc_unlock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_unlock+0x8>)
 8006fe6:	f7ff befb 	b.w	8006de0 <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	20001bbc 	.word	0x20001bbc

08006ff0 <__sfputc_r>:
 8006ff0:	6893      	ldr	r3, [r2, #8]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	b410      	push	{r4}
 8006ff8:	6093      	str	r3, [r2, #8]
 8006ffa:	da08      	bge.n	800700e <__sfputc_r+0x1e>
 8006ffc:	6994      	ldr	r4, [r2, #24]
 8006ffe:	42a3      	cmp	r3, r4
 8007000:	db01      	blt.n	8007006 <__sfputc_r+0x16>
 8007002:	290a      	cmp	r1, #10
 8007004:	d103      	bne.n	800700e <__sfputc_r+0x1e>
 8007006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800700a:	f7ff bdda 	b.w	8006bc2 <__swbuf_r>
 800700e:	6813      	ldr	r3, [r2, #0]
 8007010:	1c58      	adds	r0, r3, #1
 8007012:	6010      	str	r0, [r2, #0]
 8007014:	7019      	strb	r1, [r3, #0]
 8007016:	4608      	mov	r0, r1
 8007018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800701c:	4770      	bx	lr

0800701e <__sfputs_r>:
 800701e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007020:	4606      	mov	r6, r0
 8007022:	460f      	mov	r7, r1
 8007024:	4614      	mov	r4, r2
 8007026:	18d5      	adds	r5, r2, r3
 8007028:	42ac      	cmp	r4, r5
 800702a:	d101      	bne.n	8007030 <__sfputs_r+0x12>
 800702c:	2000      	movs	r0, #0
 800702e:	e007      	b.n	8007040 <__sfputs_r+0x22>
 8007030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007034:	463a      	mov	r2, r7
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff ffda 	bl	8006ff0 <__sfputc_r>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d1f3      	bne.n	8007028 <__sfputs_r+0xa>
 8007040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007044 <_vfiprintf_r>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	460d      	mov	r5, r1
 800704a:	b09d      	sub	sp, #116	; 0x74
 800704c:	4614      	mov	r4, r2
 800704e:	4698      	mov	r8, r3
 8007050:	4606      	mov	r6, r0
 8007052:	b118      	cbz	r0, 800705c <_vfiprintf_r+0x18>
 8007054:	6a03      	ldr	r3, [r0, #32]
 8007056:	b90b      	cbnz	r3, 800705c <_vfiprintf_r+0x18>
 8007058:	f7ff fccc 	bl	80069f4 <__sinit>
 800705c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705e:	07d9      	lsls	r1, r3, #31
 8007060:	d405      	bmi.n	800706e <_vfiprintf_r+0x2a>
 8007062:	89ab      	ldrh	r3, [r5, #12]
 8007064:	059a      	lsls	r2, r3, #22
 8007066:	d402      	bmi.n	800706e <_vfiprintf_r+0x2a>
 8007068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706a:	f7ff feb8 	bl	8006dde <__retarget_lock_acquire_recursive>
 800706e:	89ab      	ldrh	r3, [r5, #12]
 8007070:	071b      	lsls	r3, r3, #28
 8007072:	d501      	bpl.n	8007078 <_vfiprintf_r+0x34>
 8007074:	692b      	ldr	r3, [r5, #16]
 8007076:	b99b      	cbnz	r3, 80070a0 <_vfiprintf_r+0x5c>
 8007078:	4629      	mov	r1, r5
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff fdde 	bl	8006c3c <__swsetup_r>
 8007080:	b170      	cbz	r0, 80070a0 <_vfiprintf_r+0x5c>
 8007082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007084:	07dc      	lsls	r4, r3, #31
 8007086:	d504      	bpl.n	8007092 <_vfiprintf_r+0x4e>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800708c:	b01d      	add	sp, #116	; 0x74
 800708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007092:	89ab      	ldrh	r3, [r5, #12]
 8007094:	0598      	lsls	r0, r3, #22
 8007096:	d4f7      	bmi.n	8007088 <_vfiprintf_r+0x44>
 8007098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800709a:	f7ff fea1 	bl	8006de0 <__retarget_lock_release_recursive>
 800709e:	e7f3      	b.n	8007088 <_vfiprintf_r+0x44>
 80070a0:	2300      	movs	r3, #0
 80070a2:	9309      	str	r3, [sp, #36]	; 0x24
 80070a4:	2320      	movs	r3, #32
 80070a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ae:	2330      	movs	r3, #48	; 0x30
 80070b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007264 <_vfiprintf_r+0x220>
 80070b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070b8:	f04f 0901 	mov.w	r9, #1
 80070bc:	4623      	mov	r3, r4
 80070be:	469a      	mov	sl, r3
 80070c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070c4:	b10a      	cbz	r2, 80070ca <_vfiprintf_r+0x86>
 80070c6:	2a25      	cmp	r2, #37	; 0x25
 80070c8:	d1f9      	bne.n	80070be <_vfiprintf_r+0x7a>
 80070ca:	ebba 0b04 	subs.w	fp, sl, r4
 80070ce:	d00b      	beq.n	80070e8 <_vfiprintf_r+0xa4>
 80070d0:	465b      	mov	r3, fp
 80070d2:	4622      	mov	r2, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	4630      	mov	r0, r6
 80070d8:	f7ff ffa1 	bl	800701e <__sfputs_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	f000 80a9 	beq.w	8007234 <_vfiprintf_r+0x1f0>
 80070e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e4:	445a      	add	r2, fp
 80070e6:	9209      	str	r2, [sp, #36]	; 0x24
 80070e8:	f89a 3000 	ldrb.w	r3, [sl]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80a1 	beq.w	8007234 <_vfiprintf_r+0x1f0>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070fc:	f10a 0a01 	add.w	sl, sl, #1
 8007100:	9304      	str	r3, [sp, #16]
 8007102:	9307      	str	r3, [sp, #28]
 8007104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007108:	931a      	str	r3, [sp, #104]	; 0x68
 800710a:	4654      	mov	r4, sl
 800710c:	2205      	movs	r2, #5
 800710e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007112:	4854      	ldr	r0, [pc, #336]	; (8007264 <_vfiprintf_r+0x220>)
 8007114:	f7f9 f86c 	bl	80001f0 <memchr>
 8007118:	9a04      	ldr	r2, [sp, #16]
 800711a:	b9d8      	cbnz	r0, 8007154 <_vfiprintf_r+0x110>
 800711c:	06d1      	lsls	r1, r2, #27
 800711e:	bf44      	itt	mi
 8007120:	2320      	movmi	r3, #32
 8007122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007126:	0713      	lsls	r3, r2, #28
 8007128:	bf44      	itt	mi
 800712a:	232b      	movmi	r3, #43	; 0x2b
 800712c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007130:	f89a 3000 	ldrb.w	r3, [sl]
 8007134:	2b2a      	cmp	r3, #42	; 0x2a
 8007136:	d015      	beq.n	8007164 <_vfiprintf_r+0x120>
 8007138:	9a07      	ldr	r2, [sp, #28]
 800713a:	4654      	mov	r4, sl
 800713c:	2000      	movs	r0, #0
 800713e:	f04f 0c0a 	mov.w	ip, #10
 8007142:	4621      	mov	r1, r4
 8007144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007148:	3b30      	subs	r3, #48	; 0x30
 800714a:	2b09      	cmp	r3, #9
 800714c:	d94d      	bls.n	80071ea <_vfiprintf_r+0x1a6>
 800714e:	b1b0      	cbz	r0, 800717e <_vfiprintf_r+0x13a>
 8007150:	9207      	str	r2, [sp, #28]
 8007152:	e014      	b.n	800717e <_vfiprintf_r+0x13a>
 8007154:	eba0 0308 	sub.w	r3, r0, r8
 8007158:	fa09 f303 	lsl.w	r3, r9, r3
 800715c:	4313      	orrs	r3, r2
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	46a2      	mov	sl, r4
 8007162:	e7d2      	b.n	800710a <_vfiprintf_r+0xc6>
 8007164:	9b03      	ldr	r3, [sp, #12]
 8007166:	1d19      	adds	r1, r3, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	9103      	str	r1, [sp, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	bfbb      	ittet	lt
 8007170:	425b      	neglt	r3, r3
 8007172:	f042 0202 	orrlt.w	r2, r2, #2
 8007176:	9307      	strge	r3, [sp, #28]
 8007178:	9307      	strlt	r3, [sp, #28]
 800717a:	bfb8      	it	lt
 800717c:	9204      	strlt	r2, [sp, #16]
 800717e:	7823      	ldrb	r3, [r4, #0]
 8007180:	2b2e      	cmp	r3, #46	; 0x2e
 8007182:	d10c      	bne.n	800719e <_vfiprintf_r+0x15a>
 8007184:	7863      	ldrb	r3, [r4, #1]
 8007186:	2b2a      	cmp	r3, #42	; 0x2a
 8007188:	d134      	bne.n	80071f4 <_vfiprintf_r+0x1b0>
 800718a:	9b03      	ldr	r3, [sp, #12]
 800718c:	1d1a      	adds	r2, r3, #4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	9203      	str	r2, [sp, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfb8      	it	lt
 8007196:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800719a:	3402      	adds	r4, #2
 800719c:	9305      	str	r3, [sp, #20]
 800719e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007274 <_vfiprintf_r+0x230>
 80071a2:	7821      	ldrb	r1, [r4, #0]
 80071a4:	2203      	movs	r2, #3
 80071a6:	4650      	mov	r0, sl
 80071a8:	f7f9 f822 	bl	80001f0 <memchr>
 80071ac:	b138      	cbz	r0, 80071be <_vfiprintf_r+0x17a>
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	eba0 000a 	sub.w	r0, r0, sl
 80071b4:	2240      	movs	r2, #64	; 0x40
 80071b6:	4082      	lsls	r2, r0
 80071b8:	4313      	orrs	r3, r2
 80071ba:	3401      	adds	r4, #1
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c2:	4829      	ldr	r0, [pc, #164]	; (8007268 <_vfiprintf_r+0x224>)
 80071c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c8:	2206      	movs	r2, #6
 80071ca:	f7f9 f811 	bl	80001f0 <memchr>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d03f      	beq.n	8007252 <_vfiprintf_r+0x20e>
 80071d2:	4b26      	ldr	r3, [pc, #152]	; (800726c <_vfiprintf_r+0x228>)
 80071d4:	bb1b      	cbnz	r3, 800721e <_vfiprintf_r+0x1da>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	3307      	adds	r3, #7
 80071da:	f023 0307 	bic.w	r3, r3, #7
 80071de:	3308      	adds	r3, #8
 80071e0:	9303      	str	r3, [sp, #12]
 80071e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e4:	443b      	add	r3, r7
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	e768      	b.n	80070bc <_vfiprintf_r+0x78>
 80071ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ee:	460c      	mov	r4, r1
 80071f0:	2001      	movs	r0, #1
 80071f2:	e7a6      	b.n	8007142 <_vfiprintf_r+0xfe>
 80071f4:	2300      	movs	r3, #0
 80071f6:	3401      	adds	r4, #1
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	4619      	mov	r1, r3
 80071fc:	f04f 0c0a 	mov.w	ip, #10
 8007200:	4620      	mov	r0, r4
 8007202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007206:	3a30      	subs	r2, #48	; 0x30
 8007208:	2a09      	cmp	r2, #9
 800720a:	d903      	bls.n	8007214 <_vfiprintf_r+0x1d0>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0c6      	beq.n	800719e <_vfiprintf_r+0x15a>
 8007210:	9105      	str	r1, [sp, #20]
 8007212:	e7c4      	b.n	800719e <_vfiprintf_r+0x15a>
 8007214:	fb0c 2101 	mla	r1, ip, r1, r2
 8007218:	4604      	mov	r4, r0
 800721a:	2301      	movs	r3, #1
 800721c:	e7f0      	b.n	8007200 <_vfiprintf_r+0x1bc>
 800721e:	ab03      	add	r3, sp, #12
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	462a      	mov	r2, r5
 8007224:	4b12      	ldr	r3, [pc, #72]	; (8007270 <_vfiprintf_r+0x22c>)
 8007226:	a904      	add	r1, sp, #16
 8007228:	4630      	mov	r0, r6
 800722a:	f3af 8000 	nop.w
 800722e:	4607      	mov	r7, r0
 8007230:	1c78      	adds	r0, r7, #1
 8007232:	d1d6      	bne.n	80071e2 <_vfiprintf_r+0x19e>
 8007234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007236:	07d9      	lsls	r1, r3, #31
 8007238:	d405      	bmi.n	8007246 <_vfiprintf_r+0x202>
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	059a      	lsls	r2, r3, #22
 800723e:	d402      	bmi.n	8007246 <_vfiprintf_r+0x202>
 8007240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007242:	f7ff fdcd 	bl	8006de0 <__retarget_lock_release_recursive>
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	065b      	lsls	r3, r3, #25
 800724a:	f53f af1d 	bmi.w	8007088 <_vfiprintf_r+0x44>
 800724e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007250:	e71c      	b.n	800708c <_vfiprintf_r+0x48>
 8007252:	ab03      	add	r3, sp, #12
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	462a      	mov	r2, r5
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <_vfiprintf_r+0x22c>)
 800725a:	a904      	add	r1, sp, #16
 800725c:	4630      	mov	r0, r6
 800725e:	f000 f879 	bl	8007354 <_printf_i>
 8007262:	e7e4      	b.n	800722e <_vfiprintf_r+0x1ea>
 8007264:	08007928 	.word	0x08007928
 8007268:	08007932 	.word	0x08007932
 800726c:	00000000 	.word	0x00000000
 8007270:	0800701f 	.word	0x0800701f
 8007274:	0800792e 	.word	0x0800792e

08007278 <_printf_common>:
 8007278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	4616      	mov	r6, r2
 800727e:	4699      	mov	r9, r3
 8007280:	688a      	ldr	r2, [r1, #8]
 8007282:	690b      	ldr	r3, [r1, #16]
 8007284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007288:	4293      	cmp	r3, r2
 800728a:	bfb8      	it	lt
 800728c:	4613      	movlt	r3, r2
 800728e:	6033      	str	r3, [r6, #0]
 8007290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007294:	4607      	mov	r7, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b10a      	cbz	r2, 800729e <_printf_common+0x26>
 800729a:	3301      	adds	r3, #1
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	0699      	lsls	r1, r3, #26
 80072a2:	bf42      	ittt	mi
 80072a4:	6833      	ldrmi	r3, [r6, #0]
 80072a6:	3302      	addmi	r3, #2
 80072a8:	6033      	strmi	r3, [r6, #0]
 80072aa:	6825      	ldr	r5, [r4, #0]
 80072ac:	f015 0506 	ands.w	r5, r5, #6
 80072b0:	d106      	bne.n	80072c0 <_printf_common+0x48>
 80072b2:	f104 0a19 	add.w	sl, r4, #25
 80072b6:	68e3      	ldr	r3, [r4, #12]
 80072b8:	6832      	ldr	r2, [r6, #0]
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dc26      	bgt.n	800730e <_printf_common+0x96>
 80072c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072c4:	1e13      	subs	r3, r2, #0
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	bf18      	it	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	0692      	lsls	r2, r2, #26
 80072ce:	d42b      	bmi.n	8007328 <_printf_common+0xb0>
 80072d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072d4:	4649      	mov	r1, r9
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c0      	blx	r8
 80072da:	3001      	adds	r0, #1
 80072dc:	d01e      	beq.n	800731c <_printf_common+0xa4>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	f003 0306 	and.w	r3, r3, #6
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	bf02      	ittt	eq
 80072ea:	68e5      	ldreq	r5, [r4, #12]
 80072ec:	6833      	ldreq	r3, [r6, #0]
 80072ee:	1aed      	subeq	r5, r5, r3
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	bf0c      	ite	eq
 80072f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072f8:	2500      	movne	r5, #0
 80072fa:	4293      	cmp	r3, r2
 80072fc:	bfc4      	itt	gt
 80072fe:	1a9b      	subgt	r3, r3, r2
 8007300:	18ed      	addgt	r5, r5, r3
 8007302:	2600      	movs	r6, #0
 8007304:	341a      	adds	r4, #26
 8007306:	42b5      	cmp	r5, r6
 8007308:	d11a      	bne.n	8007340 <_printf_common+0xc8>
 800730a:	2000      	movs	r0, #0
 800730c:	e008      	b.n	8007320 <_printf_common+0xa8>
 800730e:	2301      	movs	r3, #1
 8007310:	4652      	mov	r2, sl
 8007312:	4649      	mov	r1, r9
 8007314:	4638      	mov	r0, r7
 8007316:	47c0      	blx	r8
 8007318:	3001      	adds	r0, #1
 800731a:	d103      	bne.n	8007324 <_printf_common+0xac>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007324:	3501      	adds	r5, #1
 8007326:	e7c6      	b.n	80072b6 <_printf_common+0x3e>
 8007328:	18e1      	adds	r1, r4, r3
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	2030      	movs	r0, #48	; 0x30
 800732e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007332:	4422      	add	r2, r4
 8007334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800733c:	3302      	adds	r3, #2
 800733e:	e7c7      	b.n	80072d0 <_printf_common+0x58>
 8007340:	2301      	movs	r3, #1
 8007342:	4622      	mov	r2, r4
 8007344:	4649      	mov	r1, r9
 8007346:	4638      	mov	r0, r7
 8007348:	47c0      	blx	r8
 800734a:	3001      	adds	r0, #1
 800734c:	d0e6      	beq.n	800731c <_printf_common+0xa4>
 800734e:	3601      	adds	r6, #1
 8007350:	e7d9      	b.n	8007306 <_printf_common+0x8e>
	...

08007354 <_printf_i>:
 8007354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	7e0f      	ldrb	r7, [r1, #24]
 800735a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800735c:	2f78      	cmp	r7, #120	; 0x78
 800735e:	4691      	mov	r9, r2
 8007360:	4680      	mov	r8, r0
 8007362:	460c      	mov	r4, r1
 8007364:	469a      	mov	sl, r3
 8007366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800736a:	d807      	bhi.n	800737c <_printf_i+0x28>
 800736c:	2f62      	cmp	r7, #98	; 0x62
 800736e:	d80a      	bhi.n	8007386 <_printf_i+0x32>
 8007370:	2f00      	cmp	r7, #0
 8007372:	f000 80d4 	beq.w	800751e <_printf_i+0x1ca>
 8007376:	2f58      	cmp	r7, #88	; 0x58
 8007378:	f000 80c0 	beq.w	80074fc <_printf_i+0x1a8>
 800737c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007384:	e03a      	b.n	80073fc <_printf_i+0xa8>
 8007386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800738a:	2b15      	cmp	r3, #21
 800738c:	d8f6      	bhi.n	800737c <_printf_i+0x28>
 800738e:	a101      	add	r1, pc, #4	; (adr r1, 8007394 <_printf_i+0x40>)
 8007390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007394:	080073ed 	.word	0x080073ed
 8007398:	08007401 	.word	0x08007401
 800739c:	0800737d 	.word	0x0800737d
 80073a0:	0800737d 	.word	0x0800737d
 80073a4:	0800737d 	.word	0x0800737d
 80073a8:	0800737d 	.word	0x0800737d
 80073ac:	08007401 	.word	0x08007401
 80073b0:	0800737d 	.word	0x0800737d
 80073b4:	0800737d 	.word	0x0800737d
 80073b8:	0800737d 	.word	0x0800737d
 80073bc:	0800737d 	.word	0x0800737d
 80073c0:	08007505 	.word	0x08007505
 80073c4:	0800742d 	.word	0x0800742d
 80073c8:	080074bf 	.word	0x080074bf
 80073cc:	0800737d 	.word	0x0800737d
 80073d0:	0800737d 	.word	0x0800737d
 80073d4:	08007527 	.word	0x08007527
 80073d8:	0800737d 	.word	0x0800737d
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	0800737d 	.word	0x0800737d
 80073e4:	0800737d 	.word	0x0800737d
 80073e8:	080074c7 	.word	0x080074c7
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	602a      	str	r2, [r5, #0]
 80073f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073fc:	2301      	movs	r3, #1
 80073fe:	e09f      	b.n	8007540 <_printf_i+0x1ec>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	0607      	lsls	r7, r0, #24
 8007406:	f103 0104 	add.w	r1, r3, #4
 800740a:	6029      	str	r1, [r5, #0]
 800740c:	d501      	bpl.n	8007412 <_printf_i+0xbe>
 800740e:	681e      	ldr	r6, [r3, #0]
 8007410:	e003      	b.n	800741a <_printf_i+0xc6>
 8007412:	0646      	lsls	r6, r0, #25
 8007414:	d5fb      	bpl.n	800740e <_printf_i+0xba>
 8007416:	f9b3 6000 	ldrsh.w	r6, [r3]
 800741a:	2e00      	cmp	r6, #0
 800741c:	da03      	bge.n	8007426 <_printf_i+0xd2>
 800741e:	232d      	movs	r3, #45	; 0x2d
 8007420:	4276      	negs	r6, r6
 8007422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007426:	485a      	ldr	r0, [pc, #360]	; (8007590 <_printf_i+0x23c>)
 8007428:	230a      	movs	r3, #10
 800742a:	e012      	b.n	8007452 <_printf_i+0xfe>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	6820      	ldr	r0, [r4, #0]
 8007430:	1d19      	adds	r1, r3, #4
 8007432:	6029      	str	r1, [r5, #0]
 8007434:	0605      	lsls	r5, r0, #24
 8007436:	d501      	bpl.n	800743c <_printf_i+0xe8>
 8007438:	681e      	ldr	r6, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0xee>
 800743c:	0641      	lsls	r1, r0, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0xe4>
 8007440:	881e      	ldrh	r6, [r3, #0]
 8007442:	4853      	ldr	r0, [pc, #332]	; (8007590 <_printf_i+0x23c>)
 8007444:	2f6f      	cmp	r7, #111	; 0x6f
 8007446:	bf0c      	ite	eq
 8007448:	2308      	moveq	r3, #8
 800744a:	230a      	movne	r3, #10
 800744c:	2100      	movs	r1, #0
 800744e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007452:	6865      	ldr	r5, [r4, #4]
 8007454:	60a5      	str	r5, [r4, #8]
 8007456:	2d00      	cmp	r5, #0
 8007458:	bfa2      	ittt	ge
 800745a:	6821      	ldrge	r1, [r4, #0]
 800745c:	f021 0104 	bicge.w	r1, r1, #4
 8007460:	6021      	strge	r1, [r4, #0]
 8007462:	b90e      	cbnz	r6, 8007468 <_printf_i+0x114>
 8007464:	2d00      	cmp	r5, #0
 8007466:	d04b      	beq.n	8007500 <_printf_i+0x1ac>
 8007468:	4615      	mov	r5, r2
 800746a:	fbb6 f1f3 	udiv	r1, r6, r3
 800746e:	fb03 6711 	mls	r7, r3, r1, r6
 8007472:	5dc7      	ldrb	r7, [r0, r7]
 8007474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007478:	4637      	mov	r7, r6
 800747a:	42bb      	cmp	r3, r7
 800747c:	460e      	mov	r6, r1
 800747e:	d9f4      	bls.n	800746a <_printf_i+0x116>
 8007480:	2b08      	cmp	r3, #8
 8007482:	d10b      	bne.n	800749c <_printf_i+0x148>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07de      	lsls	r6, r3, #31
 8007488:	d508      	bpl.n	800749c <_printf_i+0x148>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	6861      	ldr	r1, [r4, #4]
 800748e:	4299      	cmp	r1, r3
 8007490:	bfde      	ittt	le
 8007492:	2330      	movle	r3, #48	; 0x30
 8007494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007498:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800749c:	1b52      	subs	r2, r2, r5
 800749e:	6122      	str	r2, [r4, #16]
 80074a0:	f8cd a000 	str.w	sl, [sp]
 80074a4:	464b      	mov	r3, r9
 80074a6:	aa03      	add	r2, sp, #12
 80074a8:	4621      	mov	r1, r4
 80074aa:	4640      	mov	r0, r8
 80074ac:	f7ff fee4 	bl	8007278 <_printf_common>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d14a      	bne.n	800754a <_printf_i+0x1f6>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074b8:	b004      	add	sp, #16
 80074ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	4833      	ldr	r0, [pc, #204]	; (8007594 <_printf_i+0x240>)
 80074c8:	2778      	movs	r7, #120	; 0x78
 80074ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	6829      	ldr	r1, [r5, #0]
 80074d2:	061f      	lsls	r7, r3, #24
 80074d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80074d8:	d402      	bmi.n	80074e0 <_printf_i+0x18c>
 80074da:	065f      	lsls	r7, r3, #25
 80074dc:	bf48      	it	mi
 80074de:	b2b6      	uxthmi	r6, r6
 80074e0:	07df      	lsls	r7, r3, #31
 80074e2:	bf48      	it	mi
 80074e4:	f043 0320 	orrmi.w	r3, r3, #32
 80074e8:	6029      	str	r1, [r5, #0]
 80074ea:	bf48      	it	mi
 80074ec:	6023      	strmi	r3, [r4, #0]
 80074ee:	b91e      	cbnz	r6, 80074f8 <_printf_i+0x1a4>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	f023 0320 	bic.w	r3, r3, #32
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	2310      	movs	r3, #16
 80074fa:	e7a7      	b.n	800744c <_printf_i+0xf8>
 80074fc:	4824      	ldr	r0, [pc, #144]	; (8007590 <_printf_i+0x23c>)
 80074fe:	e7e4      	b.n	80074ca <_printf_i+0x176>
 8007500:	4615      	mov	r5, r2
 8007502:	e7bd      	b.n	8007480 <_printf_i+0x12c>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	6826      	ldr	r6, [r4, #0]
 8007508:	6961      	ldr	r1, [r4, #20]
 800750a:	1d18      	adds	r0, r3, #4
 800750c:	6028      	str	r0, [r5, #0]
 800750e:	0635      	lsls	r5, r6, #24
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	d501      	bpl.n	8007518 <_printf_i+0x1c4>
 8007514:	6019      	str	r1, [r3, #0]
 8007516:	e002      	b.n	800751e <_printf_i+0x1ca>
 8007518:	0670      	lsls	r0, r6, #25
 800751a:	d5fb      	bpl.n	8007514 <_printf_i+0x1c0>
 800751c:	8019      	strh	r1, [r3, #0]
 800751e:	2300      	movs	r3, #0
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	4615      	mov	r5, r2
 8007524:	e7bc      	b.n	80074a0 <_printf_i+0x14c>
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	602a      	str	r2, [r5, #0]
 800752c:	681d      	ldr	r5, [r3, #0]
 800752e:	6862      	ldr	r2, [r4, #4]
 8007530:	2100      	movs	r1, #0
 8007532:	4628      	mov	r0, r5
 8007534:	f7f8 fe5c 	bl	80001f0 <memchr>
 8007538:	b108      	cbz	r0, 800753e <_printf_i+0x1ea>
 800753a:	1b40      	subs	r0, r0, r5
 800753c:	6060      	str	r0, [r4, #4]
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	2300      	movs	r3, #0
 8007544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007548:	e7aa      	b.n	80074a0 <_printf_i+0x14c>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	462a      	mov	r2, r5
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	47d0      	blx	sl
 8007554:	3001      	adds	r0, #1
 8007556:	d0ad      	beq.n	80074b4 <_printf_i+0x160>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	079b      	lsls	r3, r3, #30
 800755c:	d413      	bmi.n	8007586 <_printf_i+0x232>
 800755e:	68e0      	ldr	r0, [r4, #12]
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	4298      	cmp	r0, r3
 8007564:	bfb8      	it	lt
 8007566:	4618      	movlt	r0, r3
 8007568:	e7a6      	b.n	80074b8 <_printf_i+0x164>
 800756a:	2301      	movs	r3, #1
 800756c:	4632      	mov	r2, r6
 800756e:	4649      	mov	r1, r9
 8007570:	4640      	mov	r0, r8
 8007572:	47d0      	blx	sl
 8007574:	3001      	adds	r0, #1
 8007576:	d09d      	beq.n	80074b4 <_printf_i+0x160>
 8007578:	3501      	adds	r5, #1
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	9903      	ldr	r1, [sp, #12]
 800757e:	1a5b      	subs	r3, r3, r1
 8007580:	42ab      	cmp	r3, r5
 8007582:	dcf2      	bgt.n	800756a <_printf_i+0x216>
 8007584:	e7eb      	b.n	800755e <_printf_i+0x20a>
 8007586:	2500      	movs	r5, #0
 8007588:	f104 0619 	add.w	r6, r4, #25
 800758c:	e7f5      	b.n	800757a <_printf_i+0x226>
 800758e:	bf00      	nop
 8007590:	08007939 	.word	0x08007939
 8007594:	0800794a 	.word	0x0800794a

08007598 <__sflush_r>:
 8007598:	898a      	ldrh	r2, [r1, #12]
 800759a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759e:	4605      	mov	r5, r0
 80075a0:	0710      	lsls	r0, r2, #28
 80075a2:	460c      	mov	r4, r1
 80075a4:	d458      	bmi.n	8007658 <__sflush_r+0xc0>
 80075a6:	684b      	ldr	r3, [r1, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dc05      	bgt.n	80075b8 <__sflush_r+0x20>
 80075ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dc02      	bgt.n	80075b8 <__sflush_r+0x20>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	d0f9      	beq.n	80075b2 <__sflush_r+0x1a>
 80075be:	2300      	movs	r3, #0
 80075c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075c4:	682f      	ldr	r7, [r5, #0]
 80075c6:	6a21      	ldr	r1, [r4, #32]
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	d032      	beq.n	8007632 <__sflush_r+0x9a>
 80075cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	075a      	lsls	r2, r3, #29
 80075d2:	d505      	bpl.n	80075e0 <__sflush_r+0x48>
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	1ac0      	subs	r0, r0, r3
 80075d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075da:	b10b      	cbz	r3, 80075e0 <__sflush_r+0x48>
 80075dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075de:	1ac0      	subs	r0, r0, r3
 80075e0:	2300      	movs	r3, #0
 80075e2:	4602      	mov	r2, r0
 80075e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e6:	6a21      	ldr	r1, [r4, #32]
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b0      	blx	r6
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	d106      	bne.n	8007600 <__sflush_r+0x68>
 80075f2:	6829      	ldr	r1, [r5, #0]
 80075f4:	291d      	cmp	r1, #29
 80075f6:	d82b      	bhi.n	8007650 <__sflush_r+0xb8>
 80075f8:	4a29      	ldr	r2, [pc, #164]	; (80076a0 <__sflush_r+0x108>)
 80075fa:	410a      	asrs	r2, r1
 80075fc:	07d6      	lsls	r6, r2, #31
 80075fe:	d427      	bmi.n	8007650 <__sflush_r+0xb8>
 8007600:	2200      	movs	r2, #0
 8007602:	6062      	str	r2, [r4, #4]
 8007604:	04d9      	lsls	r1, r3, #19
 8007606:	6922      	ldr	r2, [r4, #16]
 8007608:	6022      	str	r2, [r4, #0]
 800760a:	d504      	bpl.n	8007616 <__sflush_r+0x7e>
 800760c:	1c42      	adds	r2, r0, #1
 800760e:	d101      	bne.n	8007614 <__sflush_r+0x7c>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b903      	cbnz	r3, 8007616 <__sflush_r+0x7e>
 8007614:	6560      	str	r0, [r4, #84]	; 0x54
 8007616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007618:	602f      	str	r7, [r5, #0]
 800761a:	2900      	cmp	r1, #0
 800761c:	d0c9      	beq.n	80075b2 <__sflush_r+0x1a>
 800761e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007622:	4299      	cmp	r1, r3
 8007624:	d002      	beq.n	800762c <__sflush_r+0x94>
 8007626:	4628      	mov	r0, r5
 8007628:	f7ff fbea 	bl	8006e00 <_free_r>
 800762c:	2000      	movs	r0, #0
 800762e:	6360      	str	r0, [r4, #52]	; 0x34
 8007630:	e7c0      	b.n	80075b4 <__sflush_r+0x1c>
 8007632:	2301      	movs	r3, #1
 8007634:	4628      	mov	r0, r5
 8007636:	47b0      	blx	r6
 8007638:	1c41      	adds	r1, r0, #1
 800763a:	d1c8      	bne.n	80075ce <__sflush_r+0x36>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0c5      	beq.n	80075ce <__sflush_r+0x36>
 8007642:	2b1d      	cmp	r3, #29
 8007644:	d001      	beq.n	800764a <__sflush_r+0xb2>
 8007646:	2b16      	cmp	r3, #22
 8007648:	d101      	bne.n	800764e <__sflush_r+0xb6>
 800764a:	602f      	str	r7, [r5, #0]
 800764c:	e7b1      	b.n	80075b2 <__sflush_r+0x1a>
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	e7ad      	b.n	80075b4 <__sflush_r+0x1c>
 8007658:	690f      	ldr	r7, [r1, #16]
 800765a:	2f00      	cmp	r7, #0
 800765c:	d0a9      	beq.n	80075b2 <__sflush_r+0x1a>
 800765e:	0793      	lsls	r3, r2, #30
 8007660:	680e      	ldr	r6, [r1, #0]
 8007662:	bf08      	it	eq
 8007664:	694b      	ldreq	r3, [r1, #20]
 8007666:	600f      	str	r7, [r1, #0]
 8007668:	bf18      	it	ne
 800766a:	2300      	movne	r3, #0
 800766c:	eba6 0807 	sub.w	r8, r6, r7
 8007670:	608b      	str	r3, [r1, #8]
 8007672:	f1b8 0f00 	cmp.w	r8, #0
 8007676:	dd9c      	ble.n	80075b2 <__sflush_r+0x1a>
 8007678:	6a21      	ldr	r1, [r4, #32]
 800767a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800767c:	4643      	mov	r3, r8
 800767e:	463a      	mov	r2, r7
 8007680:	4628      	mov	r0, r5
 8007682:	47b0      	blx	r6
 8007684:	2800      	cmp	r0, #0
 8007686:	dc06      	bgt.n	8007696 <__sflush_r+0xfe>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007694:	e78e      	b.n	80075b4 <__sflush_r+0x1c>
 8007696:	4407      	add	r7, r0
 8007698:	eba8 0800 	sub.w	r8, r8, r0
 800769c:	e7e9      	b.n	8007672 <__sflush_r+0xda>
 800769e:	bf00      	nop
 80076a0:	dfbffffe 	.word	0xdfbffffe

080076a4 <_fflush_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	690b      	ldr	r3, [r1, #16]
 80076a8:	4605      	mov	r5, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	b913      	cbnz	r3, 80076b4 <_fflush_r+0x10>
 80076ae:	2500      	movs	r5, #0
 80076b0:	4628      	mov	r0, r5
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	b118      	cbz	r0, 80076be <_fflush_r+0x1a>
 80076b6:	6a03      	ldr	r3, [r0, #32]
 80076b8:	b90b      	cbnz	r3, 80076be <_fflush_r+0x1a>
 80076ba:	f7ff f99b 	bl	80069f4 <__sinit>
 80076be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0f3      	beq.n	80076ae <_fflush_r+0xa>
 80076c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c8:	07d0      	lsls	r0, r2, #31
 80076ca:	d404      	bmi.n	80076d6 <_fflush_r+0x32>
 80076cc:	0599      	lsls	r1, r3, #22
 80076ce:	d402      	bmi.n	80076d6 <_fflush_r+0x32>
 80076d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076d2:	f7ff fb84 	bl	8006dde <__retarget_lock_acquire_recursive>
 80076d6:	4628      	mov	r0, r5
 80076d8:	4621      	mov	r1, r4
 80076da:	f7ff ff5d 	bl	8007598 <__sflush_r>
 80076de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076e0:	07da      	lsls	r2, r3, #31
 80076e2:	4605      	mov	r5, r0
 80076e4:	d4e4      	bmi.n	80076b0 <_fflush_r+0xc>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	059b      	lsls	r3, r3, #22
 80076ea:	d4e1      	bmi.n	80076b0 <_fflush_r+0xc>
 80076ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ee:	f7ff fb77 	bl	8006de0 <__retarget_lock_release_recursive>
 80076f2:	e7dd      	b.n	80076b0 <_fflush_r+0xc>

080076f4 <__swhatbuf_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	2900      	cmp	r1, #0
 80076fe:	b096      	sub	sp, #88	; 0x58
 8007700:	4615      	mov	r5, r2
 8007702:	461e      	mov	r6, r3
 8007704:	da0d      	bge.n	8007722 <__swhatbuf_r+0x2e>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f013 0f80 	tst.w	r3, #128	; 0x80
 800770c:	f04f 0100 	mov.w	r1, #0
 8007710:	bf0c      	ite	eq
 8007712:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007716:	2340      	movne	r3, #64	; 0x40
 8007718:	2000      	movs	r0, #0
 800771a:	6031      	str	r1, [r6, #0]
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	b016      	add	sp, #88	; 0x58
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	466a      	mov	r2, sp
 8007724:	f000 f848 	bl	80077b8 <_fstat_r>
 8007728:	2800      	cmp	r0, #0
 800772a:	dbec      	blt.n	8007706 <__swhatbuf_r+0x12>
 800772c:	9901      	ldr	r1, [sp, #4]
 800772e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007732:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007736:	4259      	negs	r1, r3
 8007738:	4159      	adcs	r1, r3
 800773a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773e:	e7eb      	b.n	8007718 <__swhatbuf_r+0x24>

08007740 <__smakebuf_r>:
 8007740:	898b      	ldrh	r3, [r1, #12]
 8007742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007744:	079d      	lsls	r5, r3, #30
 8007746:	4606      	mov	r6, r0
 8007748:	460c      	mov	r4, r1
 800774a:	d507      	bpl.n	800775c <__smakebuf_r+0x1c>
 800774c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	2301      	movs	r3, #1
 8007756:	6163      	str	r3, [r4, #20]
 8007758:	b002      	add	sp, #8
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	ab01      	add	r3, sp, #4
 800775e:	466a      	mov	r2, sp
 8007760:	f7ff ffc8 	bl	80076f4 <__swhatbuf_r>
 8007764:	9900      	ldr	r1, [sp, #0]
 8007766:	4605      	mov	r5, r0
 8007768:	4630      	mov	r0, r6
 800776a:	f7ff fbb5 	bl	8006ed8 <_malloc_r>
 800776e:	b948      	cbnz	r0, 8007784 <__smakebuf_r+0x44>
 8007770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d4ef      	bmi.n	8007758 <__smakebuf_r+0x18>
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7e3      	b.n	800774c <__smakebuf_r+0xc>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	6020      	str	r0, [r4, #0]
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	6163      	str	r3, [r4, #20]
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	6120      	str	r0, [r4, #16]
 8007796:	b15b      	cbz	r3, 80077b0 <__smakebuf_r+0x70>
 8007798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779c:	4630      	mov	r0, r6
 800779e:	f000 f81d 	bl	80077dc <_isatty_r>
 80077a2:	b128      	cbz	r0, 80077b0 <__smakebuf_r+0x70>
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	431d      	orrs	r5, r3
 80077b4:	81a5      	strh	r5, [r4, #12]
 80077b6:	e7cf      	b.n	8007758 <__smakebuf_r+0x18>

080077b8 <_fstat_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d07      	ldr	r5, [pc, #28]	; (80077d8 <_fstat_r+0x20>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	f7f9 f9a5 	bl	8000b14 <_fstat>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d102      	bne.n	80077d4 <_fstat_r+0x1c>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	b103      	cbz	r3, 80077d4 <_fstat_r+0x1c>
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	bf00      	nop
 80077d8:	20001bb8 	.word	0x20001bb8

080077dc <_isatty_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d06      	ldr	r5, [pc, #24]	; (80077f8 <_isatty_r+0x1c>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7f9 f9a4 	bl	8000b34 <_isatty>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_isatty_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_isatty_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20001bb8 	.word	0x20001bb8

080077fc <_sbrk_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d06      	ldr	r5, [pc, #24]	; (8007818 <_sbrk_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7f9 f9ac 	bl	8000b64 <_sbrk>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_sbrk_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_sbrk_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20001bb8 	.word	0x20001bb8

0800781c <_init>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr

08007828 <_fini>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr
