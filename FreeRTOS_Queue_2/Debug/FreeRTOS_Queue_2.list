
FreeRTOS_Queue_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007920  08007920  00017920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab4  08007ab4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007abc  08007abc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  2000006c  08007b30  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08007b30  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bccd  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d8  00000000  00000000  0003bdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001217  00000000  00000000  00040dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004965  00000000  00000000  00041fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192e8  00000000  00000000  00046954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f24f  00000000  00000000  0005fc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069f4  00000000  00000000  0016ee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00175880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007908 	.word	0x08007908

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007908 	.word	0x08007908

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fb63 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f840 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8bc 	bl	8000714 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800059c:	f000 f88e 	bl	80006bc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f003 fa54 	bl	8003a4c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue_1 */
  Queue_1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue_1_attributes);
 80005a4:	4a11      	ldr	r2, [pc, #68]	; (80005ec <main+0x60>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	2008      	movs	r0, #8
 80005aa:	f003 fb46 	bl	8003c3a <osMessageQueueNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <main+0x64>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender_Task_1 */
  Sender_Task_1Handle = osThreadNew(Start_Sender_Task_1, NULL, &Sender_Task_1_attributes);
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <main+0x68>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480f      	ldr	r0, [pc, #60]	; (80005f8 <main+0x6c>)
 80005ba:	f003 fa91 	bl	8003ae0 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <main+0x70>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of Sender_Task_2 */
  Sender_Task_2Handle = osThreadNew(Start_Sender_Task_2, NULL, &Sender_Task_2_attributes);
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0x74>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <main+0x78>)
 80005ca:	f003 fa89 	bl	8003ae0 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <main+0x7c>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of Receiver_Task */
  Receiver_TaskHandle = osThreadNew(Start_Receiver_Task, NULL, &Receiver_Task_attributes);
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <main+0x80>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <main+0x84>)
 80005da:	f003 fa81 	bl	8003ae0 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <main+0x88>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f003 fa56 	bl	8003a94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x5c>
 80005ea:	bf00      	nop
 80005ec:	08007a20 	.word	0x08007a20
 80005f0:	2000011c 	.word	0x2000011c
 80005f4:	080079b4 	.word	0x080079b4
 80005f8:	0800075d 	.word	0x0800075d
 80005fc:	20000110 	.word	0x20000110
 8000600:	080079d8 	.word	0x080079d8
 8000604:	0800079d 	.word	0x0800079d
 8000608:	20000114 	.word	0x20000114
 800060c:	080079fc 	.word	0x080079fc
 8000610:	080007ed 	.word	0x080007ed
 8000614:	20000118 	.word	0x20000118

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fb80 	bl	8006d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f000 fdc7 	bl	80011d0 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f906 	bl	8000858 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2340      	movs	r3, #64	; 0x40
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fe0e 	bl	800129c <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000686:	f000 f8e7 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	2104      	movs	r1, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fa13 	bl	8001ad0 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b0:	f000 f8d2 	bl	8000858 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	; 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_LPUART1_UART_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006fa:	f002 fbbd 	bl	8002e78 <HAL_UART_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f8a8 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000088 	.word	0x20000088
 8000710:	40008000 	.word	0x40008000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_GPIO_Init+0x44>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <MX_GPIO_Init+0x44>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_GPIO_Init+0x44>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000732:	f000 fda3 	bl	800127c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_GPIO_Init+0x44>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <MX_GPIO_Init+0x44>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MX_GPIO_Init+0x44>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <Start_Sender_Task_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Sender_Task_1 */
void Start_Sender_Task_1(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t x = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	printf("S1\r\n");
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <Start_Sender_Task_1+0x38>)
 800076a:	f006 f9ff 	bl	8006b6c <puts>
	osMessageQueuePut(Queue_1Handle, &x, 0, 500);
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <Start_Sender_Task_1+0x3c>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	f107 010f 	add.w	r1, r7, #15
 8000776:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800077a:	2200      	movs	r2, #0
 800077c:	f003 fad0 	bl	8003d20 <osMessageQueuePut>
	x++;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	3301      	adds	r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	73fb      	strb	r3, [r7, #15]
    osDelay(2000);
 8000788:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800078c:	f003 fa3a 	bl	8003c04 <osDelay>
	printf("S1\r\n");
 8000790:	e7ea      	b.n	8000768 <Start_Sender_Task_1+0xc>
 8000792:	bf00      	nop
 8000794:	08007958 	.word	0x08007958
 8000798:	2000011c 	.word	0x2000011c

0800079c <Start_Sender_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Sender_Task_2 */
void Start_Sender_Task_2(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Sender_Task_2 */
	uint8_t y = 51;
 80007a4:	2333      	movs	r3, #51	; 0x33
 80007a6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	    printf("S2\r\n");
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <Start_Sender_Task_2+0x44>)
 80007aa:	f006 f9df 	bl	8006b6c <puts>
	    if (osMessageQueuePut(Queue_1Handle, &y, 0, 500) != osOK)
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <Start_Sender_Task_2+0x48>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f107 010f 	add.w	r1, r7, #15
 80007b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ba:	2200      	movs	r2, #0
 80007bc:	f003 fab0 	bl	8003d20 <osMessageQueuePut>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <Start_Sender_Task_2+0x32>
	    {
	      printf("Queue full, unable to send message.\r\n");
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <Start_Sender_Task_2+0x4c>)
 80007c8:	f006 f9d0 	bl	8006b6c <puts>
 80007cc:	e003      	b.n	80007d6 <Start_Sender_Task_2+0x3a>
	    }
	    else
	    {
	      y++;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	73fb      	strb	r3, [r7, #15]
	    }
	    osDelay(2000);
 80007d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007da:	f003 fa13 	bl	8003c04 <osDelay>
	    printf("S2\r\n");
 80007de:	e7e3      	b.n	80007a8 <Start_Sender_Task_2+0xc>
 80007e0:	0800795c 	.word	0x0800795c
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	08007960 	.word	0x08007960

080007ec <Start_Receiver_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Receiver_Task */
void Start_Receiver_Task(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Receiver_Task */
	uint8_t res;
  /* Infinite loop */
  for(;;)
  {
	printf("R\r\n");
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <Start_Receiver_Task+0x3c>)
 80007f6:	f006 f9b9 	bl	8006b6c <puts>
	if(osMessageQueueGet(Queue_1Handle, &res, NULL, 500) == osOK)
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <Start_Receiver_Task+0x40>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	f107 010f 	add.w	r1, r7, #15
 8000802:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000806:	2200      	movs	r2, #0
 8000808:	f003 faea 	bl	8003de0 <osMessageQueueGet>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <Start_Receiver_Task+0x30>
	{
	printf("R-data : %d\r\n",res);
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <Start_Receiver_Task+0x44>)
 8000818:	f006 f942 	bl	8006aa0 <iprintf>
	}
	osDelay(1000);
 800081c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000820:	f003 f9f0 	bl	8003c04 <osDelay>
	printf("R\r\n");
 8000824:	e7e6      	b.n	80007f4 <Start_Receiver_Task+0x8>
 8000826:	bf00      	nop
 8000828:	08007988 	.word	0x08007988
 800082c:	2000011c 	.word	0x2000011c
 8000830:	0800798c 	.word	0x0800798c

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 fa21 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40001000 	.word	0x40001000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_MspInit+0x4c>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_MspInit+0x4c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	; 0x60
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_MspInit+0x4c>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_MspInit+0x4c>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_MspInit+0x4c>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	f06f 0001 	mvn.w	r0, #1
 80008a2:	f000 facb 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0ac      	sub	sp, #176	; 0xb0
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	228c      	movs	r2, #140	; 0x8c
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f006 fa29 	bl	8006d2c <memset>
  if(huart->Instance==LPUART1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <HAL_UART_MspInit+0xb4>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d13d      	bne.n	8000960 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008e4:	2320      	movs	r3, #32
 80008e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fb43 	bl	8001f7c <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008fc:	f7ff ffac 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_UART_MspInit+0xb8>)
 8000902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0xb8>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_UART_MspInit+0xb8>)
 800090e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_UART_MspInit+0xb8>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <HAL_UART_MspInit+0xb8>)
 800091e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_UART_MspInit+0xb8>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000930:	f000 fca4 	bl	800127c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000934:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800094e:	2308      	movs	r3, #8
 8000950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000954:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_UART_MspInit+0xbc>)
 800095c:	f000 fa98 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	37b0      	adds	r7, #176	; 0xb0
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40008000 	.word	0x40008000
 800096c:	40021000 	.word	0x40021000
 8000970:	48001800 	.word	0x48001800

08000974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <HAL_InitTick+0xe0>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a33      	ldr	r2, [pc, #204]	; (8000a54 <HAL_InitTick+0xe0>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <HAL_InitTick+0xe0>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800099a:	f107 0210 	add.w	r2, r7, #16
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fa57 	bl	8001e58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d103      	bne.n	80009bc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b4:	f001 fa24 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 80009b8:	6378      	str	r0, [r7, #52]	; 0x34
 80009ba:	e004      	b.n	80009c6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009bc:	f001 fa20 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 80009c0:	4603      	mov	r3, r0
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c8:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <HAL_InitTick+0xe4>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9b      	lsrs	r3, r3, #18
 80009d0:	3b01      	subs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <HAL_InitTick+0xe8>)
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_InitTick+0xec>)
 80009d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <HAL_InitTick+0xe8>)
 80009dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009e2:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <HAL_InitTick+0xe8>)
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_InitTick+0xe8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_InitTick+0xe8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_InitTick+0xe8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <HAL_InitTick+0xe8>)
 80009fc:	f001 ff88 	bl	8002910 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d11b      	bne.n	8000a46 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <HAL_InitTick+0xe8>)
 8000a10:	f001 ffe0 	bl	80029d4 <HAL_TIM_Base_Start_IT>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d111      	bne.n	8000a46 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a22:	2036      	movs	r0, #54	; 0x36
 8000a24:	f000 fa26 	bl	8000e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b0f      	cmp	r3, #15
 8000a2c:	d808      	bhi.n	8000a40 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	2036      	movs	r0, #54	; 0x36
 8000a34:	f000 fa02 	bl	8000e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_InitTick+0xf0>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	e002      	b.n	8000a46 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3738      	adds	r7, #56	; 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	20000120 	.word	0x20000120
 8000a60:	40001000 	.word	0x40001000
 8000a64:	20000004 	.word	0x20000004

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM6_DAC_IRQHandler+0x10>)
 8000a9a:	f002 f80b 	bl	8002ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000120 	.word	0x20000120

08000aa8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e00a      	b.n	8000ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aba:	f3af 8000 	nop.w
 8000abe:	4601      	mov	r1, r0
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	b2ca      	uxtb	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf0      	blt.n	8000aba <_read+0x12>
  }

  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, 2000);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <_write+0x28>)
 8000afc:	f002 fa0a 	bl	8002f14 <HAL_UART_Transmit>
  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000088 	.word	0x20000088

08000b10 <_close>:

int _close(int file)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b38:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_isatty>:

int _isatty(int file)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f006 f964 	bl	8006e74 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20050000 	.word	0x20050000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	2000016c 	.word	0x2000016c
 8000be0:	20001c60 	.word	0x20001c60

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f006 f923 	bl	8006e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fca7 	bl	800058c <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c4c:	08007ac4 	.word	0x08007ac4
  ldr r2, =_sbss
 8000c50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c54:	20001c60 	.word	0x20001c60

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8de 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fe82 	bl	8000974 <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fdf2 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000170 	.word	0x20000170

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000170 	.word	0x20000170

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e166      	b.n	800116e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8158 	beq.w	8001168 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d017      	beq.n	8000f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d123      	bne.n	8000fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80b2 	beq.w	8001168 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b61      	ldr	r3, [pc, #388]	; (800118c <HAL_GPIO_Init+0x2fc>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	4a60      	ldr	r2, [pc, #384]	; (800118c <HAL_GPIO_Init+0x2fc>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6613      	str	r3, [r2, #96]	; 0x60
 8001010:	4b5e      	ldr	r3, [pc, #376]	; (800118c <HAL_GPIO_Init+0x2fc>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a5c      	ldr	r2, [pc, #368]	; (8001190 <HAL_GPIO_Init+0x300>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001046:	d02b      	beq.n	80010a0 <HAL_GPIO_Init+0x210>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_GPIO_Init+0x304>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d025      	beq.n	800109c <HAL_GPIO_Init+0x20c>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a51      	ldr	r2, [pc, #324]	; (8001198 <HAL_GPIO_Init+0x308>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d01f      	beq.n	8001098 <HAL_GPIO_Init+0x208>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_GPIO_Init+0x30c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d019      	beq.n	8001094 <HAL_GPIO_Init+0x204>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x310>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d013      	beq.n	8001090 <HAL_GPIO_Init+0x200>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x314>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00d      	beq.n	800108c <HAL_GPIO_Init+0x1fc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x318>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x1f8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x31c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <HAL_GPIO_Init+0x1f4>
 8001080:	2307      	movs	r3, #7
 8001082:	e00e      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001084:	2308      	movs	r3, #8
 8001086:	e00c      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001088:	2306      	movs	r3, #6
 800108a:	e00a      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 800108c:	2305      	movs	r3, #5
 800108e:	e008      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001090:	2304      	movs	r3, #4
 8001092:	e006      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001094:	2303      	movs	r3, #3
 8001096:	e004      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 8001098:	2302      	movs	r3, #2
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <HAL_GPIO_Init+0x212>
 80010a0:	2300      	movs	r3, #0
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	f002 0203 	and.w	r2, r2, #3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	4093      	lsls	r3, r2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b2:	4937      	ldr	r1, [pc, #220]	; (8001190 <HAL_GPIO_Init+0x300>)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c0:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <HAL_GPIO_Init+0x320>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e4:	4a32      	ldr	r2, [pc, #200]	; (80011b0 <HAL_GPIO_Init+0x320>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_GPIO_Init+0x320>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x320>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	f47f ae91 	bne.w	8000ea0 <HAL_GPIO_Init+0x10>
  }
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	48000400 	.word	0x48000400
 8001198:	48000800 	.word	0x48000800
 800119c:	48000c00 	.word	0x48000c00
 80011a0:	48001000 	.word	0x48001000
 80011a4:	48001400 	.word	0x48001400
 80011a8:	48001800 	.word	0x48001800
 80011ac:	48001c00 	.word	0x48001c00
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_PWREx_GetVoltageRange+0x18>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000

080011d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011de:	d130      	bne.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ec:	d038      	beq.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2232      	movs	r2, #50	; 0x32
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	0c9b      	lsrs	r3, r3, #18
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001214:	e002      	b.n	800121c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001228:	d102      	bne.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f2      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123c:	d110      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e00f      	b.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124e:	d007      	beq.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40007000 	.word	0x40007000
 8001274:	20000000 	.word	0x20000000
 8001278:	431bde83 	.word	0x431bde83

0800127c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6053      	str	r3, [r2, #4]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000

0800129c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 bc08 	b.w	8001ac0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b0:	4b96      	ldr	r3, [pc, #600]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ba:	4b94      	ldr	r3, [pc, #592]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80e4 	beq.w	800149a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <HAL_RCC_OscConfig+0x4c>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	f040 808b 	bne.w	80013f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	f040 8087 	bne.w	80013f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e8:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_OscConfig+0x64>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e3df      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HAL_RCC_OscConfig+0x7e>
 8001310:	4b7e      	ldr	r3, [pc, #504]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001318:	e005      	b.n	8001326 <HAL_RCC_OscConfig+0x8a>
 800131a:	4b7c      	ldr	r3, [pc, #496]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800131c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001326:	4293      	cmp	r3, r2
 8001328:	d223      	bcs.n	8001372 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fdc4 	bl	8001ebc <RCC_SetFlashLatencyFromMSIRange>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e3c0      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133e:	4b73      	ldr	r3, [pc, #460]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a72      	ldr	r2, [pc, #456]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b70      	ldr	r3, [pc, #448]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	496d      	ldr	r1, [pc, #436]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4968      	ldr	r1, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e025      	b.n	80013be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001372:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a65      	ldr	r2, [pc, #404]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4960      	ldr	r1, [pc, #384]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	495b      	ldr	r1, [pc, #364]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fd84 	bl	8001ebc <RCC_SetFlashLatencyFromMSIRange>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e380      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013be:	f000 fc87 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b51      	ldr	r3, [pc, #324]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4950      	ldr	r1, [pc, #320]	; (8001510 <HAL_RCC_OscConfig+0x274>)
 80013d0:	5ccb      	ldrb	r3, [r1, r3]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <HAL_RCC_OscConfig+0x278>)
 80013dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013de:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <HAL_RCC_OscConfig+0x27c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fac6 	bl	8000974 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d052      	beq.n	8001498 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	e364      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d032      	beq.n	8001464 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a42      	ldr	r2, [pc, #264]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140a:	f7ff fc53 	bl	8000cb4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001412:	f7ff fc4f 	bl	8000cb4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e34d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a35      	ldr	r2, [pc, #212]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4930      	ldr	r1, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	492b      	ldr	r1, [pc, #172]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
 8001462:	e01a      	b.n	800149a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a28      	ldr	r2, [pc, #160]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc20 	bl	8000cb4 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001478:	f7ff fc1c 	bl	8000cb4 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e31a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1dc>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d073      	beq.n	800158e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x21c>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d10e      	bne.n	80014d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d063      	beq.n	800158c <HAL_RCC_OscConfig+0x2f0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d15f      	bne.n	800158c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e2f7      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x24c>
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e025      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d114      	bne.n	800151c <HAL_RCC_OscConfig+0x280>
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a02      	ldr	r2, [pc, #8]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e013      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 800150c:	40021000 	.word	0x40021000
 8001510:	08007a38 	.word	0x08007a38
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004
 800151c:	4ba0      	ldr	r3, [pc, #640]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9f      	ldr	r2, [pc, #636]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b9d      	ldr	r3, [pc, #628]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a9c      	ldr	r2, [pc, #624]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbba 	bl	8000cb4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fbb6 	bl	8000cb4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e2b4      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001556:	4b92      	ldr	r3, [pc, #584]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x2a8>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fba6 	bl	8000cb4 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fba2 	bl	8000cb4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e2a0      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157e:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x2d0>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d060      	beq.n	800165c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x310>
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d119      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d116      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x328>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e27d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	4973      	ldr	r1, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d8:	e040      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e2:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb61 	bl	8000cb4 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb5d 	bl	8000cb4 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e25b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001608:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	495f      	ldr	r1, [pc, #380]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e018      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fb3d 	bl	8000cb4 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fb39 	bl	8000cb4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e237      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01c      	beq.n	80016aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001676:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fb18 	bl	8000cb4 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fb14 	bl	8000cb4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e212      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ef      	beq.n	8001688 <HAL_RCC_OscConfig+0x3ec>
 80016a8:	e01b      	b.n	80016e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b0:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fafb 	bl	8000cb4 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff faf7 	bl	8000cb4 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1f5      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ef      	bne.n	80016c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a6 	beq.w	800183c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	; 0x58
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001718:	2301      	movs	r3, #1
 800171a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d118      	bne.n	800175a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001734:	f7ff fabe 	bl	8000cb4 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173c:	f7ff faba 	bl	8000cb4 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1b8      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_RCC_OscConfig+0x4d8>
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001772:	e029      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x50c>
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
 80017a8:	4b9d      	ldr	r3, [pc, #628]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a9c      	ldr	r2, [pc, #624]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	4b99      	ldr	r3, [pc, #612]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	4a98      	ldr	r2, [pc, #608]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d016      	beq.n	80017fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa70 	bl	8000cb4 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fa6c 	bl	8000cb4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e168      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ee:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ed      	beq.n	80017d8 <HAL_RCC_OscConfig+0x53c>
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa59 	bl	8000cb4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fa55 	bl	8000cb4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e151      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181c:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ed      	bne.n	8001806 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b7b      	ldr	r3, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a7a      	ldr	r2, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01c      	beq.n	800188a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001850:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001856:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fa28 	bl	8000cb4 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001868:	f7ff fa24 	bl	8000cb4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e122      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800187a:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 800187c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ef      	beq.n	8001868 <HAL_RCC_OscConfig+0x5cc>
 8001888:	e01b      	b.n	80018c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800188a:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 800188c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001890:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fa0b 	bl	8000cb4 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a2:	f7ff fa07 	bl	8000cb4 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e105      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b4:	4b5a      	ldr	r3, [pc, #360]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80018b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ef      	bne.n	80018a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80f9 	beq.w	8001abe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 80cf 	bne.w	8001a74 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d6:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d12c      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	3b01      	subs	r3, #1
 80018f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d123      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d11b      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d113      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d109      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	085b      	lsrs	r3, r3, #1
 800193c:	3b01      	subs	r3, #1
 800193e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d071      	beq.n	8001a28 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d068      	beq.n	8001a1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800194a:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d105      	bne.n	8001962 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0ac      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 800196c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001970:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001972:	f7ff f99f 	bl	8000cb4 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff f99b 	bl	8000cb4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e099      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x788>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019a8:	3a01      	subs	r2, #1
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ba:	0852      	lsrs	r2, r2, #1
 80019bc:	3a01      	subs	r2, #1
 80019be:	0552      	lsls	r2, r2, #21
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019c6:	0852      	lsrs	r2, r2, #1
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0652      	lsls	r2, r2, #25
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019d2:	06d2      	lsls	r2, r2, #27
 80019d4:	430a      	orrs	r2, r1
 80019d6:	4912      	ldr	r1, [pc, #72]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f4:	f7ff f95e 	bl	8000cb4 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f95a 	bl	8000cb4 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e058      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCC_OscConfig+0x784>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a1a:	e050      	b.n	8001abe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e04f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
 8001a20:	40021000 	.word	0x40021000
 8001a24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d144      	bne.n	8001abe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a4c:	f7ff f932 	bl	8000cb4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f92e 	bl	8000cb4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e02c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x7b8>
 8001a72:	e024      	b.n	8001abe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d01f      	beq.n	8001aba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f915 	bl	8000cb4 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f911 	bl	8000cb4 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	4905      	ldr	r1, [pc, #20]	; (8001ac8 <HAL_RCC_OscConfig+0x82c>)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x830>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
 8001ab8:	e001      	b.n	8001abe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	feeefffc 	.word	0xfeeefffc

08001ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0e7      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b75      	ldr	r3, [pc, #468]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d910      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0207 	bic.w	r2, r3, #7
 8001afa:	4970      	ldr	r1, [pc, #448]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b6e      	ldr	r3, [pc, #440]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0cf      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d908      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4960      	ldr	r1, [pc, #384]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d04c      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0a6      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6e:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e09a      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e08e      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b96:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e086      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4943      	ldr	r1, [pc, #268]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f87c 	bl	8000cb4 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff f878 	bl	8000cb4 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e06e      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d010      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d208      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	492b      	ldr	r1, [pc, #172]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d210      	bcs.n	8001c46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 0207 	bic.w	r2, r3, #7
 8001c2c:	4923      	ldr	r1, [pc, #140]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e036      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	4918      	ldr	r1, [pc, #96]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4910      	ldr	r1, [pc, #64]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c84:	f000 f824 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	490b      	ldr	r1, [pc, #44]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1fc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fe63 	bl	8000974 <HAL_InitTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08007a38 	.word	0x08007a38
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d121      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d11e      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e005      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d2c:	4a2b      	ldr	r2, [pc, #172]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	e004      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d134      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d003      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0xac>
 8001d74:	e005      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	e005      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d7e:	617b      	str	r3, [r7, #20]
      break;
 8001d80:	e002      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	617b      	str	r3, [r7, #20]
      break;
 8001d86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	3301      	adds	r3, #1
 8001d94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	fb03 f202 	mul.w	r2, r3, r2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0e5b      	lsrs	r3, r3, #25
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	3301      	adds	r3, #1
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08007a50 	.word	0x08007a50
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4904      	ldr	r1, [pc, #16]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	08007a48 	.word	0x08007a48

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e30:	f7ff ffda 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0adb      	lsrs	r3, r3, #11
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4904      	ldr	r1, [pc, #16]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08007a48 	.word	0x08007a48

08001e58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	220f      	movs	r2, #15
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_RCC_GetClockConfig+0x60>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0207 	and.w	r2, r3, #7
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40022000 	.word	0x40022000

08001ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ed4:	f7ff f96e 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 8001ed8:	6178      	str	r0, [r7, #20]
 8001eda:	e014      	b.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ef4:	f7ff f95e 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 8001ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0c:	d10b      	bne.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d919      	bls.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2ba0      	cmp	r3, #160	; 0xa0
 8001f18:	d902      	bls.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e013      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e010      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d902      	bls.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e00a      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d102      	bne.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f38:	2302      	movs	r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e004      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d101      	bne.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 0207 	bic.w	r2, r3, #7
 8001f50:	4909      	ldr	r1, [pc, #36]	; (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f84:	2300      	movs	r3, #0
 8001f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d041      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fa0:	d02a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fa6:	d824      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fac:	d008      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fb2:	d81e      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbc:	d010      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fc0:	4b86      	ldr	r3, [pc, #536]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a85      	ldr	r2, [pc, #532]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fcc:	e015      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 facd 	bl	8002574 <RCCEx_PLLSAI1_Config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fde:	e00c      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fbb6 	bl	8002758 <RCCEx_PLLSAI2_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff0:	e003      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff6:	e000      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002000:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800200e:	4973      	ldr	r1, [pc, #460]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002016:	e001      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d041      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800202c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002030:	d02a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002032:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002036:	d824      	bhi.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800203c:	d008      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800203e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002042:	d81e      	bhi.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204c:	d010      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800204e:	e018      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a61      	ldr	r2, [pc, #388]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800205c:	e015      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fa85 	bl	8002574 <RCCEx_PLLSAI1_Config>
 800206a:	4603      	mov	r3, r0
 800206c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800206e:	e00c      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3320      	adds	r3, #32
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fb6e 	bl	8002758 <RCCEx_PLLSAI2_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002080:	e003      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	74fb      	strb	r3, [r7, #19]
      break;
 8002086:	e000      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002090:	4b52      	ldr	r3, [pc, #328]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209e:	494f      	ldr	r1, [pc, #316]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020a6:	e001      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a0 	beq.w	80021fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020ce:	2300      	movs	r3, #0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a40      	ldr	r2, [pc, #256]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
 80020e0:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fdda 	bl	8000cb4 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002102:	e009      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7fe fdd6 	bl	8000cb4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d902      	bls.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	74fb      	strb	r3, [r7, #19]
        break;
 8002116:	e005      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d15c      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002134:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01f      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	d019      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002174:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fd95 	bl	8000cb4 <HAL_GetTick>
 800218a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218c:	e00b      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fd91 	bl	8000cb4 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d902      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	74fb      	strb	r3, [r7, #19]
            break;
 80021a4:	e006      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ec      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021d2:	e009      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
 80021d8:	e006      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e8:	7c7b      	ldrb	r3, [r7, #17]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ee:	4ba6      	ldr	r3, [pc, #664]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	4aa5      	ldr	r2, [pc, #660]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002206:	4ba0      	ldr	r3, [pc, #640]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f023 0203 	bic.w	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	499c      	ldr	r1, [pc, #624]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002228:	4b97      	ldr	r3, [pc, #604]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f023 020c 	bic.w	r2, r3, #12
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	4994      	ldr	r1, [pc, #592]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800224a:	4b8f      	ldr	r3, [pc, #572]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	498b      	ldr	r1, [pc, #556]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800226c:	4b86      	ldr	r3, [pc, #536]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4983      	ldr	r1, [pc, #524]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800228e:	4b7e      	ldr	r3, [pc, #504]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229c:	497a      	ldr	r1, [pc, #488]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b0:	4b75      	ldr	r3, [pc, #468]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	4972      	ldr	r1, [pc, #456]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	4969      	ldr	r1, [pc, #420]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022f4:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002302:	4961      	ldr	r1, [pc, #388]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	4958      	ldr	r1, [pc, #352]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	4950      	ldr	r1, [pc, #320]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800235a:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	4947      	ldr	r1, [pc, #284]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800237e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002382:	f023 0203 	bic.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	493f      	ldr	r1, [pc, #252]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d028      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4936      	ldr	r1, [pc, #216]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023bc:	d106      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4a31      	ldr	r2, [pc, #196]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c8:	60d3      	str	r3, [r2, #12]
 80023ca:	e011      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f8c9 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d028      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	491f      	ldr	r1, [pc, #124]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800241a:	d106      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
 8002428:	e011      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002432:	d10c      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f89a 	bl	8002574 <RCCEx_PLLSAI1_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d02a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002478:	d108      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800247a:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	4a02      	ldr	r2, [pc, #8]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002484:	60d3      	str	r3, [r2, #12]
 8002486:	e013      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002488:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	2101      	movs	r1, #1
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f869 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d02f      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024bc:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ca:	4929      	ldr	r1, [pc, #164]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024da:	d10d      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f846 	bl	8002574 <RCCEx_PLLSAI1_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d014      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	74bb      	strb	r3, [r7, #18]
 80024f6:	e011      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002500:	d10c      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	2102      	movs	r1, #2
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f925 	bl	8002758 <RCCEx_PLLSAI2_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002512:	7cfb      	ldrb	r3, [r7, #19]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002538:	490d      	ldr	r1, [pc, #52]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002564:	7cbb      	ldrb	r3, [r7, #18]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000

08002574 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002582:	4b74      	ldr	r3, [pc, #464]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d018      	beq.n	80025c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0203 	and.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d10d      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
       ||
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025a6:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
       ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d047      	beq.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e044      	b.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d018      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0x86>
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d825      	bhi.n	8002618 <RCCEx_PLLSAI1_Config+0xa4>
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0x62>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d009      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x74>
 80025d4:	e020      	b.n	8002618 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e6:	e01a      	b.n	800261e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025e8:	4b5a      	ldr	r3, [pc, #360]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d116      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e013      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fa:	4b56      	ldr	r3, [pc, #344]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002616:	e006      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      break;
 800261c:	e004      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800261e:	bf00      	nop
 8002620:	e002      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e000      	b.n	8002628 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002626:	bf00      	nop
    }

    if(status == HAL_OK)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	430b      	orrs	r3, r1
 8002644:	4943      	ldr	r1, [pc, #268]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d17c      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800265a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fb2a 	bl	8000cb4 <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002662:	e009      	b.n	8002678 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002664:	f7fe fb26 	bl	8000cb4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	73fb      	strb	r3, [r7, #15]
        break;
 8002676:	e005      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002678:	4b36      	ldr	r3, [pc, #216]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ef      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d15f      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d110      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002690:	4b30      	ldr	r3, [pc, #192]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002698:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	0211      	lsls	r1, r2, #8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68d2      	ldr	r2, [r2, #12]
 80026a6:	06d2      	lsls	r2, r2, #27
 80026a8:	430a      	orrs	r2, r1
 80026aa:	492a      	ldr	r1, [pc, #168]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	610b      	str	r3, [r1, #16]
 80026b0:	e027      	b.n	8002702 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d112      	bne.n	80026de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6912      	ldr	r2, [r2, #16]
 80026ce:	0852      	lsrs	r2, r2, #1
 80026d0:	3a01      	subs	r2, #1
 80026d2:	0552      	lsls	r2, r2, #21
 80026d4:	430a      	orrs	r2, r1
 80026d6:	491f      	ldr	r1, [pc, #124]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	610b      	str	r3, [r1, #16]
 80026dc:	e011      	b.n	8002702 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6892      	ldr	r2, [r2, #8]
 80026ee:	0211      	lsls	r1, r2, #8
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6952      	ldr	r2, [r2, #20]
 80026f4:	0852      	lsrs	r2, r2, #1
 80026f6:	3a01      	subs	r2, #1
 80026f8:	0652      	lsls	r2, r2, #25
 80026fa:	430a      	orrs	r2, r1
 80026fc:	4915      	ldr	r1, [pc, #84]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a13      	ldr	r2, [pc, #76]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800270c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fad1 	bl	8000cb4 <HAL_GetTick>
 8002712:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002714:	e009      	b.n	800272a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002716:	f7fe facd 	bl	8000cb4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d902      	bls.n	800272a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	73fb      	strb	r3, [r7, #15]
          break;
 8002728:	e005      	b.n	8002736 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ef      	beq.n	8002716 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d106      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000

08002758 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002766:	4b69      	ldr	r3, [pc, #420]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d018      	beq.n	80027a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002772:	4b66      	ldr	r3, [pc, #408]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d10d      	bne.n	800279e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
       ||
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800278a:	4b60      	ldr	r3, [pc, #384]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
       ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d047      	beq.n	800282e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	e044      	b.n	800282e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d018      	beq.n	80027de <RCCEx_PLLSAI2_Config+0x86>
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d825      	bhi.n	80027fc <RCCEx_PLLSAI2_Config+0xa4>
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d002      	beq.n	80027ba <RCCEx_PLLSAI2_Config+0x62>
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d009      	beq.n	80027cc <RCCEx_PLLSAI2_Config+0x74>
 80027b8:	e020      	b.n	80027fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ba:	4b54      	ldr	r3, [pc, #336]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11d      	bne.n	8002802 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ca:	e01a      	b.n	8002802 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027cc:	4b4f      	ldr	r3, [pc, #316]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d116      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027dc:	e013      	b.n	8002806 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027de:	4b4b      	ldr	r3, [pc, #300]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ea:	4b48      	ldr	r3, [pc, #288]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027fa:	e006      	b.n	800280a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	e004      	b.n	800280c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002802:	bf00      	nop
 8002804:	e002      	b.n	800280c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800280a:	bf00      	nop
    }

    if(status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10d      	bne.n	800282e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	430b      	orrs	r3, r1
 8002828:	4938      	ldr	r1, [pc, #224]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d166      	bne.n	8002902 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a34      	ldr	r2, [pc, #208]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002840:	f7fe fa38 	bl	8000cb4 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002846:	e009      	b.n	800285c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002848:	f7fe fa34 	bl	8000cb4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d902      	bls.n	800285c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	73fb      	strb	r3, [r7, #15]
        break;
 800285a:	e005      	b.n	8002868 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ef      	bne.n	8002848 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d149      	bne.n	8002902 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d110      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800287c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6892      	ldr	r2, [r2, #8]
 8002884:	0211      	lsls	r1, r2, #8
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68d2      	ldr	r2, [r2, #12]
 800288a:	06d2      	lsls	r2, r2, #27
 800288c:	430a      	orrs	r2, r1
 800288e:	491f      	ldr	r1, [pc, #124]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	614b      	str	r3, [r1, #20]
 8002894:	e011      	b.n	80028ba <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800289e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6892      	ldr	r2, [r2, #8]
 80028a6:	0211      	lsls	r1, r2, #8
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6912      	ldr	r2, [r2, #16]
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0652      	lsls	r2, r2, #25
 80028b2:	430a      	orrs	r2, r1
 80028b4:	4915      	ldr	r1, [pc, #84]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a13      	ldr	r2, [pc, #76]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7fe f9f5 	bl	8000cb4 <HAL_GetTick>
 80028ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028cc:	e009      	b.n	80028e2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ce:	f7fe f9f1 	bl	8000cb4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d902      	bls.n	80028e2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	73fb      	strb	r3, [r7, #15]
          break;
 80028e0:	e005      	b.n	80028ee <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ef      	beq.n	80028ce <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000

08002910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e049      	b.n	80029b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f841 	bl	80029be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f000 f9da 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d001      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e04f      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01d      	beq.n	8002a4a <HAL_TIM_Base_Start_IT+0x76>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d018      	beq.n	8002a4a <HAL_TIM_Base_Start_IT+0x76>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <HAL_TIM_Base_Start_IT+0xc8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_TIM_Base_Start_IT+0x76>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_TIM_Base_Start_IT+0x76>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_TIM_Base_Start_IT+0x76>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_TIM_Base_Start_IT+0x76>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_TIM_Base_Start_IT+0xd8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d115      	bne.n	8002a76 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d015      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0xb4>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a62:	d011      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	e008      	b.n	8002a88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e000      	b.n	8002a8a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40013400 	.word	0x40013400
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	00010007 	.word	0x00010007

08002ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d020      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01b      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0202 	mvn.w	r2, #2
 8002ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8e4 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8d6 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8e7 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d020      	beq.n	8002b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01b      	beq.n	8002b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0204 	mvn.w	r2, #4
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8be 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8b0 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8c1 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d020      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01b      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0208 	mvn.w	r2, #8
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2204      	movs	r2, #4
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f898 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f88a 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f89b 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d020      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0210 	mvn.w	r2, #16
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f872 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f864 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f875 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0201 	mvn.w	r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fe0a 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00c      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f906 	bl	8002e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8fe 	bl	8002e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00c      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f834 	bl	8002cf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0220 	mvn.w	r2, #32
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8c6 	bl	8002e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a40      	ldr	r2, [pc, #256]	; (8002e1c <TIM_Base_SetConfig+0x114>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d013      	beq.n	8002d48 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d00f      	beq.n	8002d48 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3d      	ldr	r2, [pc, #244]	; (8002e20 <TIM_Base_SetConfig+0x118>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a3c      	ldr	r2, [pc, #240]	; (8002e24 <TIM_Base_SetConfig+0x11c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <TIM_Base_SetConfig+0x120>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <TIM_Base_SetConfig+0x124>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d108      	bne.n	8002d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <TIM_Base_SetConfig+0x114>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d01b      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2c      	ldr	r2, [pc, #176]	; (8002e20 <TIM_Base_SetConfig+0x118>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d017      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2b      	ldr	r2, [pc, #172]	; (8002e24 <TIM_Base_SetConfig+0x11c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <TIM_Base_SetConfig+0x120>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00f      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <TIM_Base_SetConfig+0x124>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <TIM_Base_SetConfig+0x128>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <TIM_Base_SetConfig+0x12c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_Base_SetConfig+0x9a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <TIM_Base_SetConfig+0x130>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d108      	bne.n	8002db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <TIM_Base_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00f      	beq.n	8002e00 <TIM_Base_SetConfig+0xf8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <TIM_Base_SetConfig+0x124>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <TIM_Base_SetConfig+0xf8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <TIM_Base_SetConfig+0x128>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_Base_SetConfig+0xf8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <TIM_Base_SetConfig+0x12c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_Base_SetConfig+0xf8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <TIM_Base_SetConfig+0x130>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d103      	bne.n	8002e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	615a      	str	r2, [r3, #20]
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40000c00 	.word	0x40000c00
 8002e2c:	40013400 	.word	0x40013400
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40014400 	.word	0x40014400
 8002e38:	40014800 	.word	0x40014800

08002e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e040      	b.n	8002f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fd0a 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb6a 	bl	8003598 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8af 	bl	8003028 <UART_SetConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e01b      	b.n	8002f0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fbe9 	bl	80036dc <UART_CheckIdleState>
 8002f0a:	4603      	mov	r3, r0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d178      	bne.n	800301e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Transmit+0x24>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e071      	b.n	8003020 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fd feb3 	bl	8000cb4 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e030      	b.n	8002fe8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fc4b 	bl	800382c <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e03c      	b.n	8003020 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e008      	b.n	8002fd6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1c8      	bne.n	8002f86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2140      	movs	r1, #64	; 0x40
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fc14 	bl	800382c <UART_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e005      	b.n	8003020 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b08a      	sub	sp, #40	; 0x28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4313      	orrs	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4ba4      	ldr	r3, [pc, #656]	; (80032e8 <UART_SetConfig+0x2c0>)
 8003058:	4013      	ands	r3, r2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003060:	430b      	orrs	r3, r1
 8003062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a99      	ldr	r2, [pc, #612]	; (80032ec <UART_SetConfig+0x2c4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	4313      	orrs	r3, r2
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <UART_SetConfig+0x2c8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d126      	bne.n	8003100 <UART_SetConfig+0xd8>
 80030b2:	4b90      	ldr	r3, [pc, #576]	; (80032f4 <UART_SetConfig+0x2cc>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d81b      	bhi.n	80030f8 <UART_SetConfig+0xd0>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <UART_SetConfig+0xa0>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030f1 	.word	0x080030f1
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e116      	b.n	800330e <UART_SetConfig+0x2e6>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e112      	b.n	800330e <UART_SetConfig+0x2e6>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e10e      	b.n	800330e <UART_SetConfig+0x2e6>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e10a      	b.n	800330e <UART_SetConfig+0x2e6>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e106      	b.n	800330e <UART_SetConfig+0x2e6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a7c      	ldr	r2, [pc, #496]	; (80032f8 <UART_SetConfig+0x2d0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d138      	bne.n	800317c <UART_SetConfig+0x154>
 800310a:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <UART_SetConfig+0x2cc>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d82d      	bhi.n	8003174 <UART_SetConfig+0x14c>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <UART_SetConfig+0xf8>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003155 	.word	0x08003155
 8003124:	08003175 	.word	0x08003175
 8003128:	08003175 	.word	0x08003175
 800312c:	08003175 	.word	0x08003175
 8003130:	08003165 	.word	0x08003165
 8003134:	08003175 	.word	0x08003175
 8003138:	08003175 	.word	0x08003175
 800313c:	08003175 	.word	0x08003175
 8003140:	0800315d 	.word	0x0800315d
 8003144:	08003175 	.word	0x08003175
 8003148:	08003175 	.word	0x08003175
 800314c:	08003175 	.word	0x08003175
 8003150:	0800316d 	.word	0x0800316d
 8003154:	2300      	movs	r3, #0
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315a:	e0d8      	b.n	800330e <UART_SetConfig+0x2e6>
 800315c:	2302      	movs	r3, #2
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003162:	e0d4      	b.n	800330e <UART_SetConfig+0x2e6>
 8003164:	2304      	movs	r3, #4
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316a:	e0d0      	b.n	800330e <UART_SetConfig+0x2e6>
 800316c:	2308      	movs	r3, #8
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003172:	e0cc      	b.n	800330e <UART_SetConfig+0x2e6>
 8003174:	2310      	movs	r3, #16
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317a:	e0c8      	b.n	800330e <UART_SetConfig+0x2e6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5e      	ldr	r2, [pc, #376]	; (80032fc <UART_SetConfig+0x2d4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d125      	bne.n	80031d2 <UART_SetConfig+0x1aa>
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003190:	2b30      	cmp	r3, #48	; 0x30
 8003192:	d016      	beq.n	80031c2 <UART_SetConfig+0x19a>
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	d818      	bhi.n	80031ca <UART_SetConfig+0x1a2>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d00a      	beq.n	80031b2 <UART_SetConfig+0x18a>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d814      	bhi.n	80031ca <UART_SetConfig+0x1a2>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <UART_SetConfig+0x182>
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d008      	beq.n	80031ba <UART_SetConfig+0x192>
 80031a8:	e00f      	b.n	80031ca <UART_SetConfig+0x1a2>
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b0:	e0ad      	b.n	800330e <UART_SetConfig+0x2e6>
 80031b2:	2302      	movs	r3, #2
 80031b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b8:	e0a9      	b.n	800330e <UART_SetConfig+0x2e6>
 80031ba:	2304      	movs	r3, #4
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c0:	e0a5      	b.n	800330e <UART_SetConfig+0x2e6>
 80031c2:	2308      	movs	r3, #8
 80031c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c8:	e0a1      	b.n	800330e <UART_SetConfig+0x2e6>
 80031ca:	2310      	movs	r3, #16
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d0:	e09d      	b.n	800330e <UART_SetConfig+0x2e6>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <UART_SetConfig+0x2d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d125      	bne.n	8003228 <UART_SetConfig+0x200>
 80031dc:	4b45      	ldr	r3, [pc, #276]	; (80032f4 <UART_SetConfig+0x2cc>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031e6:	2bc0      	cmp	r3, #192	; 0xc0
 80031e8:	d016      	beq.n	8003218 <UART_SetConfig+0x1f0>
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d818      	bhi.n	8003220 <UART_SetConfig+0x1f8>
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d00a      	beq.n	8003208 <UART_SetConfig+0x1e0>
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d814      	bhi.n	8003220 <UART_SetConfig+0x1f8>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <UART_SetConfig+0x1d8>
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d008      	beq.n	8003210 <UART_SetConfig+0x1e8>
 80031fe:	e00f      	b.n	8003220 <UART_SetConfig+0x1f8>
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e082      	b.n	800330e <UART_SetConfig+0x2e6>
 8003208:	2302      	movs	r3, #2
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e07e      	b.n	800330e <UART_SetConfig+0x2e6>
 8003210:	2304      	movs	r3, #4
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003216:	e07a      	b.n	800330e <UART_SetConfig+0x2e6>
 8003218:	2308      	movs	r3, #8
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321e:	e076      	b.n	800330e <UART_SetConfig+0x2e6>
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003226:	e072      	b.n	800330e <UART_SetConfig+0x2e6>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a35      	ldr	r2, [pc, #212]	; (8003304 <UART_SetConfig+0x2dc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12a      	bne.n	8003288 <UART_SetConfig+0x260>
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003240:	d01a      	beq.n	8003278 <UART_SetConfig+0x250>
 8003242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003246:	d81b      	bhi.n	8003280 <UART_SetConfig+0x258>
 8003248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324c:	d00c      	beq.n	8003268 <UART_SetConfig+0x240>
 800324e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003252:	d815      	bhi.n	8003280 <UART_SetConfig+0x258>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <UART_SetConfig+0x238>
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d008      	beq.n	8003270 <UART_SetConfig+0x248>
 800325e:	e00f      	b.n	8003280 <UART_SetConfig+0x258>
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e052      	b.n	800330e <UART_SetConfig+0x2e6>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e04e      	b.n	800330e <UART_SetConfig+0x2e6>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e04a      	b.n	800330e <UART_SetConfig+0x2e6>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e046      	b.n	800330e <UART_SetConfig+0x2e6>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e042      	b.n	800330e <UART_SetConfig+0x2e6>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <UART_SetConfig+0x2c4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d13a      	bne.n	8003308 <UART_SetConfig+0x2e0>
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800329c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a0:	d01a      	beq.n	80032d8 <UART_SetConfig+0x2b0>
 80032a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a6:	d81b      	bhi.n	80032e0 <UART_SetConfig+0x2b8>
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ac:	d00c      	beq.n	80032c8 <UART_SetConfig+0x2a0>
 80032ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b2:	d815      	bhi.n	80032e0 <UART_SetConfig+0x2b8>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <UART_SetConfig+0x298>
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d008      	beq.n	80032d0 <UART_SetConfig+0x2a8>
 80032be:	e00f      	b.n	80032e0 <UART_SetConfig+0x2b8>
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e022      	b.n	800330e <UART_SetConfig+0x2e6>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e01e      	b.n	800330e <UART_SetConfig+0x2e6>
 80032d0:	2304      	movs	r3, #4
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d6:	e01a      	b.n	800330e <UART_SetConfig+0x2e6>
 80032d8:	2308      	movs	r3, #8
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e016      	b.n	800330e <UART_SetConfig+0x2e6>
 80032e0:	2310      	movs	r3, #16
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	e012      	b.n	800330e <UART_SetConfig+0x2e6>
 80032e8:	efff69f3 	.word	0xefff69f3
 80032ec:	40008000 	.word	0x40008000
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40004400 	.word	0x40004400
 80032fc:	40004800 	.word	0x40004800
 8003300:	40004c00 	.word	0x40004c00
 8003304:	40005000 	.word	0x40005000
 8003308:	2310      	movs	r3, #16
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a9f      	ldr	r2, [pc, #636]	; (8003590 <UART_SetConfig+0x568>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d17a      	bne.n	800340e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800331c:	2b08      	cmp	r3, #8
 800331e:	d824      	bhi.n	800336a <UART_SetConfig+0x342>
 8003320:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <UART_SetConfig+0x300>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	0800334d 	.word	0x0800334d
 800332c:	0800336b 	.word	0x0800336b
 8003330:	08003355 	.word	0x08003355
 8003334:	0800336b 	.word	0x0800336b
 8003338:	0800335b 	.word	0x0800335b
 800333c:	0800336b 	.word	0x0800336b
 8003340:	0800336b 	.word	0x0800336b
 8003344:	0800336b 	.word	0x0800336b
 8003348:	08003363 	.word	0x08003363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7fe fd58 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8003350:	61f8      	str	r0, [r7, #28]
        break;
 8003352:	e010      	b.n	8003376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003354:	4b8f      	ldr	r3, [pc, #572]	; (8003594 <UART_SetConfig+0x56c>)
 8003356:	61fb      	str	r3, [r7, #28]
        break;
 8003358:	e00d      	b.n	8003376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335a:	f7fe fcb9 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 800335e:	61f8      	str	r0, [r7, #28]
        break;
 8003360:	e009      	b.n	8003376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	61fb      	str	r3, [r7, #28]
        break;
 8003368:	e005      	b.n	8003376 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80fb 	beq.w	8003574 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	429a      	cmp	r2, r3
 800338c:	d305      	bcc.n	800339a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d903      	bls.n	80033a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033a0:	e0e8      	b.n	8003574 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2200      	movs	r2, #0
 80033a6:	461c      	mov	r4, r3
 80033a8:	4615      	mov	r5, r2
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	022b      	lsls	r3, r5, #8
 80033b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033b8:	0222      	lsls	r2, r4, #8
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	6849      	ldr	r1, [r1, #4]
 80033be:	0849      	lsrs	r1, r1, #1
 80033c0:	2000      	movs	r0, #0
 80033c2:	4688      	mov	r8, r1
 80033c4:	4681      	mov	r9, r0
 80033c6:	eb12 0a08 	adds.w	sl, r2, r8
 80033ca:	eb43 0b09 	adc.w	fp, r3, r9
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033dc:	4650      	mov	r0, sl
 80033de:	4659      	mov	r1, fp
 80033e0:	f7fc ff56 	bl	8000290 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f2:	d308      	bcc.n	8003406 <UART_SetConfig+0x3de>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fa:	d204      	bcs.n	8003406 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e0b6      	b.n	8003574 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800340c:	e0b2      	b.n	8003574 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003416:	d15e      	bne.n	80034d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800341c:	2b08      	cmp	r3, #8
 800341e:	d828      	bhi.n	8003472 <UART_SetConfig+0x44a>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <UART_SetConfig+0x400>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800344d 	.word	0x0800344d
 800342c:	08003455 	.word	0x08003455
 8003430:	0800345d 	.word	0x0800345d
 8003434:	08003473 	.word	0x08003473
 8003438:	08003463 	.word	0x08003463
 800343c:	08003473 	.word	0x08003473
 8003440:	08003473 	.word	0x08003473
 8003444:	08003473 	.word	0x08003473
 8003448:	0800346b 	.word	0x0800346b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800344c:	f7fe fcd8 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8003450:	61f8      	str	r0, [r7, #28]
        break;
 8003452:	e014      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003454:	f7fe fcea 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8003458:	61f8      	str	r0, [r7, #28]
        break;
 800345a:	e010      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800345c:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <UART_SetConfig+0x56c>)
 800345e:	61fb      	str	r3, [r7, #28]
        break;
 8003460:	e00d      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003462:	f7fe fc35 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8003466:	61f8      	str	r0, [r7, #28]
        break;
 8003468:	e009      	b.n	800347e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346e:	61fb      	str	r3, [r7, #28]
        break;
 8003470:	e005      	b.n	800347e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800347c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d077      	beq.n	8003574 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005a      	lsls	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b0f      	cmp	r3, #15
 800349e:	d916      	bls.n	80034ce <UART_SetConfig+0x4a6>
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a6:	d212      	bcs.n	80034ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f023 030f 	bic.w	r3, r3, #15
 80034b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	b29a      	uxth	r2, r3
 80034be:	8afb      	ldrh	r3, [r7, #22]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	8afa      	ldrh	r2, [r7, #22]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	e052      	b.n	8003574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034d4:	e04e      	b.n	8003574 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d827      	bhi.n	800352e <UART_SetConfig+0x506>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <UART_SetConfig+0x4bc>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	08003509 	.word	0x08003509
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003519 	.word	0x08003519
 80034f0:	0800352f 	.word	0x0800352f
 80034f4:	0800351f 	.word	0x0800351f
 80034f8:	0800352f 	.word	0x0800352f
 80034fc:	0800352f 	.word	0x0800352f
 8003500:	0800352f 	.word	0x0800352f
 8003504:	08003527 	.word	0x08003527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7fe fc7a 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 800350c:	61f8      	str	r0, [r7, #28]
        break;
 800350e:	e014      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003510:	f7fe fc8c 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8003514:	61f8      	str	r0, [r7, #28]
        break;
 8003516:	e010      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <UART_SetConfig+0x56c>)
 800351a:	61fb      	str	r3, [r7, #28]
        break;
 800351c:	e00d      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351e:	f7fe fbd7 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8003522:	61f8      	str	r0, [r7, #28]
        break;
 8003524:	e009      	b.n	800353a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	61fb      	str	r3, [r7, #28]
        break;
 800352c:	e005      	b.n	800353a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003538:	bf00      	nop
    }

    if (pclk != 0U)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d019      	beq.n	8003574 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	085a      	lsrs	r2, r3, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	441a      	add	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b0f      	cmp	r3, #15
 8003558:	d909      	bls.n	800356e <UART_SetConfig+0x546>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d205      	bcs.n	800356e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	e002      	b.n	8003574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003580:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003584:	4618      	mov	r0, r3
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358e:	bf00      	nop
 8003590:	40008000 	.word	0x40008000
 8003594:	00f42400 	.word	0x00f42400

08003598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01a      	beq.n	80036ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003696:	d10a      	bne.n	80036ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
  }
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b098      	sub	sp, #96	; 0x60
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ec:	f7fd fae2 	bl	8000cb4 <HAL_GetTick>
 80036f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d12e      	bne.n	800375e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f88c 	bl	800382c <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d021      	beq.n	800375e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372e:	653b      	str	r3, [r7, #80]	; 0x50
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
 800373a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800373e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e6      	bne.n	800371a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e062      	b.n	8003824 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b04      	cmp	r3, #4
 800376a:	d149      	bne.n	8003800 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f856 	bl	800382c <UART_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03c      	beq.n	8003800 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	623b      	str	r3, [r7, #32]
   return(result);
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
 80037a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e6      	bne.n	8003786 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037d8:	61fa      	str	r2, [r7, #28]
 80037da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	617b      	str	r3, [r7, #20]
   return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e5      	bne.n	80037b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e011      	b.n	8003824 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3758      	adds	r7, #88	; 0x58
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383c:	e049      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003844:	d045      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fd fa35 	bl	8000cb4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <UART_WaitOnFlagUntilTimeout+0x30>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e048      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d031      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b08      	cmp	r3, #8
 800387a:	d110      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2208      	movs	r2, #8
 8003882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f838 	bl	80038fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2208      	movs	r2, #8
 800388e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e029      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ac:	d111      	bne.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f81e 	bl	80038fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e00f      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d0a6      	beq.n	800383e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b095      	sub	sp, #84	; 0x54
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
 8003922:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	61fb      	str	r3, [r7, #28]
   return(result);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3308      	adds	r3, #8
 8003952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e5      	bne.n	8003934 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396c:	2b01      	cmp	r3, #1
 800396e:	d118      	bne.n	80039a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	60bb      	str	r3, [r7, #8]
   return(result);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f023 0310 	bic.w	r3, r3, #16
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	613b      	str	r3, [r7, #16]
   return(result);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e6      	bne.n	8003970 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039b6:	bf00      	nop
 80039b8:	3754      	adds	r7, #84	; 0x54
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <__NVIC_SetPriority>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Handler+0x1c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a20:	f001 ff12 	bl	8005848 <xTaskGetSchedulerState>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a2a:	f002 fcfd 	bl	8006428 <xPortSysTickHandler>
  }
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f06f 0004 	mvn.w	r0, #4
 8003a42:	f7ff ffbf 	bl	80039c4 <__NVIC_SetPriority>
#endif
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a52:	f3ef 8305 	mrs	r3, IPSR
 8003a56:	603b      	str	r3, [r7, #0]
  return(result);
 8003a58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a5e:	f06f 0305 	mvn.w	r3, #5
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	e00c      	b.n	8003a80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <osKernelInitialize+0x44>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <osKernelInitialize+0x44>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e002      	b.n	8003a80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000174 	.word	0x20000174

08003a94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9a:	f3ef 8305 	mrs	r3, IPSR
 8003a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <osKernelStart+0x1a>
    stat = osErrorISR;
 8003aa6:	f06f 0305 	mvn.w	r3, #5
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	e010      	b.n	8003ad0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <osKernelStart+0x48>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d109      	bne.n	8003aca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ab6:	f7ff ffbf 	bl	8003a38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <osKernelStart+0x48>)
 8003abc:	2202      	movs	r2, #2
 8003abe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ac0:	f001 fa66 	bl	8004f90 <vTaskStartScheduler>
      stat = osOK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e002      	b.n	8003ad0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ad0:	687b      	ldr	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000174 	.word	0x20000174

08003ae0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003af0:	f3ef 8305 	mrs	r3, IPSR
 8003af4:	617b      	str	r3, [r7, #20]
  return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d17e      	bne.n	8003bfa <osThreadNew+0x11a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d07b      	beq.n	8003bfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b06:	2318      	movs	r3, #24
 8003b08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d045      	beq.n	8003ba6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osThreadNew+0x48>
        name = attr->name;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <osThreadNew+0x6e>
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b38      	cmp	r3, #56	; 0x38
 8003b40:	d805      	bhi.n	8003b4e <osThreadNew+0x6e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <osThreadNew+0x72>
        return (NULL);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e054      	b.n	8003bfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <osThreadNew+0xa8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2ba7      	cmp	r3, #167	; 0xa7
 8003b70:	d90a      	bls.n	8003b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <osThreadNew+0xa8>
        mem = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e010      	b.n	8003baa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10c      	bne.n	8003baa <osThreadNew+0xca>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d108      	bne.n	8003baa <osThreadNew+0xca>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <osThreadNew+0xca>
          mem = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e001      	b.n	8003baa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d110      	bne.n	8003bd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb8:	9202      	str	r2, [sp, #8]
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fff6 	bl	8004bb8 <xTaskCreateStatic>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e013      	b.n	8003bfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d110      	bne.n	8003bfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f001 f841 	bl	8004c72 <xTaskCreate>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <osThreadNew+0x11a>
            hTask = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bfa:	693b      	ldr	r3, [r7, #16]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <osDelay+0x1c>
    stat = osErrorISR;
 8003c18:	f06f 0305 	mvn.w	r3, #5
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e007      	b.n	8003c30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 f97c 	bl	8004f28 <vTaskDelay>
    }
  }

  return (stat);
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b08a      	sub	sp, #40	; 0x28
 8003c3e:	af02      	add	r7, sp, #8
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c4a:	f3ef 8305 	mrs	r3, IPSR
 8003c4e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c50:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d15f      	bne.n	8003d16 <osMessageQueueNew+0xdc>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05c      	beq.n	8003d16 <osMessageQueueNew+0xdc>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d059      	beq.n	8003d16 <osMessageQueueNew+0xdc>
    mem = -1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d029      	beq.n	8003cc2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d012      	beq.n	8003c9c <osMessageQueueNew+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b4f      	cmp	r3, #79	; 0x4f
 8003c7c:	d90e      	bls.n	8003c9c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <osMessageQueueNew+0x62>
        mem = 1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e014      	b.n	8003cc6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d110      	bne.n	8003cc6 <osMessageQueueNew+0x8c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10c      	bne.n	8003cc6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <osMessageQueueNew+0x8c>
          mem = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e001      	b.n	8003cc6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10b      	bne.n	8003ce4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	9100      	str	r1, [sp, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fa2e 	bl	800413c <xQueueGenericCreateStatic>
 8003ce0:	61f8      	str	r0, [r7, #28]
 8003ce2:	e008      	b.n	8003cf6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003cea:	2200      	movs	r2, #0
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa9c 	bl	800422c <xQueueGenericCreate>
 8003cf4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <osMessageQueueNew+0xd0>
        name = attr->name;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e001      	b.n	8003d0e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003d0e:	6979      	ldr	r1, [r7, #20]
 8003d10:	69f8      	ldr	r0, [r7, #28]
 8003d12:	f000 fef3 	bl	8004afc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003d16:	69fb      	ldr	r3, [r7, #28]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d38:	f3ef 8305 	mrs	r3, IPSR
 8003d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d3e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d028      	beq.n	8003d96 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <osMessageQueuePut+0x36>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <osMessageQueuePut+0x36>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003d56:	f06f 0303 	mvn.w	r3, #3
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	e038      	b.n	8003dd0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003d62:	f107 0210 	add.w	r2, r7, #16
 8003d66:	2300      	movs	r3, #0
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	69b8      	ldr	r0, [r7, #24]
 8003d6c:	f000 fbba 	bl	80044e4 <xQueueGenericSendFromISR>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d003      	beq.n	8003d7e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003d76:	f06f 0302 	mvn.w	r3, #2
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e028      	b.n	8003dd0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d025      	beq.n	8003dd0 <osMessageQueuePut+0xb0>
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <osMessageQueuePut+0xbc>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	e01c      	b.n	8003dd0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <osMessageQueuePut+0x82>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003da2:	f06f 0303 	mvn.w	r3, #3
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	e012      	b.n	8003dd0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003daa:	2300      	movs	r3, #0
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	69b8      	ldr	r0, [r7, #24]
 8003db2:	f000 fa99 	bl	80042e8 <xQueueGenericSend>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d009      	beq.n	8003dd0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003dc2:	f06f 0301 	mvn.w	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e002      	b.n	8003dd0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003dca:	f06f 0302 	mvn.w	r3, #2
 8003dce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df6:	f3ef 8305 	mrs	r3, IPSR
 8003dfa:	617b      	str	r3, [r7, #20]
  return(result);
 8003dfc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d028      	beq.n	8003e54 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <osMessageQueueGet+0x34>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <osMessageQueueGet+0x34>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003e14:	f06f 0303 	mvn.w	r3, #3
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e037      	b.n	8003e8c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	461a      	mov	r2, r3
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	69b8      	ldr	r0, [r7, #24]
 8003e2a:	f000 fcd7 	bl	80047dc <xQueueReceiveFromISR>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d003      	beq.n	8003e3c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003e34:	f06f 0302 	mvn.w	r3, #2
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e027      	b.n	8003e8c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d024      	beq.n	8003e8c <osMessageQueueGet+0xac>
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <osMessageQueueGet+0xb8>)
 8003e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	e01b      	b.n	8003e8c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <osMessageQueueGet+0x80>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d103      	bne.n	8003e68 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003e60:	f06f 0303 	mvn.w	r3, #3
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e011      	b.n	8003e8c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	69b8      	ldr	r0, [r7, #24]
 8003e6e:	f000 fbd5 	bl	800461c <xQueueReceive>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d009      	beq.n	8003e8c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003e7e:	f06f 0301 	mvn.w	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	e002      	b.n	8003e8c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003e86:	f06f 0302 	mvn.w	r3, #2
 8003e8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <vApplicationGetIdleTaskMemory+0x30>)
 8003eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	601a      	str	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000178 	.word	0x20000178
 8003ecc:	20000220 	.word	0x20000220

08003ed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a07      	ldr	r2, [pc, #28]	; (8003efc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <vApplicationGetTimerTaskMemory+0x30>)
 8003ee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	20000420 	.word	0x20000420
 8003f00:	200004c8 	.word	0x200004c8

08003f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f103 0208 	add.w	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f103 0208 	add.w	r2, r3, #8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f103 0208 	add.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fbc:	d103      	bne.n	8003fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e00c      	b.n	8003fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e002      	b.n	8003fd4 <vListInsert+0x2e>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d2f6      	bcs.n	8003fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6892      	ldr	r2, [r2, #8]
 800402e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6852      	ldr	r2, [r2, #4]
 8004038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d103      	bne.n	800404c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1e5a      	subs	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004096:	f002 f935 	bl	8006304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	3b01      	subs	r3, #1
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	441a      	add	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22ff      	movs	r2, #255	; 0xff
 80040e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d114      	bne.n	8004116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01a      	beq.n	800412a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3310      	adds	r3, #16
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f9e3 	bl	80054c4 <xTaskRemoveFromEventList>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d012      	beq.n	800412a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <xQueueGenericReset+0xcc>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	e009      	b.n	800412a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3310      	adds	r3, #16
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fef2 	bl	8003f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3324      	adds	r3, #36	; 0x24
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff feed 	bl	8003f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800412a:	f002 f91b 	bl	8006364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800412e:	2301      	movs	r3, #1
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <xQueueGenericCreateStatic+0x52>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <xQueueGenericCreateStatic+0x56>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueGenericCreateStatic+0x58>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	623b      	str	r3, [r7, #32]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <xQueueGenericCreateStatic+0x7e>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <xQueueGenericCreateStatic+0x82>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <xQueueGenericCreateStatic+0x84>
 80041be:	2300      	movs	r3, #0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	61fb      	str	r3, [r7, #28]
}
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041da:	2350      	movs	r3, #80	; 0x50
 80041dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b50      	cmp	r3, #80	; 0x50
 80041e2:	d00a      	beq.n	80041fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	61bb      	str	r3, [r7, #24]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800420e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f83f 	bl	80042a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004224:	4618      	mov	r0, r3
 8004226:	3730      	adds	r7, #48	; 0x30
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	613b      	str	r3, [r7, #16]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3350      	adds	r3, #80	; 0x50
 8004264:	4618      	mov	r0, r3
 8004266:	f002 f96f 	bl	8006548 <pvPortMalloc>
 800426a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d011      	beq.n	8004296 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3350      	adds	r3, #80	; 0x50
 800427a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004284:	79fa      	ldrb	r2, [r7, #7]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f805 	bl	80042a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004296:	69bb      	ldr	r3, [r7, #24]
	}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e002      	b.n	80042c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042ce:	2101      	movs	r1, #1
 80042d0:	69b8      	ldr	r0, [r7, #24]
 80042d2:	f7ff fecb 	bl	800406c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042f6:	2300      	movs	r3, #0
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xQueueGenericSend+0x32>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <xQueueGenericSend+0x40>
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueGenericSend+0x44>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueGenericSend+0x46>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <xQueueGenericSend+0x60>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d103      	bne.n	8004356 <xQueueGenericSend+0x6e>
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <xQueueGenericSend+0x72>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <xQueueGenericSend+0x74>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <xQueueGenericSend+0x8e>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	623b      	str	r3, [r7, #32]
}
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004376:	f001 fa67 	bl	8005848 <xTaskGetSchedulerState>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <xQueueGenericSend+0x9e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <xQueueGenericSend+0xa2>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <xQueueGenericSend+0xa4>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	61fb      	str	r3, [r7, #28]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043a6:	f001 ffad 	bl	8006304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <xQueueGenericSend+0xd4>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d129      	bne.n	8004410 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043c2:	f000 fa8b 	bl	80048dc <prvCopyDataToQueue>
 80043c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d010      	beq.n	80043f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 f875 	bl	80054c4 <xTaskRemoveFromEventList>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043e0:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <xQueueGenericSend+0x1f8>)
 80043e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	e00a      	b.n	8004408 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043f8:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <xQueueGenericSend+0x1f8>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004408:	f001 ffac 	bl	8006364 <vPortExitCritical>
				return pdPASS;
 800440c:	2301      	movs	r3, #1
 800440e:	e063      	b.n	80044d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004416:	f001 ffa5 	bl	8006364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800441a:	2300      	movs	r3, #0
 800441c:	e05c      	b.n	80044d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800441e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f8af 	bl	800558c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800442e:	2301      	movs	r3, #1
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004432:	f001 ff97 	bl	8006364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004436:	f000 fe1b 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800443a:	f001 ff63 	bl	8006304 <vPortEnterCritical>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004444:	b25b      	sxtb	r3, r3
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800444a:	d103      	bne.n	8004454 <xQueueGenericSend+0x16c>
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800445a:	b25b      	sxtb	r3, r3
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004460:	d103      	bne.n	800446a <xQueueGenericSend+0x182>
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800446a:	f001 ff7b 	bl	8006364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800446e:	1d3a      	adds	r2, r7, #4
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f89e 	bl	80055b8 <xTaskCheckForTimeOut>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d124      	bne.n	80044cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004484:	f000 fb22 	bl	8004acc <prvIsQueueFull>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d018      	beq.n	80044c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	3310      	adds	r3, #16
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f000 ffc4 	bl	8005424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800449c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449e:	f000 faad 	bl	80049fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044a2:	f000 fdf3 	bl	800508c <xTaskResumeAll>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f47f af7c 	bne.w	80043a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <xQueueGenericSend+0x1f8>)
 80044b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	e772      	b.n	80043a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c2:	f000 fa9b 	bl	80049fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044c6:	f000 fde1 	bl	800508c <xTaskResumeAll>
 80044ca:	e76c      	b.n	80043a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ce:	f000 fa95 	bl	80049fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044d2:	f000 fddb 	bl	800508c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3738      	adds	r7, #56	; 0x38
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b090      	sub	sp, #64	; 0x40
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <xQueueGenericSendFromISR+0x3c>
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <xQueueGenericSendFromISR+0x40>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <xQueueGenericSendFromISR+0x42>
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d103      	bne.n	800454e <xQueueGenericSendFromISR+0x6a>
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <xQueueGenericSendFromISR+0x6e>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <xQueueGenericSendFromISR+0x70>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	623b      	str	r3, [r7, #32]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800456e:	f001 ffab 	bl	80064c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004572:	f3ef 8211 	mrs	r2, BASEPRI
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	61fa      	str	r2, [r7, #28]
 8004588:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800458a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <xQueueGenericSendFromISR+0xbc>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d12f      	bne.n	8004600 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045b6:	f000 f991 	bl	80048dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c2:	d112      	bne.n	80045ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d016      	beq.n	80045fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	3324      	adds	r3, #36	; 0x24
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 ff77 	bl	80054c4 <xTaskRemoveFromEventList>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00e      	beq.n	80045fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e007      	b.n	80045fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045ee:	3301      	adds	r3, #1
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	b25a      	sxtb	r2, r3
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045fa:	2301      	movs	r3, #1
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80045fe:	e001      	b.n	8004604 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004600:	2300      	movs	r3, #0
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004606:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800460e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004612:	4618      	mov	r0, r3
 8004614:	3740      	adds	r7, #64	; 0x40
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004628:	2300      	movs	r3, #0
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <xQueueReceive+0x30>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	623b      	str	r3, [r7, #32]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <xQueueReceive+0x3e>
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <xQueueReceive+0x42>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueReceive+0x44>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueReceive+0x5e>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	61fb      	str	r3, [r7, #28]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800467a:	f001 f8e5 	bl	8005848 <xTaskGetSchedulerState>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <xQueueReceive+0x6e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <xQueueReceive+0x72>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <xQueueReceive+0x74>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xQueueReceive+0x8e>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	61bb      	str	r3, [r7, #24]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046aa:	f001 fe2b 	bl	8006304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01f      	beq.n	80046fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046be:	f000 f977 	bl	80049b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	1e5a      	subs	r2, r3, #1
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00f      	beq.n	80046f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	3310      	adds	r3, #16
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fef4 	bl	80054c4 <xTaskRemoveFromEventList>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046e2:	4b3d      	ldr	r3, [pc, #244]	; (80047d8 <xQueueReceive+0x1bc>)
 80046e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046f2:	f001 fe37 	bl	8006364 <vPortExitCritical>
				return pdPASS;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e069      	b.n	80047ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004700:	f001 fe30 	bl	8006364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004704:	2300      	movs	r3, #0
 8004706:	e062      	b.n	80047ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800470e:	f107 0310 	add.w	r3, r7, #16
 8004712:	4618      	mov	r0, r3
 8004714:	f000 ff3a 	bl	800558c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004718:	2301      	movs	r3, #1
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800471c:	f001 fe22 	bl	8006364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004720:	f000 fca6 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004724:	f001 fdee 	bl	8006304 <vPortEnterCritical>
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800472e:	b25b      	sxtb	r3, r3
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004734:	d103      	bne.n	800473e <xQueueReceive+0x122>
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004744:	b25b      	sxtb	r3, r3
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800474a:	d103      	bne.n	8004754 <xQueueReceive+0x138>
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004754:	f001 fe06 	bl	8006364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004758:	1d3a      	adds	r2, r7, #4
 800475a:	f107 0310 	add.w	r3, r7, #16
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f000 ff29 	bl	80055b8 <xTaskCheckForTimeOut>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d123      	bne.n	80047b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800476c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800476e:	f000 f997 	bl	8004aa0 <prvIsQueueEmpty>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fe4f 	bl	8005424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004788:	f000 f938 	bl	80049fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800478c:	f000 fc7e 	bl	800508c <xTaskResumeAll>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d189      	bne.n	80046aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <xQueueReceive+0x1bc>)
 8004798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	e780      	b.n	80046aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047aa:	f000 f927 	bl	80049fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ae:	f000 fc6d 	bl	800508c <xTaskResumeAll>
 80047b2:	e77a      	b.n	80046aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b6:	f000 f921 	bl	80049fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ba:	f000 fc67 	bl	800508c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c0:	f000 f96e 	bl	8004aa0 <prvIsQueueEmpty>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f43f af6f 	beq.w	80046aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3730      	adds	r7, #48	; 0x30
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	; 0x38
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	623b      	str	r3, [r7, #32]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <xQueueReceiveFromISR+0x3a>
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <xQueueReceiveFromISR+0x3e>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueReceiveFromISR+0x40>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61fb      	str	r3, [r7, #28]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004836:	f001 fe47 	bl	80064c8 <vPortValidateInterruptPriority>
	__asm volatile
 800483a:	f3ef 8211 	mrs	r2, BASEPRI
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	61ba      	str	r2, [r7, #24]
 8004850:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004852:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02f      	beq.n	80048c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004870:	f000 f89e 	bl	80049b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	1e5a      	subs	r2, r3, #1
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800487c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004884:	d112      	bne.n	80048ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	3310      	adds	r3, #16
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fe16 	bl	80054c4 <xTaskRemoveFromEventList>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00e      	beq.n	80048bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e007      	b.n	80048bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80048ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048b0:	3301      	adds	r3, #1
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	b25a      	sxtb	r2, r3
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80048bc:	2301      	movs	r3, #1
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
 80048c0:	e001      	b.n	80048c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f383 8811 	msr	BASEPRI, r3
}
 80048d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3738      	adds	r7, #56	; 0x38
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10d      	bne.n	8004916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d14d      	bne.n	800499e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 ffbc 	bl	8005884 <xTaskPriorityDisinherit>
 800490c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	e043      	b.n	800499e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d119      	bne.n	8004950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6858      	ldr	r0, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	461a      	mov	r2, r3
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	f002 fad1 	bl	8006ece <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	441a      	add	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	d32b      	bcc.n	800499e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	e026      	b.n	800499e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68d8      	ldr	r0, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	461a      	mov	r2, r3
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	f002 fab7 	bl	8006ece <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	425b      	negs	r3, r3
 800496a:	441a      	add	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d207      	bcs.n	800498c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	425b      	negs	r3, r3
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d105      	bne.n	800499e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3b01      	subs	r3, #1
 800499c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049a6:	697b      	ldr	r3, [r7, #20]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d303      	bcc.n	80049e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68d9      	ldr	r1, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	461a      	mov	r2, r3
 80049ee:	6838      	ldr	r0, [r7, #0]
 80049f0:	f002 fa6d 	bl	8006ece <memcpy>
	}
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a04:	f001 fc7e 	bl	8006304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a10:	e011      	b.n	8004a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3324      	adds	r3, #36	; 0x24
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fd50 	bl	80054c4 <xTaskRemoveFromEventList>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a2a:	f000 fe27 	bl	800567c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	dce9      	bgt.n	8004a12 <prvUnlockQueue+0x16>
 8004a3e:	e000      	b.n	8004a42 <prvUnlockQueue+0x46>
					break;
 8004a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	22ff      	movs	r2, #255	; 0xff
 8004a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a4a:	f001 fc8b 	bl	8006364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a4e:	f001 fc59 	bl	8006304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a5a:	e011      	b.n	8004a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3310      	adds	r3, #16
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fd2b 	bl	80054c4 <xTaskRemoveFromEventList>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a74:	f000 fe02 	bl	800567c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dce9      	bgt.n	8004a5c <prvUnlockQueue+0x60>
 8004a88:	e000      	b.n	8004a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	22ff      	movs	r2, #255	; 0xff
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a94:	f001 fc66 	bl	8006364 <vPortExitCritical>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aa8:	f001 fc2c 	bl	8006304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e001      	b.n	8004abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004abe:	f001 fc51 	bl	8006364 <vPortExitCritical>

	return xReturn;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ad4:	f001 fc16 	bl	8006304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d102      	bne.n	8004aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e001      	b.n	8004aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aee:	f001 fc39 	bl	8006364 <vPortExitCritical>

	return xReturn;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e014      	b.n	8004b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b0c:	4a0f      	ldr	r2, [pc, #60]	; (8004b4c <vQueueAddToRegistry+0x50>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10b      	bne.n	8004b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b18:	490c      	ldr	r1, [pc, #48]	; (8004b4c <vQueueAddToRegistry+0x50>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <vQueueAddToRegistry+0x50>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b2e:	e006      	b.n	8004b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b07      	cmp	r3, #7
 8004b3a:	d9e7      	bls.n	8004b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	200008c8 	.word	0x200008c8

08004b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b60:	f001 fbd0 	bl	8006304 <vPortEnterCritical>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b70:	d103      	bne.n	8004b7a <vQueueWaitForMessageRestricted+0x2a>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b86:	d103      	bne.n	8004b90 <vQueueWaitForMessageRestricted+0x40>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	f001 fbe8 	bl	8006364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	3324      	adds	r3, #36	; 0x24
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fc61 	bl	800546c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ff26 	bl	80049fc <prvUnlockQueue>
	}
 8004bb0:	bf00      	nop
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08e      	sub	sp, #56	; 0x38
 8004bbc:	af04      	add	r7, sp, #16
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xTaskCreateStatic+0x46>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61fb      	str	r3, [r7, #28]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bfe:	23a8      	movs	r3, #168	; 0xa8
 8004c00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2ba8      	cmp	r3, #168	; 0xa8
 8004c06:	d00a      	beq.n	8004c1e <xTaskCreateStatic+0x66>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	61bb      	str	r3, [r7, #24]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01e      	beq.n	8004c64 <xTaskCreateStatic+0xac>
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9303      	str	r3, [sp, #12]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	9302      	str	r3, [sp, #8]
 8004c46:	f107 0314 	add.w	r3, r7, #20
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f850 	bl	8004cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c5e:	f000 f8f3 	bl	8004e48 <prvAddNewTaskToReadyList>
 8004c62:	e001      	b.n	8004c68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c68:	697b      	ldr	r3, [r7, #20]
	}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b08c      	sub	sp, #48	; 0x30
 8004c76:	af04      	add	r7, sp, #16
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 fc5e 	bl	8006548 <pvPortMalloc>
 8004c8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c94:	20a8      	movs	r0, #168	; 0xa8
 8004c96:	f001 fc57 	bl	8006548 <pvPortMalloc>
 8004c9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca8:	e005      	b.n	8004cb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	f001 fd18 	bl	80066e0 <vPortFree>
 8004cb0:	e001      	b.n	8004cb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d017      	beq.n	8004cec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cc4:	88fa      	ldrh	r2, [r7, #6]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9303      	str	r3, [sp, #12]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	9302      	str	r3, [sp, #8]
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f80e 	bl	8004cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce0:	69f8      	ldr	r0, [r7, #28]
 8004ce2:	f000 f8b1 	bl	8004e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	e002      	b.n	8004cf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	461a      	mov	r2, r3
 8004d14:	21a5      	movs	r1, #165	; 0xa5
 8004d16:	f002 f809 	bl	8006d2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d24:	3b01      	subs	r3, #1
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f023 0307 	bic.w	r3, r3, #7
 8004d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	617b      	str	r3, [r7, #20]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01f      	beq.n	8004d9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e012      	b.n	8004d86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	7819      	ldrb	r1, [r3, #0]
 8004d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3334      	adds	r3, #52	; 0x34
 8004d70:	460a      	mov	r2, r1
 8004d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d006      	beq.n	8004d8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	3301      	adds	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d9e9      	bls.n	8004d60 <prvInitialiseNewTask+0x64>
 8004d8c:	e000      	b.n	8004d90 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d98:	e003      	b.n	8004da2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	2b37      	cmp	r3, #55	; 0x37
 8004da6:	d901      	bls.n	8004dac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004da8:	2337      	movs	r3, #55	; 0x37
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	2200      	movs	r2, #0
 8004dbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff f8be 	bl	8003f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	3318      	adds	r3, #24
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff f8b9 	bl	8003f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	3354      	adds	r3, #84	; 0x54
 8004dfc:	224c      	movs	r2, #76	; 0x4c
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 ff93 	bl	8006d2c <memset>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <prvInitialiseNewTask+0x140>)
 8004e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <prvInitialiseNewTask+0x144>)
 8004e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <prvInitialiseNewTask+0x148>)
 8004e16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	68f9      	ldr	r1, [r7, #12]
 8004e1c:	69b8      	ldr	r0, [r7, #24]
 8004e1e:	f001 f941 	bl	80060a4 <pxPortInitialiseStack>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e34:	bf00      	nop
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20001b14 	.word	0x20001b14
 8004e40:	20001b7c 	.word	0x20001b7c
 8004e44:	20001be4 	.word	0x20001be4

08004e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e50:	f001 fa58 	bl	8006304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e54:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <prvAddNewTaskToReadyList+0xc4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <prvAddNewTaskToReadyList+0xc4>)
 8004e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e5e:	4b2c      	ldr	r3, [pc, #176]	; (8004f10 <prvAddNewTaskToReadyList+0xc8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e66:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <prvAddNewTaskToReadyList+0xc8>)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <prvAddNewTaskToReadyList+0xc4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d110      	bne.n	8004e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e74:	f000 fc26 	bl	80056c4 <prvInitialiseTaskLists>
 8004e78:	e00d      	b.n	8004e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <prvAddNewTaskToReadyList+0xcc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e82:	4b23      	ldr	r3, [pc, #140]	; (8004f10 <prvAddNewTaskToReadyList+0xc8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d802      	bhi.n	8004e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e90:	4a1f      	ldr	r2, [pc, #124]	; (8004f10 <prvAddNewTaskToReadyList+0xc8>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <prvAddNewTaskToReadyList+0xd0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <prvAddNewTaskToReadyList+0xd0>)
 8004e9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <prvAddNewTaskToReadyList+0xd0>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <prvAddNewTaskToReadyList+0xd4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d903      	bls.n	8004ebc <prvAddNewTaskToReadyList+0x74>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <prvAddNewTaskToReadyList+0xd4>)
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <prvAddNewTaskToReadyList+0xd8>)
 8004eca:	441a      	add	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f7ff f843 	bl	8003f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ed8:	f001 fa44 	bl	8006364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <prvAddNewTaskToReadyList+0xcc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <prvAddNewTaskToReadyList+0xc8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d207      	bcs.n	8004f02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <prvAddNewTaskToReadyList+0xdc>)
 8004ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000ddc 	.word	0x20000ddc
 8004f10:	20000908 	.word	0x20000908
 8004f14:	20000de8 	.word	0x20000de8
 8004f18:	20000df8 	.word	0x20000df8
 8004f1c:	20000de4 	.word	0x20000de4
 8004f20:	2000090c 	.word	0x2000090c
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d017      	beq.n	8004f6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <vTaskDelay+0x60>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <vTaskDelay+0x30>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60bb      	str	r3, [r7, #8]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f58:	f000 f88a 	bl	8005070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fcfe 	bl	8005960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f64:	f000 f892 	bl	800508c <xTaskResumeAll>
 8004f68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d107      	bne.n	8004f80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <vTaskDelay+0x64>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000e04 	.word	0x20000e04
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f9e:	463a      	mov	r2, r7
 8004fa0:	1d39      	adds	r1, r7, #4
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe ff78 	bl	8003e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	9202      	str	r2, [sp, #8]
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	4924      	ldr	r1, [pc, #144]	; (8005050 <vTaskStartScheduler+0xc0>)
 8004fc0:	4824      	ldr	r0, [pc, #144]	; (8005054 <vTaskStartScheduler+0xc4>)
 8004fc2:	f7ff fdf9 	bl	8004bb8 <xTaskCreateStatic>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a23      	ldr	r2, [pc, #140]	; (8005058 <vTaskStartScheduler+0xc8>)
 8004fca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <vTaskStartScheduler+0xc8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e001      	b.n	8004fde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d102      	bne.n	8004fea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fe4:	f000 fd10 	bl	8005a08 <xTimerCreateTimerTask>
 8004fe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d11b      	bne.n	8005028 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
}
 8005002:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <vTaskStartScheduler+0xcc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3354      	adds	r3, #84	; 0x54
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <vTaskStartScheduler+0xd0>)
 800500c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <vTaskStartScheduler+0xd4>)
 8005010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005014:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <vTaskStartScheduler+0xd8>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <vTaskStartScheduler+0xdc>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005022:	f001 f8cd 	bl	80061c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005026:	e00e      	b.n	8005046 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502e:	d10a      	bne.n	8005046 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <vTaskStartScheduler+0xb4>
}
 8005046:	bf00      	nop
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	0800799c 	.word	0x0800799c
 8005054:	08005695 	.word	0x08005695
 8005058:	20000e00 	.word	0x20000e00
 800505c:	20000908 	.word	0x20000908
 8005060:	20000068 	.word	0x20000068
 8005064:	20000dfc 	.word	0x20000dfc
 8005068:	20000de8 	.word	0x20000de8
 800506c:	20000de0 	.word	0x20000de0

08005070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <vTaskSuspendAll+0x18>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	4a03      	ldr	r2, [pc, #12]	; (8005088 <vTaskSuspendAll+0x18>)
 800507c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800507e:	bf00      	nop
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000e04 	.word	0x20000e04

0800508c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800509a:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <xTaskResumeAll+0x118>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	603b      	str	r3, [r7, #0]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050b8:	f001 f924 	bl	8006304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050bc:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <xTaskResumeAll+0x118>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	4a38      	ldr	r2, [pc, #224]	; (80051a4 <xTaskResumeAll+0x118>)
 80050c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c6:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <xTaskResumeAll+0x118>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d162      	bne.n	8005194 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050ce:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <xTaskResumeAll+0x11c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d05e      	beq.n	8005194 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050d6:	e02f      	b.n	8005138 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d8:	4b34      	ldr	r3, [pc, #208]	; (80051ac <xTaskResumeAll+0x120>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3318      	adds	r3, #24
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe ff97 	bl	8004018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe ff92 	bl	8004018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <xTaskResumeAll+0x124>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d903      	bls.n	8005108 <xTaskResumeAll+0x7c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <xTaskResumeAll+0x124>)
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <xTaskResumeAll+0x128>)
 8005116:	441a      	add	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f7fe ff1d 	bl	8003f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <xTaskResumeAll+0x12c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005132:	4b22      	ldr	r3, [pc, #136]	; (80051bc <xTaskResumeAll+0x130>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <xTaskResumeAll+0x120>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1cb      	bne.n	80050d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005146:	f000 fb5f 	bl	8005808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <xTaskResumeAll+0x134>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005156:	f000 f847 	bl	80051e8 <xTaskIncrementTick>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005160:	4b16      	ldr	r3, [pc, #88]	; (80051bc <xTaskResumeAll+0x130>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3b01      	subs	r3, #1
 800516a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f1      	bne.n	8005156 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <xTaskResumeAll+0x134>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005178:	4b10      	ldr	r3, [pc, #64]	; (80051bc <xTaskResumeAll+0x130>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <xTaskResumeAll+0x138>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005194:	f001 f8e6 	bl	8006364 <vPortExitCritical>

	return xAlreadyYielded;
 8005198:	68bb      	ldr	r3, [r7, #8]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000e04 	.word	0x20000e04
 80051a8:	20000ddc 	.word	0x20000ddc
 80051ac:	20000d9c 	.word	0x20000d9c
 80051b0:	20000de4 	.word	0x20000de4
 80051b4:	2000090c 	.word	0x2000090c
 80051b8:	20000908 	.word	0x20000908
 80051bc:	20000df0 	.word	0x20000df0
 80051c0:	20000dec 	.word	0x20000dec
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <xTaskGetTickCount+0x1c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000de0 	.word	0x20000de0

080051e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b4f      	ldr	r3, [pc, #316]	; (8005330 <xTaskIncrementTick+0x148>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 808f 	bne.w	800531a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051fc:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <xTaskIncrementTick+0x14c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005204:	4a4b      	ldr	r2, [pc, #300]	; (8005334 <xTaskIncrementTick+0x14c>)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d120      	bne.n	8005252 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005210:	4b49      	ldr	r3, [pc, #292]	; (8005338 <xTaskIncrementTick+0x150>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <xTaskIncrementTick+0x48>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xTaskIncrementTick+0x46>
 8005230:	4b41      	ldr	r3, [pc, #260]	; (8005338 <xTaskIncrementTick+0x150>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4b41      	ldr	r3, [pc, #260]	; (800533c <xTaskIncrementTick+0x154>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3f      	ldr	r2, [pc, #252]	; (8005338 <xTaskIncrementTick+0x150>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4a3f      	ldr	r2, [pc, #252]	; (800533c <xTaskIncrementTick+0x154>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	4b3e      	ldr	r3, [pc, #248]	; (8005340 <xTaskIncrementTick+0x158>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	4a3d      	ldr	r2, [pc, #244]	; (8005340 <xTaskIncrementTick+0x158>)
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	f000 fadb 	bl	8005808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005252:	4b3c      	ldr	r3, [pc, #240]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d349      	bcc.n	80052f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525c:	4b36      	ldr	r3, [pc, #216]	; (8005338 <xTaskIncrementTick+0x150>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d104      	bne.n	8005270 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005266:	4b37      	ldr	r3, [pc, #220]	; (8005344 <xTaskIncrementTick+0x15c>)
 8005268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800526c:	601a      	str	r2, [r3, #0]
					break;
 800526e:	e03f      	b.n	80052f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005270:	4b31      	ldr	r3, [pc, #196]	; (8005338 <xTaskIncrementTick+0x150>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d203      	bcs.n	8005290 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005288:	4a2e      	ldr	r2, [pc, #184]	; (8005344 <xTaskIncrementTick+0x15c>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800528e:	e02f      	b.n	80052f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	3304      	adds	r3, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe febf 	bl	8004018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	3318      	adds	r3, #24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe feb6 	bl	8004018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	4b25      	ldr	r3, [pc, #148]	; (8005348 <xTaskIncrementTick+0x160>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d903      	bls.n	80052c0 <xTaskIncrementTick+0xd8>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4a22      	ldr	r2, [pc, #136]	; (8005348 <xTaskIncrementTick+0x160>)
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a1f      	ldr	r2, [pc, #124]	; (800534c <xTaskIncrementTick+0x164>)
 80052ce:	441a      	add	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7fe fe41 	bl	8003f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <xTaskIncrementTick+0x168>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3b8      	bcc.n	800525c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ee:	e7b5      	b.n	800525c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052f0:	4b17      	ldr	r3, [pc, #92]	; (8005350 <xTaskIncrementTick+0x168>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	4915      	ldr	r1, [pc, #84]	; (800534c <xTaskIncrementTick+0x164>)
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d901      	bls.n	800530c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <xTaskIncrementTick+0x16c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e004      	b.n	8005324 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <xTaskIncrementTick+0x170>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a0d      	ldr	r2, [pc, #52]	; (8005358 <xTaskIncrementTick+0x170>)
 8005322:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005324:	697b      	ldr	r3, [r7, #20]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000e04 	.word	0x20000e04
 8005334:	20000de0 	.word	0x20000de0
 8005338:	20000d94 	.word	0x20000d94
 800533c:	20000d98 	.word	0x20000d98
 8005340:	20000df4 	.word	0x20000df4
 8005344:	20000dfc 	.word	0x20000dfc
 8005348:	20000de4 	.word	0x20000de4
 800534c:	2000090c 	.word	0x2000090c
 8005350:	20000908 	.word	0x20000908
 8005354:	20000df0 	.word	0x20000df0
 8005358:	20000dec 	.word	0x20000dec

0800535c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005362:	4b2a      	ldr	r3, [pc, #168]	; (800540c <vTaskSwitchContext+0xb0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800536a:	4b29      	ldr	r3, [pc, #164]	; (8005410 <vTaskSwitchContext+0xb4>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005370:	e046      	b.n	8005400 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005372:	4b27      	ldr	r3, [pc, #156]	; (8005410 <vTaskSwitchContext+0xb4>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <vTaskSwitchContext+0xb8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e010      	b.n	80053a2 <vTaskSwitchContext+0x46>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <vTaskSwitchContext+0x40>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	607b      	str	r3, [r7, #4]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <vTaskSwitchContext+0x3e>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3b01      	subs	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	491d      	ldr	r1, [pc, #116]	; (8005418 <vTaskSwitchContext+0xbc>)
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0e4      	beq.n	8005380 <vTaskSwitchContext+0x24>
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4a15      	ldr	r2, [pc, #84]	; (8005418 <vTaskSwitchContext+0xbc>)
 80053c2:	4413      	add	r3, r2
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	3308      	adds	r3, #8
 80053d8:	429a      	cmp	r2, r3
 80053da:	d104      	bne.n	80053e6 <vTaskSwitchContext+0x8a>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a0b      	ldr	r2, [pc, #44]	; (800541c <vTaskSwitchContext+0xc0>)
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <vTaskSwitchContext+0xb8>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <vTaskSwitchContext+0xc0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3354      	adds	r3, #84	; 0x54
 80053fc:	4a08      	ldr	r2, [pc, #32]	; (8005420 <vTaskSwitchContext+0xc4>)
 80053fe:	6013      	str	r3, [r2, #0]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	20000e04 	.word	0x20000e04
 8005410:	20000df0 	.word	0x20000df0
 8005414:	20000de4 	.word	0x20000de4
 8005418:	2000090c 	.word	0x2000090c
 800541c:	20000908 	.word	0x20000908
 8005420:	20000068 	.word	0x20000068

08005424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60fb      	str	r3, [r7, #12]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <vTaskPlaceOnEventList+0x44>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3318      	adds	r3, #24
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fe fda7 	bl	8003fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005458:	2101      	movs	r1, #1
 800545a:	6838      	ldr	r0, [r7, #0]
 800545c:	f000 fa80 	bl	8005960 <prvAddCurrentTaskToDelayedList>
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000908 	.word	0x20000908

0800546c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	617b      	str	r3, [r7, #20]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3318      	adds	r3, #24
 800549a:	4619      	mov	r1, r3
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7fe fd5e 	bl	8003f5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	68b8      	ldr	r0, [r7, #8]
 80054b2:	f000 fa55 	bl	8005960 <prvAddCurrentTaskToDelayedList>
	}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000908 	.word	0x20000908

080054c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	60fb      	str	r3, [r7, #12]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	3318      	adds	r3, #24
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fd8f 	bl	8004018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <xTaskRemoveFromEventList+0xb0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11d      	bne.n	800553e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3304      	adds	r3, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fd86 	bl	8004018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <xTaskRemoveFromEventList+0xb4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d903      	bls.n	8005520 <xTaskRemoveFromEventList+0x5c>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	4a16      	ldr	r2, [pc, #88]	; (8005578 <xTaskRemoveFromEventList+0xb4>)
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4a13      	ldr	r2, [pc, #76]	; (800557c <xTaskRemoveFromEventList+0xb8>)
 800552e:	441a      	add	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	3304      	adds	r3, #4
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f7fe fd11 	bl	8003f5e <vListInsertEnd>
 800553c:	e005      	b.n	800554a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	3318      	adds	r3, #24
 8005542:	4619      	mov	r1, r3
 8005544:	480e      	ldr	r0, [pc, #56]	; (8005580 <xTaskRemoveFromEventList+0xbc>)
 8005546:	f7fe fd0a 	bl	8003f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <xTaskRemoveFromEventList+0xc0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	429a      	cmp	r2, r3
 8005556:	d905      	bls.n	8005564 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <xTaskRemoveFromEventList+0xc4>)
 800555e:	2201      	movs	r2, #1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e001      	b.n	8005568 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005568:	697b      	ldr	r3, [r7, #20]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000e04 	.word	0x20000e04
 8005578:	20000de4 	.word	0x20000de4
 800557c:	2000090c 	.word	0x2000090c
 8005580:	20000d9c 	.word	0x20000d9c
 8005584:	20000908 	.word	0x20000908
 8005588:	20000df0 	.word	0x20000df0

0800558c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <vTaskInternalSetTimeOutState+0x24>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <vTaskInternalSetTimeOutState+0x28>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	605a      	str	r2, [r3, #4]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000df4 	.word	0x20000df4
 80055b4:	20000de0 	.word	0x20000de0

080055b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	613b      	str	r3, [r7, #16]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	60fb      	str	r3, [r7, #12]
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055fa:	f000 fe83 	bl	8006304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <xTaskCheckForTimeOut+0xbc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005616:	d102      	bne.n	800561e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e023      	b.n	8005666 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <xTaskCheckForTimeOut+0xc0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d007      	beq.n	800563a <xTaskCheckForTimeOut+0x82>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	429a      	cmp	r2, r3
 8005632:	d302      	bcc.n	800563a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e015      	b.n	8005666 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	429a      	cmp	r2, r3
 8005642:	d20b      	bcs.n	800565c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff9b 	bl	800558c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e004      	b.n	8005666 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005662:	2301      	movs	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005666:	f000 fe7d 	bl	8006364 <vPortExitCritical>

	return xReturn;
 800566a:	69fb      	ldr	r3, [r7, #28]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000de0 	.word	0x20000de0
 8005678:	20000df4 	.word	0x20000df4

0800567c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005680:	4b03      	ldr	r3, [pc, #12]	; (8005690 <vTaskMissedYield+0x14>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20000df0 	.word	0x20000df0

08005694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800569c:	f000 f852 	bl	8005744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <prvIdleTask+0x28>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d9f9      	bls.n	800569c <prvIdleTask+0x8>
			{
				taskYIELD();
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <prvIdleTask+0x2c>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056b8:	e7f0      	b.n	800569c <prvIdleTask+0x8>
 80056ba:	bf00      	nop
 80056bc:	2000090c 	.word	0x2000090c
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	e00c      	b.n	80056ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4a12      	ldr	r2, [pc, #72]	; (8005724 <prvInitialiseTaskLists+0x60>)
 80056dc:	4413      	add	r3, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fc10 	bl	8003f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3301      	adds	r3, #1
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b37      	cmp	r3, #55	; 0x37
 80056ee:	d9ef      	bls.n	80056d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056f0:	480d      	ldr	r0, [pc, #52]	; (8005728 <prvInitialiseTaskLists+0x64>)
 80056f2:	f7fe fc07 	bl	8003f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056f6:	480d      	ldr	r0, [pc, #52]	; (800572c <prvInitialiseTaskLists+0x68>)
 80056f8:	f7fe fc04 	bl	8003f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056fc:	480c      	ldr	r0, [pc, #48]	; (8005730 <prvInitialiseTaskLists+0x6c>)
 80056fe:	f7fe fc01 	bl	8003f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005702:	480c      	ldr	r0, [pc, #48]	; (8005734 <prvInitialiseTaskLists+0x70>)
 8005704:	f7fe fbfe 	bl	8003f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005708:	480b      	ldr	r0, [pc, #44]	; (8005738 <prvInitialiseTaskLists+0x74>)
 800570a:	f7fe fbfb 	bl	8003f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <prvInitialiseTaskLists+0x78>)
 8005710:	4a05      	ldr	r2, [pc, #20]	; (8005728 <prvInitialiseTaskLists+0x64>)
 8005712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <prvInitialiseTaskLists+0x7c>)
 8005716:	4a05      	ldr	r2, [pc, #20]	; (800572c <prvInitialiseTaskLists+0x68>)
 8005718:	601a      	str	r2, [r3, #0]
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	2000090c 	.word	0x2000090c
 8005728:	20000d6c 	.word	0x20000d6c
 800572c:	20000d80 	.word	0x20000d80
 8005730:	20000d9c 	.word	0x20000d9c
 8005734:	20000db0 	.word	0x20000db0
 8005738:	20000dc8 	.word	0x20000dc8
 800573c:	20000d94 	.word	0x20000d94
 8005740:	20000d98 	.word	0x20000d98

08005744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800574a:	e019      	b.n	8005780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800574c:	f000 fdda 	bl	8006304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <prvCheckTasksWaitingTermination+0x50>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fc5b 	bl	8004018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <prvCheckTasksWaitingTermination+0x54>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3b01      	subs	r3, #1
 8005768:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <prvCheckTasksWaitingTermination+0x54>)
 800576a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <prvCheckTasksWaitingTermination+0x58>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3b01      	subs	r3, #1
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <prvCheckTasksWaitingTermination+0x58>)
 8005774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005776:	f000 fdf5 	bl	8006364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f810 	bl	80057a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <prvCheckTasksWaitingTermination+0x58>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e1      	bne.n	800574c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000db0 	.word	0x20000db0
 8005798:	20000ddc 	.word	0x20000ddc
 800579c:	20000dc4 	.word	0x20000dc4

080057a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3354      	adds	r3, #84	; 0x54
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 fad5 	bl	8006d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d108      	bne.n	80057ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 ff8d 	bl	80066e0 <vPortFree>
				vPortFree( pxTCB );
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 ff8a 	bl	80066e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057cc:	e018      	b.n	8005800 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d103      	bne.n	80057e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 ff81 	bl	80066e0 <vPortFree>
	}
 80057de:	e00f      	b.n	8005800 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d00a      	beq.n	8005800 <prvDeleteTCB+0x60>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	60fb      	str	r3, [r7, #12]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <prvDeleteTCB+0x5e>
	}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <prvResetNextTaskUnblockTime+0x38>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <prvResetNextTaskUnblockTime+0x3c>)
 800581a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800581e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005820:	e008      	b.n	8005834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <prvResetNextTaskUnblockTime+0x38>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4a04      	ldr	r2, [pc, #16]	; (8005844 <prvResetNextTaskUnblockTime+0x3c>)
 8005832:	6013      	str	r3, [r2, #0]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000d94 	.word	0x20000d94
 8005844:	20000dfc 	.word	0x20000dfc

08005848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <xTaskGetSchedulerState+0x34>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005856:	2301      	movs	r3, #1
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	e008      	b.n	800586e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <xTaskGetSchedulerState+0x38>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d102      	bne.n	800586a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005864:	2302      	movs	r3, #2
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	e001      	b.n	800586e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800586e:	687b      	ldr	r3, [r7, #4]
	}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000de8 	.word	0x20000de8
 8005880:	20000e04 	.word	0x20000e04

08005884 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d056      	beq.n	8005948 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800589a:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <xTaskPriorityDisinherit+0xd0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d00a      	beq.n	80058ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60fb      	str	r3, [r7, #12]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	60bb      	str	r3, [r7, #8]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d02c      	beq.n	8005948 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d128      	bne.n	8005948 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fb8c 	bl	8004018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <xTaskPriorityDisinherit+0xd4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d903      	bls.n	8005928 <xTaskPriorityDisinherit+0xa4>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <xTaskPriorityDisinherit+0xd4>)
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4a09      	ldr	r2, [pc, #36]	; (800595c <xTaskPriorityDisinherit+0xd8>)
 8005936:	441a      	add	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f7fe fb0d 	bl	8003f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005948:	697b      	ldr	r3, [r7, #20]
	}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000908 	.word	0x20000908
 8005958:	20000de4 	.word	0x20000de4
 800595c:	2000090c 	.word	0x2000090c

08005960 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800596a:	4b21      	ldr	r3, [pc, #132]	; (80059f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005970:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fb4e 	bl	8004018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005982:	d10a      	bne.n	800599a <prvAddCurrentTaskToDelayedList+0x3a>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800598a:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4819      	ldr	r0, [pc, #100]	; (80059f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005994:	f7fe fae3 	bl	8003f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005998:	e026      	b.n	80059e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059a2:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d209      	bcs.n	80059c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fe faf1 	bl	8003fa6 <vListInsert>
}
 80059c4:	e010      	b.n	80059e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059c6:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7fe fae7 	bl	8003fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d202      	bcs.n	80059e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059e2:	4a08      	ldr	r2, [pc, #32]	; (8005a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000de0 	.word	0x20000de0
 80059f4:	20000908 	.word	0x20000908
 80059f8:	20000dc8 	.word	0x20000dc8
 80059fc:	20000d98 	.word	0x20000d98
 8005a00:	20000d94 	.word	0x20000d94
 8005a04:	20000dfc 	.word	0x20000dfc

08005a08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a12:	f000 fb07 	bl	8006024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <xTimerCreateTimerTask+0x80>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d021      	beq.n	8005a62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a26:	1d3a      	adds	r2, r7, #4
 8005a28:	f107 0108 	add.w	r1, r7, #8
 8005a2c:	f107 030c 	add.w	r3, r7, #12
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe fa4d 	bl	8003ed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	9202      	str	r2, [sp, #8]
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	2302      	movs	r3, #2
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	460a      	mov	r2, r1
 8005a48:	4910      	ldr	r1, [pc, #64]	; (8005a8c <xTimerCreateTimerTask+0x84>)
 8005a4a:	4811      	ldr	r0, [pc, #68]	; (8005a90 <xTimerCreateTimerTask+0x88>)
 8005a4c:	f7ff f8b4 	bl	8004bb8 <xTaskCreateStatic>
 8005a50:	4603      	mov	r3, r0
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <xTimerCreateTimerTask+0x8c>)
 8005a54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a56:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <xTimerCreateTimerTask+0x8c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	613b      	str	r3, [r7, #16]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a7e:	697b      	ldr	r3, [r7, #20]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000e38 	.word	0x20000e38
 8005a8c:	080079a4 	.word	0x080079a4
 8005a90:	08005bcd 	.word	0x08005bcd
 8005a94:	20000e3c 	.word	0x20000e3c

08005a98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	623b      	str	r3, [r7, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <xTimerGenericCommand+0x98>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d02a      	beq.n	8005b24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	dc18      	bgt.n	8005b12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ae0:	f7ff feb2 	bl	8005848 <xTaskGetSchedulerState>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d109      	bne.n	8005afe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005aea:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <xTimerGenericCommand+0x98>)
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	f107 0110 	add.w	r1, r7, #16
 8005af2:	2300      	movs	r3, #0
 8005af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af6:	f7fe fbf7 	bl	80042e8 <xQueueGenericSend>
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24
 8005afc:	e012      	b.n	8005b24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <xTimerGenericCommand+0x98>)
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	f107 0110 	add.w	r1, r7, #16
 8005b06:	2300      	movs	r3, #0
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f7fe fbed 	bl	80042e8 <xQueueGenericSend>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8005b10:	e008      	b.n	8005b24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b12:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <xTimerGenericCommand+0x98>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	f107 0110 	add.w	r1, r7, #16
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	f7fe fce1 	bl	80044e4 <xQueueGenericSendFromISR>
 8005b22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3728      	adds	r7, #40	; 0x28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000e38 	.word	0x20000e38

08005b34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3e:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <prvProcessExpiredTimer+0x94>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe fa63 	bl	8004018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d022      	beq.n	8005ba6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	699a      	ldr	r2, [r3, #24]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	18d1      	adds	r1, r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	6978      	ldr	r0, [r7, #20]
 8005b6e:	f000 f8d1 	bl	8005d14 <prvInsertTimerInActiveList>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01f      	beq.n	8005bb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	2100      	movs	r1, #0
 8005b82:	6978      	ldr	r0, [r7, #20]
 8005b84:	f7ff ff88 	bl	8005a98 <xTimerGenericCommand>
 8005b88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d113      	bne.n	8005bb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	6978      	ldr	r0, [r7, #20]
 8005bbe:	4798      	blx	r3
}
 8005bc0:	bf00      	nop
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000e30 	.word	0x20000e30

08005bcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bd4:	f107 0308 	add.w	r3, r7, #8
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f857 	bl	8005c8c <prvGetNextExpireTime>
 8005bde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4619      	mov	r1, r3
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f803 	bl	8005bf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005bea:	f000 f8d5 	bl	8005d98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bee:	e7f1      	b.n	8005bd4 <prvTimerTask+0x8>

08005bf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bfa:	f7ff fa39 	bl	8005070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bfe:	f107 0308 	add.w	r3, r7, #8
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f866 	bl	8005cd4 <prvSampleTimeNow>
 8005c08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d130      	bne.n	8005c72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <prvProcessTimerOrBlockTask+0x3c>
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d806      	bhi.n	8005c2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c1e:	f7ff fa35 	bl	800508c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff ff85 	bl	8005b34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c2a:	e024      	b.n	8005c76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <prvProcessTimerOrBlockTask+0x90>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <prvProcessTimerOrBlockTask+0x50>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <prvProcessTimerOrBlockTask+0x52>
 8005c40:	2300      	movs	r3, #0
 8005c42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <prvProcessTimerOrBlockTask+0x94>)
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	4619      	mov	r1, r3
 8005c52:	f7fe ff7d 	bl	8004b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c56:	f7ff fa19 	bl	800508c <xTaskResumeAll>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <prvProcessTimerOrBlockTask+0x98>)
 8005c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
}
 8005c70:	e001      	b.n	8005c76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c72:	f7ff fa0b 	bl	800508c <xTaskResumeAll>
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000e34 	.word	0x20000e34
 8005c84:	20000e38 	.word	0x20000e38
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <prvGetNextExpireTime+0x44>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <prvGetNextExpireTime+0x16>
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	e000      	b.n	8005ca4 <prvGetNextExpireTime+0x18>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <prvGetNextExpireTime+0x44>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	e001      	b.n	8005cc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000e30 	.word	0x20000e30

08005cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005cdc:	f7ff fa74 	bl	80051c8 <xTaskGetTickCount>
 8005ce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <prvSampleTimeNow+0x3c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d205      	bcs.n	8005cf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cec:	f000 f936 	bl	8005f5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e002      	b.n	8005cfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cfe:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <prvSampleTimeNow+0x3c>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d04:	68fb      	ldr	r3, [r7, #12]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000e40 	.word	0x20000e40

08005d14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d812      	bhi.n	8005d60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	1ad2      	subs	r2, r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d302      	bcc.n	8005d4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e01b      	b.n	8005d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <prvInsertTimerInActiveList+0x7c>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f7fe f924 	bl	8003fa6 <vListInsert>
 8005d5e:	e012      	b.n	8005d86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d206      	bcs.n	8005d76 <prvInsertTimerInActiveList+0x62>
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d302      	bcc.n	8005d76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d70:	2301      	movs	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	e007      	b.n	8005d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d76:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <prvInsertTimerInActiveList+0x80>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7fe f910 	bl	8003fa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d86:	697b      	ldr	r3, [r7, #20]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000e34 	.word	0x20000e34
 8005d94:	20000e30 	.word	0x20000e30

08005d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08e      	sub	sp, #56	; 0x38
 8005d9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d9e:	e0ca      	b.n	8005f36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da18      	bge.n	8005dd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	3304      	adds	r3, #4
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	61fb      	str	r3, [r7, #28]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dce:	6850      	ldr	r0, [r2, #4]
 8005dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd2:	6892      	ldr	r2, [r2, #8]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f2c0 80ab 	blt.w	8005f36 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	3304      	adds	r3, #4
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe f911 	bl	8004018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005df6:	463b      	mov	r3, r7
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff ff6b 	bl	8005cd4 <prvSampleTimeNow>
 8005dfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b09      	cmp	r3, #9
 8005e04:	f200 8096 	bhi.w	8005f34 <prvProcessReceivedCommands+0x19c>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <prvProcessReceivedCommands+0x78>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e39 	.word	0x08005e39
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e39 	.word	0x08005e39
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ec1 	.word	0x08005ec1
 8005e24:	08005f0b 	.word	0x08005f0b
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e39 	.word	0x08005e39
 8005e30:	08005ead 	.word	0x08005ead
 8005e34:	08005ec1 	.word	0x08005ec1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	18d1      	adds	r1, r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e58:	f7ff ff5c 	bl	8005d14 <prvInsertTimerInActiveList>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d069      	beq.n	8005f36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d05e      	beq.n	8005f36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	441a      	add	r2, r3
 8005e80:	2300      	movs	r3, #0
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	2300      	movs	r3, #0
 8005e86:	2100      	movs	r1, #0
 8005e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8a:	f7ff fe05 	bl	8005a98 <xTimerGenericCommand>
 8005e8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d14f      	bne.n	8005f36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	61bb      	str	r3, [r7, #24]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ebe:	e03a      	b.n	8005f36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec6:	f043 0301 	orr.w	r3, r3, #1
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	617b      	str	r3, [r7, #20]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	18d1      	adds	r1, r2, r3
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f04:	f7ff ff06 	bl	8005d14 <prvInsertTimerInActiveList>
					break;
 8005f08:	e015      	b.n	8005f36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1a:	f000 fbe1 	bl	80066e0 <vPortFree>
 8005f1e:	e00a      	b.n	8005f36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f32:	e000      	b.n	8005f36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005f34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <prvProcessReceivedCommands+0x1c0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	1d39      	adds	r1, r7, #4
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fb6c 	bl	800461c <xQueueReceive>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f47f af2a 	bne.w	8005da0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	3730      	adds	r7, #48	; 0x30
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000e38 	.word	0x20000e38

08005f5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f62:	e048      	b.n	8005ff6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f64:	4b2d      	ldr	r3, [pc, #180]	; (800601c <prvSwitchTimerLists+0xc0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6e:	4b2b      	ldr	r3, [pc, #172]	; (800601c <prvSwitchTimerLists+0xc0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe f84b 	bl	8004018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d02e      	beq.n	8005ff6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d90e      	bls.n	8005fc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fb6:	4b19      	ldr	r3, [pc, #100]	; (800601c <prvSwitchTimerLists+0xc0>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f7fd fff0 	bl	8003fa6 <vListInsert>
 8005fc6:	e016      	b.n	8005ff6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fd60 	bl	8005a98 <xTimerGenericCommand>
 8005fd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	603b      	str	r3, [r7, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <prvSwitchTimerLists+0xc0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1b1      	bne.n	8005f64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <prvSwitchTimerLists+0xc0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <prvSwitchTimerLists+0xc4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a04      	ldr	r2, [pc, #16]	; (800601c <prvSwitchTimerLists+0xc0>)
 800600c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800600e:	4a04      	ldr	r2, [pc, #16]	; (8006020 <prvSwitchTimerLists+0xc4>)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	6013      	str	r3, [r2, #0]
}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000e30 	.word	0x20000e30
 8006020:	20000e34 	.word	0x20000e34

08006024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800602a:	f000 f96b 	bl	8006304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800602e:	4b15      	ldr	r3, [pc, #84]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d120      	bne.n	8006078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006036:	4814      	ldr	r0, [pc, #80]	; (8006088 <prvCheckForValidListAndQueue+0x64>)
 8006038:	f7fd ff64 	bl	8003f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800603c:	4813      	ldr	r0, [pc, #76]	; (800608c <prvCheckForValidListAndQueue+0x68>)
 800603e:	f7fd ff61 	bl	8003f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006042:	4b13      	ldr	r3, [pc, #76]	; (8006090 <prvCheckForValidListAndQueue+0x6c>)
 8006044:	4a10      	ldr	r2, [pc, #64]	; (8006088 <prvCheckForValidListAndQueue+0x64>)
 8006046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <prvCheckForValidListAndQueue+0x70>)
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <prvCheckForValidListAndQueue+0x68>)
 800604c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800604e:	2300      	movs	r3, #0
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <prvCheckForValidListAndQueue+0x74>)
 8006054:	4a11      	ldr	r2, [pc, #68]	; (800609c <prvCheckForValidListAndQueue+0x78>)
 8006056:	2110      	movs	r1, #16
 8006058:	200a      	movs	r0, #10
 800605a:	f7fe f86f 	bl	800413c <xQueueGenericCreateStatic>
 800605e:	4603      	mov	r3, r0
 8006060:	4a08      	ldr	r2, [pc, #32]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 8006062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvCheckForValidListAndQueue+0x60>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	490b      	ldr	r1, [pc, #44]	; (80060a0 <prvCheckForValidListAndQueue+0x7c>)
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fd42 	bl	8004afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006078:	f000 f974 	bl	8006364 <vPortExitCritical>
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000e38 	.word	0x20000e38
 8006088:	20000e08 	.word	0x20000e08
 800608c:	20000e1c 	.word	0x20000e1c
 8006090:	20000e30 	.word	0x20000e30
 8006094:	20000e34 	.word	0x20000e34
 8006098:	20000ee4 	.word	0x20000ee4
 800609c:	20000e44 	.word	0x20000e44
 80060a0:	080079ac 	.word	0x080079ac

080060a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3b04      	subs	r3, #4
 80060b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b04      	subs	r3, #4
 80060c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3b04      	subs	r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060d4:	4a0c      	ldr	r2, [pc, #48]	; (8006108 <pxPortInitialiseStack+0x64>)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b14      	subs	r3, #20
 80060de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f06f 0202 	mvn.w	r2, #2
 80060f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3b20      	subs	r3, #32
 80060f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	0800610d 	.word	0x0800610d

0800610c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006116:	4b12      	ldr	r3, [pc, #72]	; (8006160 <prvTaskExitError+0x54>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800611e:	d00a      	beq.n	8006136 <prvTaskExitError+0x2a>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60fb      	str	r3, [r7, #12]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <prvTaskExitError+0x28>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60bb      	str	r3, [r7, #8]
}
 8006148:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800614a:	bf00      	nop
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0fc      	beq.n	800614c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	2000000c 	.word	0x2000000c
	...

08006170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	4770      	bx	lr
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst2>:
 8006190:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006198:	4808      	ldr	r0, [pc, #32]	; (80061bc <prvPortStartFirstTask+0x24>)
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f380 8808 	msr	MSP, r0
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8814 	msr	CONTROL, r0
 80061aa:	b662      	cpsie	i
 80061ac:	b661      	cpsie	f
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	df00      	svc	0
 80061b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ba:	bf00      	nop
 80061bc:	e000ed08 	.word	0xe000ed08

080061c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061c6:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <xPortStartScheduler+0x120>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a46      	ldr	r2, [pc, #280]	; (80062e4 <xPortStartScheduler+0x124>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10a      	bne.n	80061e6 <xPortStartScheduler+0x26>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061e6:	4b3e      	ldr	r3, [pc, #248]	; (80062e0 <xPortStartScheduler+0x120>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a3f      	ldr	r2, [pc, #252]	; (80062e8 <xPortStartScheduler+0x128>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10a      	bne.n	8006206 <xPortStartScheduler+0x46>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	60fb      	str	r3, [r7, #12]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006206:	4b39      	ldr	r3, [pc, #228]	; (80062ec <xPortStartScheduler+0x12c>)
 8006208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	22ff      	movs	r2, #255	; 0xff
 8006216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006228:	b2da      	uxtb	r2, r3
 800622a:	4b31      	ldr	r3, [pc, #196]	; (80062f0 <xPortStartScheduler+0x130>)
 800622c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800622e:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <xPortStartScheduler+0x134>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006234:	e009      	b.n	800624a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006236:	4b2f      	ldr	r3, [pc, #188]	; (80062f4 <xPortStartScheduler+0x134>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3b01      	subs	r3, #1
 800623c:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <xPortStartScheduler+0x134>)
 800623e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b80      	cmp	r3, #128	; 0x80
 8006254:	d0ef      	beq.n	8006236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006256:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <xPortStartScheduler+0x134>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1c3 0307 	rsb	r3, r3, #7
 800625e:	2b04      	cmp	r3, #4
 8006260:	d00a      	beq.n	8006278 <xPortStartScheduler+0xb8>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	60bb      	str	r3, [r7, #8]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006278:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <xPortStartScheduler+0x134>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <xPortStartScheduler+0x134>)
 8006280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <xPortStartScheduler+0x134>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800628a:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <xPortStartScheduler+0x134>)
 800628c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006296:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <xPortStartScheduler+0x138>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <xPortStartScheduler+0x138>)
 800629c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <xPortStartScheduler+0x138>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <xPortStartScheduler+0x138>)
 80062a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062ae:	f000 f8dd 	bl	800646c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <xPortStartScheduler+0x13c>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062b8:	f000 f8fc 	bl	80064b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <xPortStartScheduler+0x140>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0f      	ldr	r2, [pc, #60]	; (8006300 <xPortStartScheduler+0x140>)
 80062c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062c8:	f7ff ff66 	bl	8006198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062cc:	f7ff f846 	bl	800535c <vTaskSwitchContext>
	prvTaskExitError();
 80062d0:	f7ff ff1c 	bl	800610c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	e000ed00 	.word	0xe000ed00
 80062e4:	410fc271 	.word	0x410fc271
 80062e8:	410fc270 	.word	0x410fc270
 80062ec:	e000e400 	.word	0xe000e400
 80062f0:	20000f34 	.word	0x20000f34
 80062f4:	20000f38 	.word	0x20000f38
 80062f8:	e000ed20 	.word	0xe000ed20
 80062fc:	2000000c 	.word	0x2000000c
 8006300:	e000ef34 	.word	0xe000ef34

08006304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	607b      	str	r3, [r7, #4]
}
 800631c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <vPortEnterCritical+0x58>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a0d      	ldr	r2, [pc, #52]	; (800635c <vPortEnterCritical+0x58>)
 8006326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <vPortEnterCritical+0x58>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d10f      	bne.n	8006350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortEnterCritical+0x5c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <vPortEnterCritical+0x4c>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	603b      	str	r3, [r7, #0]
}
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <vPortEnterCritical+0x4a>
	}
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	2000000c 	.word	0x2000000c
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <vPortExitCritical+0x50>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <vPortExitCritical+0x24>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	607b      	str	r3, [r7, #4]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <vPortExitCritical+0x50>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3b01      	subs	r3, #1
 800638e:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <vPortExitCritical+0x50>)
 8006390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006392:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <vPortExitCritical+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <vPortExitCritical+0x42>
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	2000000c 	.word	0x2000000c
	...

080063c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063c0:	f3ef 8009 	mrs	r0, PSP
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4b15      	ldr	r3, [pc, #84]	; (8006420 <pxCurrentTCBConst>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	f01e 0f10 	tst.w	lr, #16
 80063d0:	bf08      	it	eq
 80063d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063e4:	f380 8811 	msr	BASEPRI, r0
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f7fe ffb4 	bl	800535c <vTaskSwitchContext>
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	f380 8811 	msr	BASEPRI, r0
 80063fc:	bc09      	pop	{r0, r3}
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	6808      	ldr	r0, [r1, #0]
 8006402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006406:	f01e 0f10 	tst.w	lr, #16
 800640a:	bf08      	it	eq
 800640c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006410:	f380 8809 	msr	PSP, r0
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst>:
 8006420:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	607b      	str	r3, [r7, #4]
}
 8006440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006442:	f7fe fed1 	bl	80051e8 <xTaskIncrementTick>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <xPortSysTickHandler+0x40>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <vPortSetupTimerInterrupt+0x38>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <vPortSetupTimerInterrupt+0x3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <vPortSetupTimerInterrupt+0x40>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <vPortSetupTimerInterrupt+0x44>)
 800648a:	3b01      	subs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800648e:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006490:	2207      	movs	r2, #7
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000e010 	.word	0xe000e010
 80064a4:	e000e018 	.word	0xe000e018
 80064a8:	20000000 	.word	0x20000000
 80064ac:	10624dd3 	.word	0x10624dd3
 80064b0:	e000e014 	.word	0xe000e014

080064b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064c4 <vPortEnableVFP+0x10>
 80064b8:	6801      	ldr	r1, [r0, #0]
 80064ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064be:	6001      	str	r1, [r0, #0]
 80064c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064c2:	bf00      	nop
 80064c4:	e000ed88 	.word	0xe000ed88

080064c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064ce:	f3ef 8305 	mrs	r3, IPSR
 80064d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d914      	bls.n	8006504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <vPortValidateInterruptPriority+0x70>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064e4:	4b15      	ldr	r3, [pc, #84]	; (800653c <vPortValidateInterruptPriority+0x74>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	7afa      	ldrb	r2, [r7, #11]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d20a      	bcs.n	8006504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	607b      	str	r3, [r7, #4]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <vPortValidateInterruptPriority+0x78>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800650c:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <vPortValidateInterruptPriority+0x7c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d90a      	bls.n	800652a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	603b      	str	r3, [r7, #0]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <vPortValidateInterruptPriority+0x60>
	}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	e000e3f0 	.word	0xe000e3f0
 800653c:	20000f34 	.word	0x20000f34
 8006540:	e000ed0c 	.word	0xe000ed0c
 8006544:	20000f38 	.word	0x20000f38

08006548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006554:	f7fe fd8c 	bl	8005070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006558:	4b5b      	ldr	r3, [pc, #364]	; (80066c8 <pvPortMalloc+0x180>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006560:	f000 f920 	bl	80067a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006564:	4b59      	ldr	r3, [pc, #356]	; (80066cc <pvPortMalloc+0x184>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 8093 	bne.w	8006698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01d      	beq.n	80065b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006578:	2208      	movs	r2, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b00      	cmp	r3, #0
 8006588:	d014      	beq.n	80065b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f023 0307 	bic.w	r3, r3, #7
 8006590:	3308      	adds	r3, #8
 8006592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <pvPortMalloc+0x6c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	617b      	str	r3, [r7, #20]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d06e      	beq.n	8006698 <pvPortMalloc+0x150>
 80065ba:	4b45      	ldr	r3, [pc, #276]	; (80066d0 <pvPortMalloc+0x188>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d869      	bhi.n	8006698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065c4:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <pvPortMalloc+0x18c>)
 80065c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065c8:	4b42      	ldr	r3, [pc, #264]	; (80066d4 <pvPortMalloc+0x18c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ce:	e004      	b.n	80065da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d903      	bls.n	80065ec <pvPortMalloc+0xa4>
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f1      	bne.n	80065d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065ec:	4b36      	ldr	r3, [pc, #216]	; (80066c8 <pvPortMalloc+0x180>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d050      	beq.n	8006698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2208      	movs	r2, #8
 80065fc:	4413      	add	r3, r2
 80065fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	2308      	movs	r3, #8
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	429a      	cmp	r2, r3
 8006616:	d91f      	bls.n	8006658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4413      	add	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <pvPortMalloc+0xf8>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	613b      	str	r3, [r7, #16]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	1ad2      	subs	r2, r2, r3
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006652:	69b8      	ldr	r0, [r7, #24]
 8006654:	f000 f908 	bl	8006868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <pvPortMalloc+0x188>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <pvPortMalloc+0x188>)
 8006664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <pvPortMalloc+0x188>)
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <pvPortMalloc+0x190>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d203      	bcs.n	800667a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006672:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <pvPortMalloc+0x188>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <pvPortMalloc+0x190>)
 8006678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	4b13      	ldr	r3, [pc, #76]	; (80066cc <pvPortMalloc+0x184>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	431a      	orrs	r2, r3
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <pvPortMalloc+0x194>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a11      	ldr	r2, [pc, #68]	; (80066dc <pvPortMalloc+0x194>)
 8006696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006698:	f7fe fcf8 	bl	800508c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <pvPortMalloc+0x174>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60fb      	str	r3, [r7, #12]
}
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <pvPortMalloc+0x172>
	return pvReturn;
 80066bc:	69fb      	ldr	r3, [r7, #28]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3728      	adds	r7, #40	; 0x28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20001afc 	.word	0x20001afc
 80066cc:	20001b10 	.word	0x20001b10
 80066d0:	20001b00 	.word	0x20001b00
 80066d4:	20001af4 	.word	0x20001af4
 80066d8:	20001b04 	.word	0x20001b04
 80066dc:	20001b08 	.word	0x20001b08

080066e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d04d      	beq.n	800678e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066f2:	2308      	movs	r3, #8
 80066f4:	425b      	negs	r3, r3
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4413      	add	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	4b24      	ldr	r3, [pc, #144]	; (8006798 <vPortFree+0xb8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4013      	ands	r3, r2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <vPortFree+0x44>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <vPortFree+0x62>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60bb      	str	r3, [r7, #8]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	4b14      	ldr	r3, [pc, #80]	; (8006798 <vPortFree+0xb8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01e      	beq.n	800678e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d11a      	bne.n	800678e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <vPortFree+0xb8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	43db      	mvns	r3, r3
 8006762:	401a      	ands	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006768:	f7fe fc82 	bl	8005070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <vPortFree+0xbc>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4413      	add	r3, r2
 8006776:	4a09      	ldr	r2, [pc, #36]	; (800679c <vPortFree+0xbc>)
 8006778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800677a:	6938      	ldr	r0, [r7, #16]
 800677c:	f000 f874 	bl	8006868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <vPortFree+0xc0>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	4a06      	ldr	r2, [pc, #24]	; (80067a0 <vPortFree+0xc0>)
 8006788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800678a:	f7fe fc7f 	bl	800508c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800678e:	bf00      	nop
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20001b10 	.word	0x20001b10
 800679c:	20001b00 	.word	0x20001b00
 80067a0:	20001b0c 	.word	0x20001b0c

080067a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80067ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067b0:	4b27      	ldr	r3, [pc, #156]	; (8006850 <prvHeapInit+0xac>)
 80067b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00c      	beq.n	80067d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3307      	adds	r3, #7
 80067c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0307 	bic.w	r3, r3, #7
 80067ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	4a1f      	ldr	r2, [pc, #124]	; (8006850 <prvHeapInit+0xac>)
 80067d4:	4413      	add	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067dc:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <prvHeapInit+0xb0>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067e2:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <prvHeapInit+0xb0>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	4413      	add	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067f0:	2208      	movs	r2, #8
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a15      	ldr	r2, [pc, #84]	; (8006858 <prvHeapInit+0xb4>)
 8006804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <prvHeapInit+0xb4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <prvHeapInit+0xb4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006824:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <prvHeapInit+0xb4>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a0a      	ldr	r2, [pc, #40]	; (800685c <prvHeapInit+0xb8>)
 8006832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <prvHeapInit+0xbc>)
 800683a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <prvHeapInit+0xc0>)
 800683e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	20000f3c 	.word	0x20000f3c
 8006854:	20001af4 	.word	0x20001af4
 8006858:	20001afc 	.word	0x20001afc
 800685c:	20001b04 	.word	0x20001b04
 8006860:	20001b00 	.word	0x20001b00
 8006864:	20001b10 	.word	0x20001b10

08006868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006870:	4b28      	ldr	r3, [pc, #160]	; (8006914 <prvInsertBlockIntoFreeList+0xac>)
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e002      	b.n	800687c <prvInsertBlockIntoFreeList+0x14>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d8f7      	bhi.n	8006876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	4413      	add	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d108      	bne.n	80068aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	441a      	add	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	441a      	add	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d118      	bne.n	80068f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <prvInsertBlockIntoFreeList+0xb0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d00d      	beq.n	80068e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	441a      	add	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e008      	b.n	80068f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <prvInsertBlockIntoFreeList+0xb0>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	e003      	b.n	80068f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d002      	beq.n	8006906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20001af4 	.word	0x20001af4
 8006918:	20001afc 	.word	0x20001afc

0800691c <std>:
 800691c:	2300      	movs	r3, #0
 800691e:	b510      	push	{r4, lr}
 8006920:	4604      	mov	r4, r0
 8006922:	e9c0 3300 	strd	r3, r3, [r0]
 8006926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800692a:	6083      	str	r3, [r0, #8]
 800692c:	8181      	strh	r1, [r0, #12]
 800692e:	6643      	str	r3, [r0, #100]	; 0x64
 8006930:	81c2      	strh	r2, [r0, #14]
 8006932:	6183      	str	r3, [r0, #24]
 8006934:	4619      	mov	r1, r3
 8006936:	2208      	movs	r2, #8
 8006938:	305c      	adds	r0, #92	; 0x5c
 800693a:	f000 f9f7 	bl	8006d2c <memset>
 800693e:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <std+0x58>)
 8006940:	6263      	str	r3, [r4, #36]	; 0x24
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <std+0x5c>)
 8006944:	62a3      	str	r3, [r4, #40]	; 0x28
 8006946:	4b0d      	ldr	r3, [pc, #52]	; (800697c <std+0x60>)
 8006948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800694a:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <std+0x64>)
 800694c:	6323      	str	r3, [r4, #48]	; 0x30
 800694e:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <std+0x68>)
 8006950:	6224      	str	r4, [r4, #32]
 8006952:	429c      	cmp	r4, r3
 8006954:	d006      	beq.n	8006964 <std+0x48>
 8006956:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800695a:	4294      	cmp	r4, r2
 800695c:	d002      	beq.n	8006964 <std+0x48>
 800695e:	33d0      	adds	r3, #208	; 0xd0
 8006960:	429c      	cmp	r4, r3
 8006962:	d105      	bne.n	8006970 <std+0x54>
 8006964:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800696c:	f000 baac 	b.w	8006ec8 <__retarget_lock_init_recursive>
 8006970:	bd10      	pop	{r4, pc}
 8006972:	bf00      	nop
 8006974:	08006b7d 	.word	0x08006b7d
 8006978:	08006b9f 	.word	0x08006b9f
 800697c:	08006bd7 	.word	0x08006bd7
 8006980:	08006bfb 	.word	0x08006bfb
 8006984:	20001b14 	.word	0x20001b14

08006988 <stdio_exit_handler>:
 8006988:	4a02      	ldr	r2, [pc, #8]	; (8006994 <stdio_exit_handler+0xc>)
 800698a:	4903      	ldr	r1, [pc, #12]	; (8006998 <stdio_exit_handler+0x10>)
 800698c:	4803      	ldr	r0, [pc, #12]	; (800699c <stdio_exit_handler+0x14>)
 800698e:	f000 b869 	b.w	8006a64 <_fwalk_sglue>
 8006992:	bf00      	nop
 8006994:	20000010 	.word	0x20000010
 8006998:	08007791 	.word	0x08007791
 800699c:	2000001c 	.word	0x2000001c

080069a0 <cleanup_stdio>:
 80069a0:	6841      	ldr	r1, [r0, #4]
 80069a2:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <cleanup_stdio+0x34>)
 80069a4:	4299      	cmp	r1, r3
 80069a6:	b510      	push	{r4, lr}
 80069a8:	4604      	mov	r4, r0
 80069aa:	d001      	beq.n	80069b0 <cleanup_stdio+0x10>
 80069ac:	f000 fef0 	bl	8007790 <_fflush_r>
 80069b0:	68a1      	ldr	r1, [r4, #8]
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <cleanup_stdio+0x38>)
 80069b4:	4299      	cmp	r1, r3
 80069b6:	d002      	beq.n	80069be <cleanup_stdio+0x1e>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fee9 	bl	8007790 <_fflush_r>
 80069be:	68e1      	ldr	r1, [r4, #12]
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <cleanup_stdio+0x3c>)
 80069c2:	4299      	cmp	r1, r3
 80069c4:	d004      	beq.n	80069d0 <cleanup_stdio+0x30>
 80069c6:	4620      	mov	r0, r4
 80069c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069cc:	f000 bee0 	b.w	8007790 <_fflush_r>
 80069d0:	bd10      	pop	{r4, pc}
 80069d2:	bf00      	nop
 80069d4:	20001b14 	.word	0x20001b14
 80069d8:	20001b7c 	.word	0x20001b7c
 80069dc:	20001be4 	.word	0x20001be4

080069e0 <global_stdio_init.part.0>:
 80069e0:	b510      	push	{r4, lr}
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <global_stdio_init.part.0+0x30>)
 80069e4:	4c0b      	ldr	r4, [pc, #44]	; (8006a14 <global_stdio_init.part.0+0x34>)
 80069e6:	4a0c      	ldr	r2, [pc, #48]	; (8006a18 <global_stdio_init.part.0+0x38>)
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	4620      	mov	r0, r4
 80069ec:	2200      	movs	r2, #0
 80069ee:	2104      	movs	r1, #4
 80069f0:	f7ff ff94 	bl	800691c <std>
 80069f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069f8:	2201      	movs	r2, #1
 80069fa:	2109      	movs	r1, #9
 80069fc:	f7ff ff8e 	bl	800691c <std>
 8006a00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a04:	2202      	movs	r2, #2
 8006a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a0a:	2112      	movs	r1, #18
 8006a0c:	f7ff bf86 	b.w	800691c <std>
 8006a10:	20001c4c 	.word	0x20001c4c
 8006a14:	20001b14 	.word	0x20001b14
 8006a18:	08006989 	.word	0x08006989

08006a1c <__sfp_lock_acquire>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__sfp_lock_acquire+0x8>)
 8006a1e:	f000 ba54 	b.w	8006eca <__retarget_lock_acquire_recursive>
 8006a22:	bf00      	nop
 8006a24:	20001c55 	.word	0x20001c55

08006a28 <__sfp_lock_release>:
 8006a28:	4801      	ldr	r0, [pc, #4]	; (8006a30 <__sfp_lock_release+0x8>)
 8006a2a:	f000 ba4f 	b.w	8006ecc <__retarget_lock_release_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20001c55 	.word	0x20001c55

08006a34 <__sinit>:
 8006a34:	b510      	push	{r4, lr}
 8006a36:	4604      	mov	r4, r0
 8006a38:	f7ff fff0 	bl	8006a1c <__sfp_lock_acquire>
 8006a3c:	6a23      	ldr	r3, [r4, #32]
 8006a3e:	b11b      	cbz	r3, 8006a48 <__sinit+0x14>
 8006a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a44:	f7ff bff0 	b.w	8006a28 <__sfp_lock_release>
 8006a48:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <__sinit+0x28>)
 8006a4a:	6223      	str	r3, [r4, #32]
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <__sinit+0x2c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f5      	bne.n	8006a40 <__sinit+0xc>
 8006a54:	f7ff ffc4 	bl	80069e0 <global_stdio_init.part.0>
 8006a58:	e7f2      	b.n	8006a40 <__sinit+0xc>
 8006a5a:	bf00      	nop
 8006a5c:	080069a1 	.word	0x080069a1
 8006a60:	20001c4c 	.word	0x20001c4c

08006a64 <_fwalk_sglue>:
 8006a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	4607      	mov	r7, r0
 8006a6a:	4688      	mov	r8, r1
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	2600      	movs	r6, #0
 8006a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a74:	f1b9 0901 	subs.w	r9, r9, #1
 8006a78:	d505      	bpl.n	8006a86 <_fwalk_sglue+0x22>
 8006a7a:	6824      	ldr	r4, [r4, #0]
 8006a7c:	2c00      	cmp	r4, #0
 8006a7e:	d1f7      	bne.n	8006a70 <_fwalk_sglue+0xc>
 8006a80:	4630      	mov	r0, r6
 8006a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a86:	89ab      	ldrh	r3, [r5, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d907      	bls.n	8006a9c <_fwalk_sglue+0x38>
 8006a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a90:	3301      	adds	r3, #1
 8006a92:	d003      	beq.n	8006a9c <_fwalk_sglue+0x38>
 8006a94:	4629      	mov	r1, r5
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c0      	blx	r8
 8006a9a:	4306      	orrs	r6, r0
 8006a9c:	3568      	adds	r5, #104	; 0x68
 8006a9e:	e7e9      	b.n	8006a74 <_fwalk_sglue+0x10>

08006aa0 <iprintf>:
 8006aa0:	b40f      	push	{r0, r1, r2, r3}
 8006aa2:	b507      	push	{r0, r1, r2, lr}
 8006aa4:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <iprintf+0x20>)
 8006aa6:	ab04      	add	r3, sp, #16
 8006aa8:	6808      	ldr	r0, [r1, #0]
 8006aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aae:	6881      	ldr	r1, [r0, #8]
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	f000 fb3d 	bl	8007130 <_vfiprintf_r>
 8006ab6:	b003      	add	sp, #12
 8006ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006abc:	b004      	add	sp, #16
 8006abe:	4770      	bx	lr
 8006ac0:	20000068 	.word	0x20000068

08006ac4 <_puts_r>:
 8006ac4:	6a03      	ldr	r3, [r0, #32]
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	6884      	ldr	r4, [r0, #8]
 8006aca:	4605      	mov	r5, r0
 8006acc:	460e      	mov	r6, r1
 8006ace:	b90b      	cbnz	r3, 8006ad4 <_puts_r+0x10>
 8006ad0:	f7ff ffb0 	bl	8006a34 <__sinit>
 8006ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad6:	07db      	lsls	r3, r3, #31
 8006ad8:	d405      	bmi.n	8006ae6 <_puts_r+0x22>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	0598      	lsls	r0, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_puts_r+0x22>
 8006ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae2:	f000 f9f2 	bl	8006eca <__retarget_lock_acquire_recursive>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	d513      	bpl.n	8006b14 <_puts_r+0x50>
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	b18b      	cbz	r3, 8006b14 <_puts_r+0x50>
 8006af0:	3e01      	subs	r6, #1
 8006af2:	68a3      	ldr	r3, [r4, #8]
 8006af4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006af8:	3b01      	subs	r3, #1
 8006afa:	60a3      	str	r3, [r4, #8]
 8006afc:	b9e9      	cbnz	r1, 8006b3a <_puts_r+0x76>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da2e      	bge.n	8006b60 <_puts_r+0x9c>
 8006b02:	4622      	mov	r2, r4
 8006b04:	210a      	movs	r1, #10
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 f87b 	bl	8006c02 <__swbuf_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d007      	beq.n	8006b20 <_puts_r+0x5c>
 8006b10:	250a      	movs	r5, #10
 8006b12:	e007      	b.n	8006b24 <_puts_r+0x60>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 f8b0 	bl	8006c7c <__swsetup_r>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d0e7      	beq.n	8006af0 <_puts_r+0x2c>
 8006b20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b26:	07da      	lsls	r2, r3, #31
 8006b28:	d405      	bmi.n	8006b36 <_puts_r+0x72>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	059b      	lsls	r3, r3, #22
 8006b2e:	d402      	bmi.n	8006b36 <_puts_r+0x72>
 8006b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b32:	f000 f9cb 	bl	8006ecc <__retarget_lock_release_recursive>
 8006b36:	4628      	mov	r0, r5
 8006b38:	bd70      	pop	{r4, r5, r6, pc}
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	da04      	bge.n	8006b48 <_puts_r+0x84>
 8006b3e:	69a2      	ldr	r2, [r4, #24]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	dc06      	bgt.n	8006b52 <_puts_r+0x8e>
 8006b44:	290a      	cmp	r1, #10
 8006b46:	d004      	beq.n	8006b52 <_puts_r+0x8e>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	6022      	str	r2, [r4, #0]
 8006b4e:	7019      	strb	r1, [r3, #0]
 8006b50:	e7cf      	b.n	8006af2 <_puts_r+0x2e>
 8006b52:	4622      	mov	r2, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 f854 	bl	8006c02 <__swbuf_r>
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d1c9      	bne.n	8006af2 <_puts_r+0x2e>
 8006b5e:	e7df      	b.n	8006b20 <_puts_r+0x5c>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	250a      	movs	r5, #10
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	701d      	strb	r5, [r3, #0]
 8006b6a:	e7db      	b.n	8006b24 <_puts_r+0x60>

08006b6c <puts>:
 8006b6c:	4b02      	ldr	r3, [pc, #8]	; (8006b78 <puts+0xc>)
 8006b6e:	4601      	mov	r1, r0
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	f7ff bfa7 	b.w	8006ac4 <_puts_r>
 8006b76:	bf00      	nop
 8006b78:	20000068 	.word	0x20000068

08006b7c <__sread>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	f000 f952 	bl	8006e2c <_read_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	bfab      	itete	ge
 8006b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b90:	181b      	addge	r3, r3, r0
 8006b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b96:	bfac      	ite	ge
 8006b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b9a:	81a3      	strhlt	r3, [r4, #12]
 8006b9c:	bd10      	pop	{r4, pc}

08006b9e <__swrite>:
 8006b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	05db      	lsls	r3, r3, #23
 8006ba8:	4605      	mov	r5, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	4616      	mov	r6, r2
 8006bae:	d505      	bpl.n	8006bbc <__swrite+0x1e>
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f000 f926 	bl	8006e08 <_lseek_r>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4628      	mov	r0, r5
 8006bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd2:	f000 b93d 	b.w	8006e50 <_write_r>

08006bd6 <__sseek>:
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	460c      	mov	r4, r1
 8006bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bde:	f000 f913 	bl	8006e08 <_lseek_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	bf15      	itete	ne
 8006be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strheq	r3, [r4, #12]
 8006bf4:	bf18      	it	ne
 8006bf6:	81a3      	strhne	r3, [r4, #12]
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <__sclose>:
 8006bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfe:	f000 b89d 	b.w	8006d3c <_close_r>

08006c02 <__swbuf_r>:
 8006c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c04:	460e      	mov	r6, r1
 8006c06:	4614      	mov	r4, r2
 8006c08:	4605      	mov	r5, r0
 8006c0a:	b118      	cbz	r0, 8006c14 <__swbuf_r+0x12>
 8006c0c:	6a03      	ldr	r3, [r0, #32]
 8006c0e:	b90b      	cbnz	r3, 8006c14 <__swbuf_r+0x12>
 8006c10:	f7ff ff10 	bl	8006a34 <__sinit>
 8006c14:	69a3      	ldr	r3, [r4, #24]
 8006c16:	60a3      	str	r3, [r4, #8]
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	071a      	lsls	r2, r3, #28
 8006c1c:	d525      	bpl.n	8006c6a <__swbuf_r+0x68>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	b31b      	cbz	r3, 8006c6a <__swbuf_r+0x68>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	1a98      	subs	r0, r3, r2
 8006c28:	6963      	ldr	r3, [r4, #20]
 8006c2a:	b2f6      	uxtb	r6, r6
 8006c2c:	4283      	cmp	r3, r0
 8006c2e:	4637      	mov	r7, r6
 8006c30:	dc04      	bgt.n	8006c3c <__swbuf_r+0x3a>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 fdab 	bl	8007790 <_fflush_r>
 8006c3a:	b9e0      	cbnz	r0, 8006c76 <__swbuf_r+0x74>
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	60a3      	str	r3, [r4, #8]
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	701e      	strb	r6, [r3, #0]
 8006c4a:	6962      	ldr	r2, [r4, #20]
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d004      	beq.n	8006c5c <__swbuf_r+0x5a>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	07db      	lsls	r3, r3, #31
 8006c56:	d506      	bpl.n	8006c66 <__swbuf_r+0x64>
 8006c58:	2e0a      	cmp	r6, #10
 8006c5a:	d104      	bne.n	8006c66 <__swbuf_r+0x64>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fd96 	bl	8007790 <_fflush_r>
 8006c64:	b938      	cbnz	r0, 8006c76 <__swbuf_r+0x74>
 8006c66:	4638      	mov	r0, r7
 8006c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f805 	bl	8006c7c <__swsetup_r>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d0d5      	beq.n	8006c22 <__swbuf_r+0x20>
 8006c76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c7a:	e7f4      	b.n	8006c66 <__swbuf_r+0x64>

08006c7c <__swsetup_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4b2a      	ldr	r3, [pc, #168]	; (8006d28 <__swsetup_r+0xac>)
 8006c80:	4605      	mov	r5, r0
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	460c      	mov	r4, r1
 8006c86:	b118      	cbz	r0, 8006c90 <__swsetup_r+0x14>
 8006c88:	6a03      	ldr	r3, [r0, #32]
 8006c8a:	b90b      	cbnz	r3, 8006c90 <__swsetup_r+0x14>
 8006c8c:	f7ff fed2 	bl	8006a34 <__sinit>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c96:	0718      	lsls	r0, r3, #28
 8006c98:	d422      	bmi.n	8006ce0 <__swsetup_r+0x64>
 8006c9a:	06d9      	lsls	r1, r3, #27
 8006c9c:	d407      	bmi.n	8006cae <__swsetup_r+0x32>
 8006c9e:	2309      	movs	r3, #9
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cac:	e034      	b.n	8006d18 <__swsetup_r+0x9c>
 8006cae:	0758      	lsls	r0, r3, #29
 8006cb0:	d512      	bpl.n	8006cd8 <__swsetup_r+0x5c>
 8006cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb4:	b141      	cbz	r1, 8006cc8 <__swsetup_r+0x4c>
 8006cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cba:	4299      	cmp	r1, r3
 8006cbc:	d002      	beq.n	8006cc4 <__swsetup_r+0x48>
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f914 	bl	8006eec <_free_r>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f043 0308 	orr.w	r3, r3, #8
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b94b      	cbnz	r3, 8006cf8 <__swsetup_r+0x7c>
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cee:	d003      	beq.n	8006cf8 <__swsetup_r+0x7c>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 fd9a 	bl	800782c <__smakebuf_r>
 8006cf8:	89a0      	ldrh	r0, [r4, #12]
 8006cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cfe:	f010 0301 	ands.w	r3, r0, #1
 8006d02:	d00a      	beq.n	8006d1a <__swsetup_r+0x9e>
 8006d04:	2300      	movs	r3, #0
 8006d06:	60a3      	str	r3, [r4, #8]
 8006d08:	6963      	ldr	r3, [r4, #20]
 8006d0a:	425b      	negs	r3, r3
 8006d0c:	61a3      	str	r3, [r4, #24]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	b943      	cbnz	r3, 8006d24 <__swsetup_r+0xa8>
 8006d12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d16:	d1c4      	bne.n	8006ca2 <__swsetup_r+0x26>
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	0781      	lsls	r1, r0, #30
 8006d1c:	bf58      	it	pl
 8006d1e:	6963      	ldrpl	r3, [r4, #20]
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	e7f4      	b.n	8006d0e <__swsetup_r+0x92>
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7f7      	b.n	8006d18 <__swsetup_r+0x9c>
 8006d28:	20000068 	.word	0x20000068

08006d2c <memset>:
 8006d2c:	4402      	add	r2, r0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <_close_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4d06      	ldr	r5, [pc, #24]	; (8006d58 <_close_r+0x1c>)
 8006d40:	2300      	movs	r3, #0
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	f7f9 fee2 	bl	8000b10 <_close>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_close_r+0x1a>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_close_r+0x1a>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20001c50 	.word	0x20001c50

08006d5c <_reclaim_reent>:
 8006d5c:	4b29      	ldr	r3, [pc, #164]	; (8006e04 <_reclaim_reent+0xa8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4283      	cmp	r3, r0
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	4604      	mov	r4, r0
 8006d66:	d04b      	beq.n	8006e00 <_reclaim_reent+0xa4>
 8006d68:	69c3      	ldr	r3, [r0, #28]
 8006d6a:	b143      	cbz	r3, 8006d7e <_reclaim_reent+0x22>
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d144      	bne.n	8006dfc <_reclaim_reent+0xa0>
 8006d72:	69e3      	ldr	r3, [r4, #28]
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	b111      	cbz	r1, 8006d7e <_reclaim_reent+0x22>
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 f8b7 	bl	8006eec <_free_r>
 8006d7e:	6961      	ldr	r1, [r4, #20]
 8006d80:	b111      	cbz	r1, 8006d88 <_reclaim_reent+0x2c>
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f8b2 	bl	8006eec <_free_r>
 8006d88:	69e1      	ldr	r1, [r4, #28]
 8006d8a:	b111      	cbz	r1, 8006d92 <_reclaim_reent+0x36>
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 f8ad 	bl	8006eec <_free_r>
 8006d92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d94:	b111      	cbz	r1, 8006d9c <_reclaim_reent+0x40>
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 f8a8 	bl	8006eec <_free_r>
 8006d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d9e:	b111      	cbz	r1, 8006da6 <_reclaim_reent+0x4a>
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 f8a3 	bl	8006eec <_free_r>
 8006da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006da8:	b111      	cbz	r1, 8006db0 <_reclaim_reent+0x54>
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f89e 	bl	8006eec <_free_r>
 8006db0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006db2:	b111      	cbz	r1, 8006dba <_reclaim_reent+0x5e>
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 f899 	bl	8006eec <_free_r>
 8006dba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006dbc:	b111      	cbz	r1, 8006dc4 <_reclaim_reent+0x68>
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 f894 	bl	8006eec <_free_r>
 8006dc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006dc6:	b111      	cbz	r1, 8006dce <_reclaim_reent+0x72>
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 f88f 	bl	8006eec <_free_r>
 8006dce:	6a23      	ldr	r3, [r4, #32]
 8006dd0:	b1b3      	cbz	r3, 8006e00 <_reclaim_reent+0xa4>
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dd8:	4718      	bx	r3
 8006dda:	5949      	ldr	r1, [r1, r5]
 8006ddc:	b941      	cbnz	r1, 8006df0 <_reclaim_reent+0x94>
 8006dde:	3504      	adds	r5, #4
 8006de0:	69e3      	ldr	r3, [r4, #28]
 8006de2:	2d80      	cmp	r5, #128	; 0x80
 8006de4:	68d9      	ldr	r1, [r3, #12]
 8006de6:	d1f8      	bne.n	8006dda <_reclaim_reent+0x7e>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 f87f 	bl	8006eec <_free_r>
 8006dee:	e7c0      	b.n	8006d72 <_reclaim_reent+0x16>
 8006df0:	680e      	ldr	r6, [r1, #0]
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 f87a 	bl	8006eec <_free_r>
 8006df8:	4631      	mov	r1, r6
 8006dfa:	e7ef      	b.n	8006ddc <_reclaim_reent+0x80>
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	e7ef      	b.n	8006de0 <_reclaim_reent+0x84>
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	bf00      	nop
 8006e04:	20000068 	.word	0x20000068

08006e08 <_lseek_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4d07      	ldr	r5, [pc, #28]	; (8006e28 <_lseek_r+0x20>)
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	4608      	mov	r0, r1
 8006e10:	4611      	mov	r1, r2
 8006e12:	2200      	movs	r2, #0
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f7f9 fea1 	bl	8000b5e <_lseek>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_lseek_r+0x1e>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_lseek_r+0x1e>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20001c50 	.word	0x20001c50

08006e2c <_read_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d07      	ldr	r5, [pc, #28]	; (8006e4c <_read_r+0x20>)
 8006e30:	4604      	mov	r4, r0
 8006e32:	4608      	mov	r0, r1
 8006e34:	4611      	mov	r1, r2
 8006e36:	2200      	movs	r2, #0
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f7f9 fe34 	bl	8000aa8 <_read>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_read_r+0x1e>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_read_r+0x1e>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	20001c50 	.word	0x20001c50

08006e50 <_write_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d07      	ldr	r5, [pc, #28]	; (8006e70 <_write_r+0x20>)
 8006e54:	4604      	mov	r4, r0
 8006e56:	4608      	mov	r0, r1
 8006e58:	4611      	mov	r1, r2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7f9 fe40 	bl	8000ae4 <_write>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_write_r+0x1e>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_write_r+0x1e>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20001c50 	.word	0x20001c50

08006e74 <__errno>:
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <__errno+0x8>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000068 	.word	0x20000068

08006e80 <__libc_init_array>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	4d0d      	ldr	r5, [pc, #52]	; (8006eb8 <__libc_init_array+0x38>)
 8006e84:	4c0d      	ldr	r4, [pc, #52]	; (8006ebc <__libc_init_array+0x3c>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	d109      	bne.n	8006ea4 <__libc_init_array+0x24>
 8006e90:	4d0b      	ldr	r5, [pc, #44]	; (8006ec0 <__libc_init_array+0x40>)
 8006e92:	4c0c      	ldr	r4, [pc, #48]	; (8006ec4 <__libc_init_array+0x44>)
 8006e94:	f000 fd38 	bl	8007908 <_init>
 8006e98:	1b64      	subs	r4, r4, r5
 8006e9a:	10a4      	asrs	r4, r4, #2
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	d105      	bne.n	8006eae <__libc_init_array+0x2e>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea8:	4798      	blx	r3
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7ee      	b.n	8006e8c <__libc_init_array+0xc>
 8006eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb2:	4798      	blx	r3
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7f2      	b.n	8006e9e <__libc_init_array+0x1e>
 8006eb8:	08007abc 	.word	0x08007abc
 8006ebc:	08007abc 	.word	0x08007abc
 8006ec0:	08007abc 	.word	0x08007abc
 8006ec4:	08007ac0 	.word	0x08007ac0

08006ec8 <__retarget_lock_init_recursive>:
 8006ec8:	4770      	bx	lr

08006eca <__retarget_lock_acquire_recursive>:
 8006eca:	4770      	bx	lr

08006ecc <__retarget_lock_release_recursive>:
 8006ecc:	4770      	bx	lr

08006ece <memcpy>:
 8006ece:	440a      	add	r2, r1
 8006ed0:	4291      	cmp	r1, r2
 8006ed2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ed6:	d100      	bne.n	8006eda <memcpy+0xc>
 8006ed8:	4770      	bx	lr
 8006eda:	b510      	push	{r4, lr}
 8006edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee4:	4291      	cmp	r1, r2
 8006ee6:	d1f9      	bne.n	8006edc <memcpy+0xe>
 8006ee8:	bd10      	pop	{r4, pc}
	...

08006eec <_free_r>:
 8006eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eee:	2900      	cmp	r1, #0
 8006ef0:	d044      	beq.n	8006f7c <_free_r+0x90>
 8006ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef6:	9001      	str	r0, [sp, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f1a1 0404 	sub.w	r4, r1, #4
 8006efe:	bfb8      	it	lt
 8006f00:	18e4      	addlt	r4, r4, r3
 8006f02:	f000 f8df 	bl	80070c4 <__malloc_lock>
 8006f06:	4a1e      	ldr	r2, [pc, #120]	; (8006f80 <_free_r+0x94>)
 8006f08:	9801      	ldr	r0, [sp, #4]
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	b933      	cbnz	r3, 8006f1c <_free_r+0x30>
 8006f0e:	6063      	str	r3, [r4, #4]
 8006f10:	6014      	str	r4, [r2, #0]
 8006f12:	b003      	add	sp, #12
 8006f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f18:	f000 b8da 	b.w	80070d0 <__malloc_unlock>
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	d908      	bls.n	8006f32 <_free_r+0x46>
 8006f20:	6825      	ldr	r5, [r4, #0]
 8006f22:	1961      	adds	r1, r4, r5
 8006f24:	428b      	cmp	r3, r1
 8006f26:	bf01      	itttt	eq
 8006f28:	6819      	ldreq	r1, [r3, #0]
 8006f2a:	685b      	ldreq	r3, [r3, #4]
 8006f2c:	1949      	addeq	r1, r1, r5
 8006f2e:	6021      	streq	r1, [r4, #0]
 8006f30:	e7ed      	b.n	8006f0e <_free_r+0x22>
 8006f32:	461a      	mov	r2, r3
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	b10b      	cbz	r3, 8006f3c <_free_r+0x50>
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d9fa      	bls.n	8006f32 <_free_r+0x46>
 8006f3c:	6811      	ldr	r1, [r2, #0]
 8006f3e:	1855      	adds	r5, r2, r1
 8006f40:	42a5      	cmp	r5, r4
 8006f42:	d10b      	bne.n	8006f5c <_free_r+0x70>
 8006f44:	6824      	ldr	r4, [r4, #0]
 8006f46:	4421      	add	r1, r4
 8006f48:	1854      	adds	r4, r2, r1
 8006f4a:	42a3      	cmp	r3, r4
 8006f4c:	6011      	str	r1, [r2, #0]
 8006f4e:	d1e0      	bne.n	8006f12 <_free_r+0x26>
 8006f50:	681c      	ldr	r4, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	6053      	str	r3, [r2, #4]
 8006f56:	440c      	add	r4, r1
 8006f58:	6014      	str	r4, [r2, #0]
 8006f5a:	e7da      	b.n	8006f12 <_free_r+0x26>
 8006f5c:	d902      	bls.n	8006f64 <_free_r+0x78>
 8006f5e:	230c      	movs	r3, #12
 8006f60:	6003      	str	r3, [r0, #0]
 8006f62:	e7d6      	b.n	8006f12 <_free_r+0x26>
 8006f64:	6825      	ldr	r5, [r4, #0]
 8006f66:	1961      	adds	r1, r4, r5
 8006f68:	428b      	cmp	r3, r1
 8006f6a:	bf04      	itt	eq
 8006f6c:	6819      	ldreq	r1, [r3, #0]
 8006f6e:	685b      	ldreq	r3, [r3, #4]
 8006f70:	6063      	str	r3, [r4, #4]
 8006f72:	bf04      	itt	eq
 8006f74:	1949      	addeq	r1, r1, r5
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	6054      	str	r4, [r2, #4]
 8006f7a:	e7ca      	b.n	8006f12 <_free_r+0x26>
 8006f7c:	b003      	add	sp, #12
 8006f7e:	bd30      	pop	{r4, r5, pc}
 8006f80:	20001c58 	.word	0x20001c58

08006f84 <sbrk_aligned>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4e0e      	ldr	r6, [pc, #56]	; (8006fc0 <sbrk_aligned+0x3c>)
 8006f88:	460c      	mov	r4, r1
 8006f8a:	6831      	ldr	r1, [r6, #0]
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	b911      	cbnz	r1, 8006f96 <sbrk_aligned+0x12>
 8006f90:	f000 fcaa 	bl	80078e8 <_sbrk_r>
 8006f94:	6030      	str	r0, [r6, #0]
 8006f96:	4621      	mov	r1, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f000 fca5 	bl	80078e8 <_sbrk_r>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	d00a      	beq.n	8006fb8 <sbrk_aligned+0x34>
 8006fa2:	1cc4      	adds	r4, r0, #3
 8006fa4:	f024 0403 	bic.w	r4, r4, #3
 8006fa8:	42a0      	cmp	r0, r4
 8006faa:	d007      	beq.n	8006fbc <sbrk_aligned+0x38>
 8006fac:	1a21      	subs	r1, r4, r0
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 fc9a 	bl	80078e8 <_sbrk_r>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d101      	bne.n	8006fbc <sbrk_aligned+0x38>
 8006fb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	20001c5c 	.word	0x20001c5c

08006fc4 <_malloc_r>:
 8006fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc8:	1ccd      	adds	r5, r1, #3
 8006fca:	f025 0503 	bic.w	r5, r5, #3
 8006fce:	3508      	adds	r5, #8
 8006fd0:	2d0c      	cmp	r5, #12
 8006fd2:	bf38      	it	cc
 8006fd4:	250c      	movcc	r5, #12
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	4607      	mov	r7, r0
 8006fda:	db01      	blt.n	8006fe0 <_malloc_r+0x1c>
 8006fdc:	42a9      	cmp	r1, r5
 8006fde:	d905      	bls.n	8006fec <_malloc_r+0x28>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070c0 <_malloc_r+0xfc>
 8006ff0:	f000 f868 	bl	80070c4 <__malloc_lock>
 8006ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff8:	461c      	mov	r4, r3
 8006ffa:	bb5c      	cbnz	r4, 8007054 <_malloc_r+0x90>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	4638      	mov	r0, r7
 8007000:	f7ff ffc0 	bl	8006f84 <sbrk_aligned>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	4604      	mov	r4, r0
 8007008:	d155      	bne.n	80070b6 <_malloc_r+0xf2>
 800700a:	f8d8 4000 	ldr.w	r4, [r8]
 800700e:	4626      	mov	r6, r4
 8007010:	2e00      	cmp	r6, #0
 8007012:	d145      	bne.n	80070a0 <_malloc_r+0xdc>
 8007014:	2c00      	cmp	r4, #0
 8007016:	d048      	beq.n	80070aa <_malloc_r+0xe6>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	4631      	mov	r1, r6
 800701c:	4638      	mov	r0, r7
 800701e:	eb04 0903 	add.w	r9, r4, r3
 8007022:	f000 fc61 	bl	80078e8 <_sbrk_r>
 8007026:	4581      	cmp	r9, r0
 8007028:	d13f      	bne.n	80070aa <_malloc_r+0xe6>
 800702a:	6821      	ldr	r1, [r4, #0]
 800702c:	1a6d      	subs	r5, r5, r1
 800702e:	4629      	mov	r1, r5
 8007030:	4638      	mov	r0, r7
 8007032:	f7ff ffa7 	bl	8006f84 <sbrk_aligned>
 8007036:	3001      	adds	r0, #1
 8007038:	d037      	beq.n	80070aa <_malloc_r+0xe6>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	442b      	add	r3, r5
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	f8d8 3000 	ldr.w	r3, [r8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d038      	beq.n	80070ba <_malloc_r+0xf6>
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	42a2      	cmp	r2, r4
 800704c:	d12b      	bne.n	80070a6 <_malloc_r+0xe2>
 800704e:	2200      	movs	r2, #0
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	e00f      	b.n	8007074 <_malloc_r+0xb0>
 8007054:	6822      	ldr	r2, [r4, #0]
 8007056:	1b52      	subs	r2, r2, r5
 8007058:	d41f      	bmi.n	800709a <_malloc_r+0xd6>
 800705a:	2a0b      	cmp	r2, #11
 800705c:	d917      	bls.n	800708e <_malloc_r+0xca>
 800705e:	1961      	adds	r1, r4, r5
 8007060:	42a3      	cmp	r3, r4
 8007062:	6025      	str	r5, [r4, #0]
 8007064:	bf18      	it	ne
 8007066:	6059      	strne	r1, [r3, #4]
 8007068:	6863      	ldr	r3, [r4, #4]
 800706a:	bf08      	it	eq
 800706c:	f8c8 1000 	streq.w	r1, [r8]
 8007070:	5162      	str	r2, [r4, r5]
 8007072:	604b      	str	r3, [r1, #4]
 8007074:	4638      	mov	r0, r7
 8007076:	f104 060b 	add.w	r6, r4, #11
 800707a:	f000 f829 	bl	80070d0 <__malloc_unlock>
 800707e:	f026 0607 	bic.w	r6, r6, #7
 8007082:	1d23      	adds	r3, r4, #4
 8007084:	1af2      	subs	r2, r6, r3
 8007086:	d0ae      	beq.n	8006fe6 <_malloc_r+0x22>
 8007088:	1b9b      	subs	r3, r3, r6
 800708a:	50a3      	str	r3, [r4, r2]
 800708c:	e7ab      	b.n	8006fe6 <_malloc_r+0x22>
 800708e:	42a3      	cmp	r3, r4
 8007090:	6862      	ldr	r2, [r4, #4]
 8007092:	d1dd      	bne.n	8007050 <_malloc_r+0x8c>
 8007094:	f8c8 2000 	str.w	r2, [r8]
 8007098:	e7ec      	b.n	8007074 <_malloc_r+0xb0>
 800709a:	4623      	mov	r3, r4
 800709c:	6864      	ldr	r4, [r4, #4]
 800709e:	e7ac      	b.n	8006ffa <_malloc_r+0x36>
 80070a0:	4634      	mov	r4, r6
 80070a2:	6876      	ldr	r6, [r6, #4]
 80070a4:	e7b4      	b.n	8007010 <_malloc_r+0x4c>
 80070a6:	4613      	mov	r3, r2
 80070a8:	e7cc      	b.n	8007044 <_malloc_r+0x80>
 80070aa:	230c      	movs	r3, #12
 80070ac:	603b      	str	r3, [r7, #0]
 80070ae:	4638      	mov	r0, r7
 80070b0:	f000 f80e 	bl	80070d0 <__malloc_unlock>
 80070b4:	e797      	b.n	8006fe6 <_malloc_r+0x22>
 80070b6:	6025      	str	r5, [r4, #0]
 80070b8:	e7dc      	b.n	8007074 <_malloc_r+0xb0>
 80070ba:	605b      	str	r3, [r3, #4]
 80070bc:	deff      	udf	#255	; 0xff
 80070be:	bf00      	nop
 80070c0:	20001c58 	.word	0x20001c58

080070c4 <__malloc_lock>:
 80070c4:	4801      	ldr	r0, [pc, #4]	; (80070cc <__malloc_lock+0x8>)
 80070c6:	f7ff bf00 	b.w	8006eca <__retarget_lock_acquire_recursive>
 80070ca:	bf00      	nop
 80070cc:	20001c54 	.word	0x20001c54

080070d0 <__malloc_unlock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <__malloc_unlock+0x8>)
 80070d2:	f7ff befb 	b.w	8006ecc <__retarget_lock_release_recursive>
 80070d6:	bf00      	nop
 80070d8:	20001c54 	.word	0x20001c54

080070dc <__sfputc_r>:
 80070dc:	6893      	ldr	r3, [r2, #8]
 80070de:	3b01      	subs	r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	b410      	push	{r4}
 80070e4:	6093      	str	r3, [r2, #8]
 80070e6:	da08      	bge.n	80070fa <__sfputc_r+0x1e>
 80070e8:	6994      	ldr	r4, [r2, #24]
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	db01      	blt.n	80070f2 <__sfputc_r+0x16>
 80070ee:	290a      	cmp	r1, #10
 80070f0:	d103      	bne.n	80070fa <__sfputc_r+0x1e>
 80070f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f6:	f7ff bd84 	b.w	8006c02 <__swbuf_r>
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	1c58      	adds	r0, r3, #1
 80070fe:	6010      	str	r0, [r2, #0]
 8007100:	7019      	strb	r1, [r3, #0]
 8007102:	4608      	mov	r0, r1
 8007104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007108:	4770      	bx	lr

0800710a <__sfputs_r>:
 800710a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710c:	4606      	mov	r6, r0
 800710e:	460f      	mov	r7, r1
 8007110:	4614      	mov	r4, r2
 8007112:	18d5      	adds	r5, r2, r3
 8007114:	42ac      	cmp	r4, r5
 8007116:	d101      	bne.n	800711c <__sfputs_r+0x12>
 8007118:	2000      	movs	r0, #0
 800711a:	e007      	b.n	800712c <__sfputs_r+0x22>
 800711c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007120:	463a      	mov	r2, r7
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff ffda 	bl	80070dc <__sfputc_r>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d1f3      	bne.n	8007114 <__sfputs_r+0xa>
 800712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007130 <_vfiprintf_r>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	460d      	mov	r5, r1
 8007136:	b09d      	sub	sp, #116	; 0x74
 8007138:	4614      	mov	r4, r2
 800713a:	4698      	mov	r8, r3
 800713c:	4606      	mov	r6, r0
 800713e:	b118      	cbz	r0, 8007148 <_vfiprintf_r+0x18>
 8007140:	6a03      	ldr	r3, [r0, #32]
 8007142:	b90b      	cbnz	r3, 8007148 <_vfiprintf_r+0x18>
 8007144:	f7ff fc76 	bl	8006a34 <__sinit>
 8007148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800714a:	07d9      	lsls	r1, r3, #31
 800714c:	d405      	bmi.n	800715a <_vfiprintf_r+0x2a>
 800714e:	89ab      	ldrh	r3, [r5, #12]
 8007150:	059a      	lsls	r2, r3, #22
 8007152:	d402      	bmi.n	800715a <_vfiprintf_r+0x2a>
 8007154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007156:	f7ff feb8 	bl	8006eca <__retarget_lock_acquire_recursive>
 800715a:	89ab      	ldrh	r3, [r5, #12]
 800715c:	071b      	lsls	r3, r3, #28
 800715e:	d501      	bpl.n	8007164 <_vfiprintf_r+0x34>
 8007160:	692b      	ldr	r3, [r5, #16]
 8007162:	b99b      	cbnz	r3, 800718c <_vfiprintf_r+0x5c>
 8007164:	4629      	mov	r1, r5
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff fd88 	bl	8006c7c <__swsetup_r>
 800716c:	b170      	cbz	r0, 800718c <_vfiprintf_r+0x5c>
 800716e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007170:	07dc      	lsls	r4, r3, #31
 8007172:	d504      	bpl.n	800717e <_vfiprintf_r+0x4e>
 8007174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007178:	b01d      	add	sp, #116	; 0x74
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	89ab      	ldrh	r3, [r5, #12]
 8007180:	0598      	lsls	r0, r3, #22
 8007182:	d4f7      	bmi.n	8007174 <_vfiprintf_r+0x44>
 8007184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007186:	f7ff fea1 	bl	8006ecc <__retarget_lock_release_recursive>
 800718a:	e7f3      	b.n	8007174 <_vfiprintf_r+0x44>
 800718c:	2300      	movs	r3, #0
 800718e:	9309      	str	r3, [sp, #36]	; 0x24
 8007190:	2320      	movs	r3, #32
 8007192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007196:	f8cd 800c 	str.w	r8, [sp, #12]
 800719a:	2330      	movs	r3, #48	; 0x30
 800719c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007350 <_vfiprintf_r+0x220>
 80071a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071a4:	f04f 0901 	mov.w	r9, #1
 80071a8:	4623      	mov	r3, r4
 80071aa:	469a      	mov	sl, r3
 80071ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b0:	b10a      	cbz	r2, 80071b6 <_vfiprintf_r+0x86>
 80071b2:	2a25      	cmp	r2, #37	; 0x25
 80071b4:	d1f9      	bne.n	80071aa <_vfiprintf_r+0x7a>
 80071b6:	ebba 0b04 	subs.w	fp, sl, r4
 80071ba:	d00b      	beq.n	80071d4 <_vfiprintf_r+0xa4>
 80071bc:	465b      	mov	r3, fp
 80071be:	4622      	mov	r2, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7ff ffa1 	bl	800710a <__sfputs_r>
 80071c8:	3001      	adds	r0, #1
 80071ca:	f000 80a9 	beq.w	8007320 <_vfiprintf_r+0x1f0>
 80071ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d0:	445a      	add	r2, fp
 80071d2:	9209      	str	r2, [sp, #36]	; 0x24
 80071d4:	f89a 3000 	ldrb.w	r3, [sl]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80a1 	beq.w	8007320 <_vfiprintf_r+0x1f0>
 80071de:	2300      	movs	r3, #0
 80071e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e8:	f10a 0a01 	add.w	sl, sl, #1
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	9307      	str	r3, [sp, #28]
 80071f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071f4:	931a      	str	r3, [sp, #104]	; 0x68
 80071f6:	4654      	mov	r4, sl
 80071f8:	2205      	movs	r2, #5
 80071fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fe:	4854      	ldr	r0, [pc, #336]	; (8007350 <_vfiprintf_r+0x220>)
 8007200:	f7f8 fff6 	bl	80001f0 <memchr>
 8007204:	9a04      	ldr	r2, [sp, #16]
 8007206:	b9d8      	cbnz	r0, 8007240 <_vfiprintf_r+0x110>
 8007208:	06d1      	lsls	r1, r2, #27
 800720a:	bf44      	itt	mi
 800720c:	2320      	movmi	r3, #32
 800720e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007212:	0713      	lsls	r3, r2, #28
 8007214:	bf44      	itt	mi
 8007216:	232b      	movmi	r3, #43	; 0x2b
 8007218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800721c:	f89a 3000 	ldrb.w	r3, [sl]
 8007220:	2b2a      	cmp	r3, #42	; 0x2a
 8007222:	d015      	beq.n	8007250 <_vfiprintf_r+0x120>
 8007224:	9a07      	ldr	r2, [sp, #28]
 8007226:	4654      	mov	r4, sl
 8007228:	2000      	movs	r0, #0
 800722a:	f04f 0c0a 	mov.w	ip, #10
 800722e:	4621      	mov	r1, r4
 8007230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007234:	3b30      	subs	r3, #48	; 0x30
 8007236:	2b09      	cmp	r3, #9
 8007238:	d94d      	bls.n	80072d6 <_vfiprintf_r+0x1a6>
 800723a:	b1b0      	cbz	r0, 800726a <_vfiprintf_r+0x13a>
 800723c:	9207      	str	r2, [sp, #28]
 800723e:	e014      	b.n	800726a <_vfiprintf_r+0x13a>
 8007240:	eba0 0308 	sub.w	r3, r0, r8
 8007244:	fa09 f303 	lsl.w	r3, r9, r3
 8007248:	4313      	orrs	r3, r2
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	46a2      	mov	sl, r4
 800724e:	e7d2      	b.n	80071f6 <_vfiprintf_r+0xc6>
 8007250:	9b03      	ldr	r3, [sp, #12]
 8007252:	1d19      	adds	r1, r3, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	9103      	str	r1, [sp, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	bfbb      	ittet	lt
 800725c:	425b      	neglt	r3, r3
 800725e:	f042 0202 	orrlt.w	r2, r2, #2
 8007262:	9307      	strge	r3, [sp, #28]
 8007264:	9307      	strlt	r3, [sp, #28]
 8007266:	bfb8      	it	lt
 8007268:	9204      	strlt	r2, [sp, #16]
 800726a:	7823      	ldrb	r3, [r4, #0]
 800726c:	2b2e      	cmp	r3, #46	; 0x2e
 800726e:	d10c      	bne.n	800728a <_vfiprintf_r+0x15a>
 8007270:	7863      	ldrb	r3, [r4, #1]
 8007272:	2b2a      	cmp	r3, #42	; 0x2a
 8007274:	d134      	bne.n	80072e0 <_vfiprintf_r+0x1b0>
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	1d1a      	adds	r2, r3, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	9203      	str	r2, [sp, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	bfb8      	it	lt
 8007282:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007286:	3402      	adds	r4, #2
 8007288:	9305      	str	r3, [sp, #20]
 800728a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007360 <_vfiprintf_r+0x230>
 800728e:	7821      	ldrb	r1, [r4, #0]
 8007290:	2203      	movs	r2, #3
 8007292:	4650      	mov	r0, sl
 8007294:	f7f8 ffac 	bl	80001f0 <memchr>
 8007298:	b138      	cbz	r0, 80072aa <_vfiprintf_r+0x17a>
 800729a:	9b04      	ldr	r3, [sp, #16]
 800729c:	eba0 000a 	sub.w	r0, r0, sl
 80072a0:	2240      	movs	r2, #64	; 0x40
 80072a2:	4082      	lsls	r2, r0
 80072a4:	4313      	orrs	r3, r2
 80072a6:	3401      	adds	r4, #1
 80072a8:	9304      	str	r3, [sp, #16]
 80072aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ae:	4829      	ldr	r0, [pc, #164]	; (8007354 <_vfiprintf_r+0x224>)
 80072b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072b4:	2206      	movs	r2, #6
 80072b6:	f7f8 ff9b 	bl	80001f0 <memchr>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d03f      	beq.n	800733e <_vfiprintf_r+0x20e>
 80072be:	4b26      	ldr	r3, [pc, #152]	; (8007358 <_vfiprintf_r+0x228>)
 80072c0:	bb1b      	cbnz	r3, 800730a <_vfiprintf_r+0x1da>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	3307      	adds	r3, #7
 80072c6:	f023 0307 	bic.w	r3, r3, #7
 80072ca:	3308      	adds	r3, #8
 80072cc:	9303      	str	r3, [sp, #12]
 80072ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d0:	443b      	add	r3, r7
 80072d2:	9309      	str	r3, [sp, #36]	; 0x24
 80072d4:	e768      	b.n	80071a8 <_vfiprintf_r+0x78>
 80072d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80072da:	460c      	mov	r4, r1
 80072dc:	2001      	movs	r0, #1
 80072de:	e7a6      	b.n	800722e <_vfiprintf_r+0xfe>
 80072e0:	2300      	movs	r3, #0
 80072e2:	3401      	adds	r4, #1
 80072e4:	9305      	str	r3, [sp, #20]
 80072e6:	4619      	mov	r1, r3
 80072e8:	f04f 0c0a 	mov.w	ip, #10
 80072ec:	4620      	mov	r0, r4
 80072ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f2:	3a30      	subs	r2, #48	; 0x30
 80072f4:	2a09      	cmp	r2, #9
 80072f6:	d903      	bls.n	8007300 <_vfiprintf_r+0x1d0>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0c6      	beq.n	800728a <_vfiprintf_r+0x15a>
 80072fc:	9105      	str	r1, [sp, #20]
 80072fe:	e7c4      	b.n	800728a <_vfiprintf_r+0x15a>
 8007300:	fb0c 2101 	mla	r1, ip, r1, r2
 8007304:	4604      	mov	r4, r0
 8007306:	2301      	movs	r3, #1
 8007308:	e7f0      	b.n	80072ec <_vfiprintf_r+0x1bc>
 800730a:	ab03      	add	r3, sp, #12
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	462a      	mov	r2, r5
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <_vfiprintf_r+0x22c>)
 8007312:	a904      	add	r1, sp, #16
 8007314:	4630      	mov	r0, r6
 8007316:	f3af 8000 	nop.w
 800731a:	4607      	mov	r7, r0
 800731c:	1c78      	adds	r0, r7, #1
 800731e:	d1d6      	bne.n	80072ce <_vfiprintf_r+0x19e>
 8007320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007322:	07d9      	lsls	r1, r3, #31
 8007324:	d405      	bmi.n	8007332 <_vfiprintf_r+0x202>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	059a      	lsls	r2, r3, #22
 800732a:	d402      	bmi.n	8007332 <_vfiprintf_r+0x202>
 800732c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800732e:	f7ff fdcd 	bl	8006ecc <__retarget_lock_release_recursive>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	065b      	lsls	r3, r3, #25
 8007336:	f53f af1d 	bmi.w	8007174 <_vfiprintf_r+0x44>
 800733a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800733c:	e71c      	b.n	8007178 <_vfiprintf_r+0x48>
 800733e:	ab03      	add	r3, sp, #12
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	462a      	mov	r2, r5
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <_vfiprintf_r+0x22c>)
 8007346:	a904      	add	r1, sp, #16
 8007348:	4630      	mov	r0, r6
 800734a:	f000 f879 	bl	8007440 <_printf_i>
 800734e:	e7e4      	b.n	800731a <_vfiprintf_r+0x1ea>
 8007350:	08007a80 	.word	0x08007a80
 8007354:	08007a8a 	.word	0x08007a8a
 8007358:	00000000 	.word	0x00000000
 800735c:	0800710b 	.word	0x0800710b
 8007360:	08007a86 	.word	0x08007a86

08007364 <_printf_common>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	4616      	mov	r6, r2
 800736a:	4699      	mov	r9, r3
 800736c:	688a      	ldr	r2, [r1, #8]
 800736e:	690b      	ldr	r3, [r1, #16]
 8007370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007374:	4293      	cmp	r3, r2
 8007376:	bfb8      	it	lt
 8007378:	4613      	movlt	r3, r2
 800737a:	6033      	str	r3, [r6, #0]
 800737c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007380:	4607      	mov	r7, r0
 8007382:	460c      	mov	r4, r1
 8007384:	b10a      	cbz	r2, 800738a <_printf_common+0x26>
 8007386:	3301      	adds	r3, #1
 8007388:	6033      	str	r3, [r6, #0]
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	0699      	lsls	r1, r3, #26
 800738e:	bf42      	ittt	mi
 8007390:	6833      	ldrmi	r3, [r6, #0]
 8007392:	3302      	addmi	r3, #2
 8007394:	6033      	strmi	r3, [r6, #0]
 8007396:	6825      	ldr	r5, [r4, #0]
 8007398:	f015 0506 	ands.w	r5, r5, #6
 800739c:	d106      	bne.n	80073ac <_printf_common+0x48>
 800739e:	f104 0a19 	add.w	sl, r4, #25
 80073a2:	68e3      	ldr	r3, [r4, #12]
 80073a4:	6832      	ldr	r2, [r6, #0]
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	42ab      	cmp	r3, r5
 80073aa:	dc26      	bgt.n	80073fa <_printf_common+0x96>
 80073ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073b0:	1e13      	subs	r3, r2, #0
 80073b2:	6822      	ldr	r2, [r4, #0]
 80073b4:	bf18      	it	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	0692      	lsls	r2, r2, #26
 80073ba:	d42b      	bmi.n	8007414 <_printf_common+0xb0>
 80073bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c0:	4649      	mov	r1, r9
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c0      	blx	r8
 80073c6:	3001      	adds	r0, #1
 80073c8:	d01e      	beq.n	8007408 <_printf_common+0xa4>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	f003 0306 	and.w	r3, r3, #6
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	bf02      	ittt	eq
 80073d6:	68e5      	ldreq	r5, [r4, #12]
 80073d8:	6833      	ldreq	r3, [r6, #0]
 80073da:	1aed      	subeq	r5, r5, r3
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	bf0c      	ite	eq
 80073e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073e4:	2500      	movne	r5, #0
 80073e6:	4293      	cmp	r3, r2
 80073e8:	bfc4      	itt	gt
 80073ea:	1a9b      	subgt	r3, r3, r2
 80073ec:	18ed      	addgt	r5, r5, r3
 80073ee:	2600      	movs	r6, #0
 80073f0:	341a      	adds	r4, #26
 80073f2:	42b5      	cmp	r5, r6
 80073f4:	d11a      	bne.n	800742c <_printf_common+0xc8>
 80073f6:	2000      	movs	r0, #0
 80073f8:	e008      	b.n	800740c <_printf_common+0xa8>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4652      	mov	r2, sl
 80073fe:	4649      	mov	r1, r9
 8007400:	4638      	mov	r0, r7
 8007402:	47c0      	blx	r8
 8007404:	3001      	adds	r0, #1
 8007406:	d103      	bne.n	8007410 <_printf_common+0xac>
 8007408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800740c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007410:	3501      	adds	r5, #1
 8007412:	e7c6      	b.n	80073a2 <_printf_common+0x3e>
 8007414:	18e1      	adds	r1, r4, r3
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	2030      	movs	r0, #48	; 0x30
 800741a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800741e:	4422      	add	r2, r4
 8007420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007428:	3302      	adds	r3, #2
 800742a:	e7c7      	b.n	80073bc <_printf_common+0x58>
 800742c:	2301      	movs	r3, #1
 800742e:	4622      	mov	r2, r4
 8007430:	4649      	mov	r1, r9
 8007432:	4638      	mov	r0, r7
 8007434:	47c0      	blx	r8
 8007436:	3001      	adds	r0, #1
 8007438:	d0e6      	beq.n	8007408 <_printf_common+0xa4>
 800743a:	3601      	adds	r6, #1
 800743c:	e7d9      	b.n	80073f2 <_printf_common+0x8e>
	...

08007440 <_printf_i>:
 8007440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007444:	7e0f      	ldrb	r7, [r1, #24]
 8007446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007448:	2f78      	cmp	r7, #120	; 0x78
 800744a:	4691      	mov	r9, r2
 800744c:	4680      	mov	r8, r0
 800744e:	460c      	mov	r4, r1
 8007450:	469a      	mov	sl, r3
 8007452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007456:	d807      	bhi.n	8007468 <_printf_i+0x28>
 8007458:	2f62      	cmp	r7, #98	; 0x62
 800745a:	d80a      	bhi.n	8007472 <_printf_i+0x32>
 800745c:	2f00      	cmp	r7, #0
 800745e:	f000 80d4 	beq.w	800760a <_printf_i+0x1ca>
 8007462:	2f58      	cmp	r7, #88	; 0x58
 8007464:	f000 80c0 	beq.w	80075e8 <_printf_i+0x1a8>
 8007468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800746c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007470:	e03a      	b.n	80074e8 <_printf_i+0xa8>
 8007472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007476:	2b15      	cmp	r3, #21
 8007478:	d8f6      	bhi.n	8007468 <_printf_i+0x28>
 800747a:	a101      	add	r1, pc, #4	; (adr r1, 8007480 <_printf_i+0x40>)
 800747c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007480:	080074d9 	.word	0x080074d9
 8007484:	080074ed 	.word	0x080074ed
 8007488:	08007469 	.word	0x08007469
 800748c:	08007469 	.word	0x08007469
 8007490:	08007469 	.word	0x08007469
 8007494:	08007469 	.word	0x08007469
 8007498:	080074ed 	.word	0x080074ed
 800749c:	08007469 	.word	0x08007469
 80074a0:	08007469 	.word	0x08007469
 80074a4:	08007469 	.word	0x08007469
 80074a8:	08007469 	.word	0x08007469
 80074ac:	080075f1 	.word	0x080075f1
 80074b0:	08007519 	.word	0x08007519
 80074b4:	080075ab 	.word	0x080075ab
 80074b8:	08007469 	.word	0x08007469
 80074bc:	08007469 	.word	0x08007469
 80074c0:	08007613 	.word	0x08007613
 80074c4:	08007469 	.word	0x08007469
 80074c8:	08007519 	.word	0x08007519
 80074cc:	08007469 	.word	0x08007469
 80074d0:	08007469 	.word	0x08007469
 80074d4:	080075b3 	.word	0x080075b3
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	1d1a      	adds	r2, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	602a      	str	r2, [r5, #0]
 80074e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074e8:	2301      	movs	r3, #1
 80074ea:	e09f      	b.n	800762c <_printf_i+0x1ec>
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	682b      	ldr	r3, [r5, #0]
 80074f0:	0607      	lsls	r7, r0, #24
 80074f2:	f103 0104 	add.w	r1, r3, #4
 80074f6:	6029      	str	r1, [r5, #0]
 80074f8:	d501      	bpl.n	80074fe <_printf_i+0xbe>
 80074fa:	681e      	ldr	r6, [r3, #0]
 80074fc:	e003      	b.n	8007506 <_printf_i+0xc6>
 80074fe:	0646      	lsls	r6, r0, #25
 8007500:	d5fb      	bpl.n	80074fa <_printf_i+0xba>
 8007502:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007506:	2e00      	cmp	r6, #0
 8007508:	da03      	bge.n	8007512 <_printf_i+0xd2>
 800750a:	232d      	movs	r3, #45	; 0x2d
 800750c:	4276      	negs	r6, r6
 800750e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007512:	485a      	ldr	r0, [pc, #360]	; (800767c <_printf_i+0x23c>)
 8007514:	230a      	movs	r3, #10
 8007516:	e012      	b.n	800753e <_printf_i+0xfe>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	6820      	ldr	r0, [r4, #0]
 800751c:	1d19      	adds	r1, r3, #4
 800751e:	6029      	str	r1, [r5, #0]
 8007520:	0605      	lsls	r5, r0, #24
 8007522:	d501      	bpl.n	8007528 <_printf_i+0xe8>
 8007524:	681e      	ldr	r6, [r3, #0]
 8007526:	e002      	b.n	800752e <_printf_i+0xee>
 8007528:	0641      	lsls	r1, r0, #25
 800752a:	d5fb      	bpl.n	8007524 <_printf_i+0xe4>
 800752c:	881e      	ldrh	r6, [r3, #0]
 800752e:	4853      	ldr	r0, [pc, #332]	; (800767c <_printf_i+0x23c>)
 8007530:	2f6f      	cmp	r7, #111	; 0x6f
 8007532:	bf0c      	ite	eq
 8007534:	2308      	moveq	r3, #8
 8007536:	230a      	movne	r3, #10
 8007538:	2100      	movs	r1, #0
 800753a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800753e:	6865      	ldr	r5, [r4, #4]
 8007540:	60a5      	str	r5, [r4, #8]
 8007542:	2d00      	cmp	r5, #0
 8007544:	bfa2      	ittt	ge
 8007546:	6821      	ldrge	r1, [r4, #0]
 8007548:	f021 0104 	bicge.w	r1, r1, #4
 800754c:	6021      	strge	r1, [r4, #0]
 800754e:	b90e      	cbnz	r6, 8007554 <_printf_i+0x114>
 8007550:	2d00      	cmp	r5, #0
 8007552:	d04b      	beq.n	80075ec <_printf_i+0x1ac>
 8007554:	4615      	mov	r5, r2
 8007556:	fbb6 f1f3 	udiv	r1, r6, r3
 800755a:	fb03 6711 	mls	r7, r3, r1, r6
 800755e:	5dc7      	ldrb	r7, [r0, r7]
 8007560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007564:	4637      	mov	r7, r6
 8007566:	42bb      	cmp	r3, r7
 8007568:	460e      	mov	r6, r1
 800756a:	d9f4      	bls.n	8007556 <_printf_i+0x116>
 800756c:	2b08      	cmp	r3, #8
 800756e:	d10b      	bne.n	8007588 <_printf_i+0x148>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	07de      	lsls	r6, r3, #31
 8007574:	d508      	bpl.n	8007588 <_printf_i+0x148>
 8007576:	6923      	ldr	r3, [r4, #16]
 8007578:	6861      	ldr	r1, [r4, #4]
 800757a:	4299      	cmp	r1, r3
 800757c:	bfde      	ittt	le
 800757e:	2330      	movle	r3, #48	; 0x30
 8007580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007584:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007588:	1b52      	subs	r2, r2, r5
 800758a:	6122      	str	r2, [r4, #16]
 800758c:	f8cd a000 	str.w	sl, [sp]
 8007590:	464b      	mov	r3, r9
 8007592:	aa03      	add	r2, sp, #12
 8007594:	4621      	mov	r1, r4
 8007596:	4640      	mov	r0, r8
 8007598:	f7ff fee4 	bl	8007364 <_printf_common>
 800759c:	3001      	adds	r0, #1
 800759e:	d14a      	bne.n	8007636 <_printf_i+0x1f6>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a4:	b004      	add	sp, #16
 80075a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	f043 0320 	orr.w	r3, r3, #32
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	4833      	ldr	r0, [pc, #204]	; (8007680 <_printf_i+0x240>)
 80075b4:	2778      	movs	r7, #120	; 0x78
 80075b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	6829      	ldr	r1, [r5, #0]
 80075be:	061f      	lsls	r7, r3, #24
 80075c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075c4:	d402      	bmi.n	80075cc <_printf_i+0x18c>
 80075c6:	065f      	lsls	r7, r3, #25
 80075c8:	bf48      	it	mi
 80075ca:	b2b6      	uxthmi	r6, r6
 80075cc:	07df      	lsls	r7, r3, #31
 80075ce:	bf48      	it	mi
 80075d0:	f043 0320 	orrmi.w	r3, r3, #32
 80075d4:	6029      	str	r1, [r5, #0]
 80075d6:	bf48      	it	mi
 80075d8:	6023      	strmi	r3, [r4, #0]
 80075da:	b91e      	cbnz	r6, 80075e4 <_printf_i+0x1a4>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	f023 0320 	bic.w	r3, r3, #32
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	2310      	movs	r3, #16
 80075e6:	e7a7      	b.n	8007538 <_printf_i+0xf8>
 80075e8:	4824      	ldr	r0, [pc, #144]	; (800767c <_printf_i+0x23c>)
 80075ea:	e7e4      	b.n	80075b6 <_printf_i+0x176>
 80075ec:	4615      	mov	r5, r2
 80075ee:	e7bd      	b.n	800756c <_printf_i+0x12c>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	6826      	ldr	r6, [r4, #0]
 80075f4:	6961      	ldr	r1, [r4, #20]
 80075f6:	1d18      	adds	r0, r3, #4
 80075f8:	6028      	str	r0, [r5, #0]
 80075fa:	0635      	lsls	r5, r6, #24
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	d501      	bpl.n	8007604 <_printf_i+0x1c4>
 8007600:	6019      	str	r1, [r3, #0]
 8007602:	e002      	b.n	800760a <_printf_i+0x1ca>
 8007604:	0670      	lsls	r0, r6, #25
 8007606:	d5fb      	bpl.n	8007600 <_printf_i+0x1c0>
 8007608:	8019      	strh	r1, [r3, #0]
 800760a:	2300      	movs	r3, #0
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	4615      	mov	r5, r2
 8007610:	e7bc      	b.n	800758c <_printf_i+0x14c>
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	1d1a      	adds	r2, r3, #4
 8007616:	602a      	str	r2, [r5, #0]
 8007618:	681d      	ldr	r5, [r3, #0]
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	2100      	movs	r1, #0
 800761e:	4628      	mov	r0, r5
 8007620:	f7f8 fde6 	bl	80001f0 <memchr>
 8007624:	b108      	cbz	r0, 800762a <_printf_i+0x1ea>
 8007626:	1b40      	subs	r0, r0, r5
 8007628:	6060      	str	r0, [r4, #4]
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	2300      	movs	r3, #0
 8007630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007634:	e7aa      	b.n	800758c <_printf_i+0x14c>
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	462a      	mov	r2, r5
 800763a:	4649      	mov	r1, r9
 800763c:	4640      	mov	r0, r8
 800763e:	47d0      	blx	sl
 8007640:	3001      	adds	r0, #1
 8007642:	d0ad      	beq.n	80075a0 <_printf_i+0x160>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	079b      	lsls	r3, r3, #30
 8007648:	d413      	bmi.n	8007672 <_printf_i+0x232>
 800764a:	68e0      	ldr	r0, [r4, #12]
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	4298      	cmp	r0, r3
 8007650:	bfb8      	it	lt
 8007652:	4618      	movlt	r0, r3
 8007654:	e7a6      	b.n	80075a4 <_printf_i+0x164>
 8007656:	2301      	movs	r3, #1
 8007658:	4632      	mov	r2, r6
 800765a:	4649      	mov	r1, r9
 800765c:	4640      	mov	r0, r8
 800765e:	47d0      	blx	sl
 8007660:	3001      	adds	r0, #1
 8007662:	d09d      	beq.n	80075a0 <_printf_i+0x160>
 8007664:	3501      	adds	r5, #1
 8007666:	68e3      	ldr	r3, [r4, #12]
 8007668:	9903      	ldr	r1, [sp, #12]
 800766a:	1a5b      	subs	r3, r3, r1
 800766c:	42ab      	cmp	r3, r5
 800766e:	dcf2      	bgt.n	8007656 <_printf_i+0x216>
 8007670:	e7eb      	b.n	800764a <_printf_i+0x20a>
 8007672:	2500      	movs	r5, #0
 8007674:	f104 0619 	add.w	r6, r4, #25
 8007678:	e7f5      	b.n	8007666 <_printf_i+0x226>
 800767a:	bf00      	nop
 800767c:	08007a91 	.word	0x08007a91
 8007680:	08007aa2 	.word	0x08007aa2

08007684 <__sflush_r>:
 8007684:	898a      	ldrh	r2, [r1, #12]
 8007686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768a:	4605      	mov	r5, r0
 800768c:	0710      	lsls	r0, r2, #28
 800768e:	460c      	mov	r4, r1
 8007690:	d458      	bmi.n	8007744 <__sflush_r+0xc0>
 8007692:	684b      	ldr	r3, [r1, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	dc05      	bgt.n	80076a4 <__sflush_r+0x20>
 8007698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	dc02      	bgt.n	80076a4 <__sflush_r+0x20>
 800769e:	2000      	movs	r0, #0
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076a6:	2e00      	cmp	r6, #0
 80076a8:	d0f9      	beq.n	800769e <__sflush_r+0x1a>
 80076aa:	2300      	movs	r3, #0
 80076ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076b0:	682f      	ldr	r7, [r5, #0]
 80076b2:	6a21      	ldr	r1, [r4, #32]
 80076b4:	602b      	str	r3, [r5, #0]
 80076b6:	d032      	beq.n	800771e <__sflush_r+0x9a>
 80076b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	075a      	lsls	r2, r3, #29
 80076be:	d505      	bpl.n	80076cc <__sflush_r+0x48>
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	1ac0      	subs	r0, r0, r3
 80076c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076c6:	b10b      	cbz	r3, 80076cc <__sflush_r+0x48>
 80076c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076ca:	1ac0      	subs	r0, r0, r3
 80076cc:	2300      	movs	r3, #0
 80076ce:	4602      	mov	r2, r0
 80076d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076d2:	6a21      	ldr	r1, [r4, #32]
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b0      	blx	r6
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	d106      	bne.n	80076ec <__sflush_r+0x68>
 80076de:	6829      	ldr	r1, [r5, #0]
 80076e0:	291d      	cmp	r1, #29
 80076e2:	d82b      	bhi.n	800773c <__sflush_r+0xb8>
 80076e4:	4a29      	ldr	r2, [pc, #164]	; (800778c <__sflush_r+0x108>)
 80076e6:	410a      	asrs	r2, r1
 80076e8:	07d6      	lsls	r6, r2, #31
 80076ea:	d427      	bmi.n	800773c <__sflush_r+0xb8>
 80076ec:	2200      	movs	r2, #0
 80076ee:	6062      	str	r2, [r4, #4]
 80076f0:	04d9      	lsls	r1, r3, #19
 80076f2:	6922      	ldr	r2, [r4, #16]
 80076f4:	6022      	str	r2, [r4, #0]
 80076f6:	d504      	bpl.n	8007702 <__sflush_r+0x7e>
 80076f8:	1c42      	adds	r2, r0, #1
 80076fa:	d101      	bne.n	8007700 <__sflush_r+0x7c>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b903      	cbnz	r3, 8007702 <__sflush_r+0x7e>
 8007700:	6560      	str	r0, [r4, #84]	; 0x54
 8007702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007704:	602f      	str	r7, [r5, #0]
 8007706:	2900      	cmp	r1, #0
 8007708:	d0c9      	beq.n	800769e <__sflush_r+0x1a>
 800770a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800770e:	4299      	cmp	r1, r3
 8007710:	d002      	beq.n	8007718 <__sflush_r+0x94>
 8007712:	4628      	mov	r0, r5
 8007714:	f7ff fbea 	bl	8006eec <_free_r>
 8007718:	2000      	movs	r0, #0
 800771a:	6360      	str	r0, [r4, #52]	; 0x34
 800771c:	e7c0      	b.n	80076a0 <__sflush_r+0x1c>
 800771e:	2301      	movs	r3, #1
 8007720:	4628      	mov	r0, r5
 8007722:	47b0      	blx	r6
 8007724:	1c41      	adds	r1, r0, #1
 8007726:	d1c8      	bne.n	80076ba <__sflush_r+0x36>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0c5      	beq.n	80076ba <__sflush_r+0x36>
 800772e:	2b1d      	cmp	r3, #29
 8007730:	d001      	beq.n	8007736 <__sflush_r+0xb2>
 8007732:	2b16      	cmp	r3, #22
 8007734:	d101      	bne.n	800773a <__sflush_r+0xb6>
 8007736:	602f      	str	r7, [r5, #0]
 8007738:	e7b1      	b.n	800769e <__sflush_r+0x1a>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007740:	81a3      	strh	r3, [r4, #12]
 8007742:	e7ad      	b.n	80076a0 <__sflush_r+0x1c>
 8007744:	690f      	ldr	r7, [r1, #16]
 8007746:	2f00      	cmp	r7, #0
 8007748:	d0a9      	beq.n	800769e <__sflush_r+0x1a>
 800774a:	0793      	lsls	r3, r2, #30
 800774c:	680e      	ldr	r6, [r1, #0]
 800774e:	bf08      	it	eq
 8007750:	694b      	ldreq	r3, [r1, #20]
 8007752:	600f      	str	r7, [r1, #0]
 8007754:	bf18      	it	ne
 8007756:	2300      	movne	r3, #0
 8007758:	eba6 0807 	sub.w	r8, r6, r7
 800775c:	608b      	str	r3, [r1, #8]
 800775e:	f1b8 0f00 	cmp.w	r8, #0
 8007762:	dd9c      	ble.n	800769e <__sflush_r+0x1a>
 8007764:	6a21      	ldr	r1, [r4, #32]
 8007766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007768:	4643      	mov	r3, r8
 800776a:	463a      	mov	r2, r7
 800776c:	4628      	mov	r0, r5
 800776e:	47b0      	blx	r6
 8007770:	2800      	cmp	r0, #0
 8007772:	dc06      	bgt.n	8007782 <__sflush_r+0xfe>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007780:	e78e      	b.n	80076a0 <__sflush_r+0x1c>
 8007782:	4407      	add	r7, r0
 8007784:	eba8 0800 	sub.w	r8, r8, r0
 8007788:	e7e9      	b.n	800775e <__sflush_r+0xda>
 800778a:	bf00      	nop
 800778c:	dfbffffe 	.word	0xdfbffffe

08007790 <_fflush_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	690b      	ldr	r3, [r1, #16]
 8007794:	4605      	mov	r5, r0
 8007796:	460c      	mov	r4, r1
 8007798:	b913      	cbnz	r3, 80077a0 <_fflush_r+0x10>
 800779a:	2500      	movs	r5, #0
 800779c:	4628      	mov	r0, r5
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	b118      	cbz	r0, 80077aa <_fflush_r+0x1a>
 80077a2:	6a03      	ldr	r3, [r0, #32]
 80077a4:	b90b      	cbnz	r3, 80077aa <_fflush_r+0x1a>
 80077a6:	f7ff f945 	bl	8006a34 <__sinit>
 80077aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0f3      	beq.n	800779a <_fflush_r+0xa>
 80077b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077b4:	07d0      	lsls	r0, r2, #31
 80077b6:	d404      	bmi.n	80077c2 <_fflush_r+0x32>
 80077b8:	0599      	lsls	r1, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <_fflush_r+0x32>
 80077bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077be:	f7ff fb84 	bl	8006eca <__retarget_lock_acquire_recursive>
 80077c2:	4628      	mov	r0, r5
 80077c4:	4621      	mov	r1, r4
 80077c6:	f7ff ff5d 	bl	8007684 <__sflush_r>
 80077ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077cc:	07da      	lsls	r2, r3, #31
 80077ce:	4605      	mov	r5, r0
 80077d0:	d4e4      	bmi.n	800779c <_fflush_r+0xc>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	059b      	lsls	r3, r3, #22
 80077d6:	d4e1      	bmi.n	800779c <_fflush_r+0xc>
 80077d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077da:	f7ff fb77 	bl	8006ecc <__retarget_lock_release_recursive>
 80077de:	e7dd      	b.n	800779c <_fflush_r+0xc>

080077e0 <__swhatbuf_r>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	460c      	mov	r4, r1
 80077e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	b096      	sub	sp, #88	; 0x58
 80077ec:	4615      	mov	r5, r2
 80077ee:	461e      	mov	r6, r3
 80077f0:	da0d      	bge.n	800780e <__swhatbuf_r+0x2e>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077f8:	f04f 0100 	mov.w	r1, #0
 80077fc:	bf0c      	ite	eq
 80077fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007802:	2340      	movne	r3, #64	; 0x40
 8007804:	2000      	movs	r0, #0
 8007806:	6031      	str	r1, [r6, #0]
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	b016      	add	sp, #88	; 0x58
 800780c:	bd70      	pop	{r4, r5, r6, pc}
 800780e:	466a      	mov	r2, sp
 8007810:	f000 f848 	bl	80078a4 <_fstat_r>
 8007814:	2800      	cmp	r0, #0
 8007816:	dbec      	blt.n	80077f2 <__swhatbuf_r+0x12>
 8007818:	9901      	ldr	r1, [sp, #4]
 800781a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800781e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007822:	4259      	negs	r1, r3
 8007824:	4159      	adcs	r1, r3
 8007826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800782a:	e7eb      	b.n	8007804 <__swhatbuf_r+0x24>

0800782c <__smakebuf_r>:
 800782c:	898b      	ldrh	r3, [r1, #12]
 800782e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007830:	079d      	lsls	r5, r3, #30
 8007832:	4606      	mov	r6, r0
 8007834:	460c      	mov	r4, r1
 8007836:	d507      	bpl.n	8007848 <__smakebuf_r+0x1c>
 8007838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	2301      	movs	r3, #1
 8007842:	6163      	str	r3, [r4, #20]
 8007844:	b002      	add	sp, #8
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	ab01      	add	r3, sp, #4
 800784a:	466a      	mov	r2, sp
 800784c:	f7ff ffc8 	bl	80077e0 <__swhatbuf_r>
 8007850:	9900      	ldr	r1, [sp, #0]
 8007852:	4605      	mov	r5, r0
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff fbb5 	bl	8006fc4 <_malloc_r>
 800785a:	b948      	cbnz	r0, 8007870 <__smakebuf_r+0x44>
 800785c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007860:	059a      	lsls	r2, r3, #22
 8007862:	d4ef      	bmi.n	8007844 <__smakebuf_r+0x18>
 8007864:	f023 0303 	bic.w	r3, r3, #3
 8007868:	f043 0302 	orr.w	r3, r3, #2
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	e7e3      	b.n	8007838 <__smakebuf_r+0xc>
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	6020      	str	r0, [r4, #0]
 8007874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	9b00      	ldr	r3, [sp, #0]
 800787c:	6163      	str	r3, [r4, #20]
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	6120      	str	r0, [r4, #16]
 8007882:	b15b      	cbz	r3, 800789c <__smakebuf_r+0x70>
 8007884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007888:	4630      	mov	r0, r6
 800788a:	f000 f81d 	bl	80078c8 <_isatty_r>
 800788e:	b128      	cbz	r0, 800789c <__smakebuf_r+0x70>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	431d      	orrs	r5, r3
 80078a0:	81a5      	strh	r5, [r4, #12]
 80078a2:	e7cf      	b.n	8007844 <__smakebuf_r+0x18>

080078a4 <_fstat_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_fstat_r+0x20>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	f7f9 f939 	bl	8000b28 <_fstat>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d102      	bne.n	80078c0 <_fstat_r+0x1c>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b103      	cbz	r3, 80078c0 <_fstat_r+0x1c>
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	bf00      	nop
 80078c4:	20001c50 	.word	0x20001c50

080078c8 <_isatty_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <_isatty_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7f9 f938 	bl	8000b48 <_isatty>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_isatty_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_isatty_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20001c50 	.word	0x20001c50

080078e8 <_sbrk_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d06      	ldr	r5, [pc, #24]	; (8007904 <_sbrk_r+0x1c>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7f9 f940 	bl	8000b78 <_sbrk>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_sbrk_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_sbrk_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20001c50 	.word	0x20001c50

08007908 <_init>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	bf00      	nop
 800790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790e:	bc08      	pop	{r3}
 8007910:	469e      	mov	lr, r3
 8007912:	4770      	bx	lr

08007914 <_fini>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	bf00      	nop
 8007918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791a:	bc08      	pop	{r3}
 800791c:	469e      	mov	lr, r3
 800791e:	4770      	bx	lr
