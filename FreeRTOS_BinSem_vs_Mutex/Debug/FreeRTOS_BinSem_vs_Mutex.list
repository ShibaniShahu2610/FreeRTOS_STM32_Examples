
FreeRTOS_BinSem_vs_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d60  08007d60  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d68  08007d68  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  2000006c  08007ddc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  08007ddc  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd15  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038b8  00000000  00000000  0003bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001217  00000000  00000000  00040e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004995  00000000  00000000  00042017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001931b  00000000  00000000  000469ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f23a  00000000  00000000  0005fcc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006880  00000000  00000000  0016ef04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00175784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007c0c 	.word	0x08007c0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007c0c 	.word	0x08007c0c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb57 	bl	8000ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f84a 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8c6 	bl	8000688 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f898 	bl	8000630 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f003 fa6c 	bl	80039dc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex_1 */
  Mutex_1Handle = osMutexNew(&Mutex_1_attributes);
 8000504:	4814      	ldr	r0, [pc, #80]	; (8000558 <main+0x6c>)
 8000506:	f003 fb6f 	bl	8003be8 <osMutexNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <main+0x70>)
 800050e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem_1 */
  BinarySem_1Handle = osSemaphoreNew(1, 1, &BinarySem_1_attributes);
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <main+0x74>)
 8000512:	2101      	movs	r1, #1
 8000514:	2001      	movs	r0, #1
 8000516:	f003 fbed 	bl	8003cf4 <osSemaphoreNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <main+0x78>)
 800051e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Start_Task_1, NULL, &Task_1_attributes);
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <main+0x7c>)
 8000522:	2100      	movs	r1, #0
 8000524:	4811      	ldr	r0, [pc, #68]	; (800056c <main+0x80>)
 8000526:	f003 faa3 	bl	8003a70 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <main+0x84>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Start_Task_2, NULL, &Task_2_attributes);
 8000530:	4a10      	ldr	r2, [pc, #64]	; (8000574 <main+0x88>)
 8000532:	2100      	movs	r1, #0
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <main+0x8c>)
 8000536:	f003 fa9b 	bl	8003a70 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <main+0x90>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of Task_3 */
  Task_3Handle = osThreadNew(Start_Task_3, NULL, &Task_3_attributes);
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <main+0x94>)
 8000542:	2100      	movs	r1, #0
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0x98>)
 8000546:	f003 fa93 	bl	8003a70 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <main+0x9c>)
 800054e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000550:	f003 fa68 	bl	8003a24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x68>
 8000556:	bf00      	nop
 8000558:	08007cf8 	.word	0x08007cf8
 800055c:	2000011c 	.word	0x2000011c
 8000560:	08007d08 	.word	0x08007d08
 8000564:	20000120 	.word	0x20000120
 8000568:	08007c8c 	.word	0x08007c8c
 800056c:	080006d1 	.word	0x080006d1
 8000570:	20000110 	.word	0x20000110
 8000574:	08007cb0 	.word	0x08007cb0
 8000578:	08000729 	.word	0x08000729
 800057c:	20000114 	.word	0x20000114
 8000580:	08007cd4 	.word	0x08007cd4
 8000584:	08000761 	.word	0x08000761
 8000588:	20000118 	.word	0x20000118

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b096      	sub	sp, #88	; 0x58
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2244      	movs	r2, #68	; 0x44
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f007 f81c 	bl	80075d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b2:	f000 fdd5 	bl	8001160 <HAL_PWREx_ControlVoltageScaling>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005bc:	f000 f8f0 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d2:	2302      	movs	r3, #2
 80005d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005da:	230a      	movs	r3, #10
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fe1c 	bl	800122c <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005fa:	f000 f8d1 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2303      	movs	r3, #3
 8000604:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2104      	movs	r1, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fa21 	bl	8001a60 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000624:	f000 f8bc 	bl	80007a0 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_LPUART1_UART_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_LPUART1_UART_Init+0x50>)
 800066e:	f002 fbcb 	bl	8002e08 <HAL_UART_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f892 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000088 	.word	0x20000088
 8000684:	40008000 	.word	0x40008000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_GPIO_Init+0x44>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <MX_GPIO_Init+0x44>)
 8000694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_GPIO_Init+0x44>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006a6:	f000 fdb1 	bl	800120c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_GPIO_Init+0x44>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <MX_GPIO_Init+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MX_GPIO_Init+0x44>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <Start_Task_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Task_1 */
void Start_Task_1(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t count = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(BinarySem_1Handle, osWaitForever);
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <Start_Task_1+0x4c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fb8f 	bl	8003e08 <osSemaphoreAcquire>
//	osMutexAcquire(Mutex_1Handle, osWaitForever);
	printf("IN TASK-1\r\n");
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <Start_Task_1+0x50>)
 80006ec:	f006 fe94 	bl	8007418 <puts>

	if(3 == count)
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d105      	bne.n	8000702 <Start_Task_1+0x32>
	{
		osThreadSetPriority(Task_1Handle, osPriorityLow);
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <Start_Task_1+0x54>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2108      	movs	r1, #8
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fa49 	bl	8003b94 <osThreadSetPriority>
	}
	count++;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	3301      	adds	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
	osSemaphoreRelease(BinarySem_1Handle);
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <Start_Task_1+0x4c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fbcd 	bl	8003eac <osSemaphoreRelease>
//	osMutexRelease(Mutex_1Handle);
//	osDelay(1000);
	HAL_Delay(1000);
 8000712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000716:	f000 fa7d 	bl	8000c14 <HAL_Delay>
	osSemaphoreAcquire(BinarySem_1Handle, osWaitForever);
 800071a:	e7df      	b.n	80006dc <Start_Task_1+0xc>
 800071c:	20000120 	.word	0x20000120
 8000720:	08007c50 	.word	0x08007c50
 8000724:	20000110 	.word	0x20000110

08000728 <Start_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_2 */
void Start_Task_2(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_2 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(BinarySem_1Handle, osWaitForever);
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <Start_Task_2+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fb65 	bl	8003e08 <osSemaphoreAcquire>
//	osMutexAcquire(Mutex_1Handle, osWaitForever);
	printf("IN TASK-2\r\n");
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <Start_Task_2+0x34>)
 8000740:	f006 fe6a 	bl	8007418 <puts>
//	osMutexRelease(Mutex_1Handle);
	osSemaphoreRelease(BinarySem_1Handle);
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <Start_Task_2+0x30>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f003 fbaf 	bl	8003eac <osSemaphoreRelease>
//    osDelay(1000);
	HAL_Delay(1000);
 800074e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000752:	f000 fa5f 	bl	8000c14 <HAL_Delay>
	osSemaphoreAcquire(BinarySem_1Handle, osWaitForever);
 8000756:	e7eb      	b.n	8000730 <Start_Task_2+0x8>
 8000758:	20000120 	.word	0x20000120
 800075c:	08007c5c 	.word	0x08007c5c

08000760 <Start_Task_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_3 */
void Start_Task_3(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_3 */
  /* Infinite loop */
  for(;;)
  {
	printf("IN TASK-3\r\n");
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <Start_Task_3+0x18>)
 800076a:	f006 fe55 	bl	8007418 <puts>
//    osDelay(1000);
	HAL_Delay(1000);
 800076e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000772:	f000 fa4f 	bl	8000c14 <HAL_Delay>
	printf("IN TASK-3\r\n");
 8000776:	e7f7      	b.n	8000768 <Start_Task_3+0x8>
 8000778:	08007c68 	.word	0x08007c68

0800077c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d101      	bne.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078e:	f000 fa21 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40001000 	.word	0x40001000

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_MspInit+0x4c>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	; 0x60
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_MspInit+0x4c>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <HAL_MspInit+0x4c>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	f06f 0001 	mvn.w	r0, #1
 80007ea:	f000 faef 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ac      	sub	sp, #176	; 0xb0
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	228c      	movs	r2, #140	; 0x8c
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f006 fedb 	bl	80075d8 <memset>
  if(huart->Instance==LPUART1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <HAL_UART_MspInit+0xb4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d13d      	bne.n	80008a8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800082c:	2320      	movs	r3, #32
 800082e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fb67 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000844:	f7ff ffac 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 800084a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000878:	f000 fcc8 	bl	800120c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800087c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000896:	2308      	movs	r3, #8
 8000898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_UART_MspInit+0xbc>)
 80008a4:	f000 fabc 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	37b0      	adds	r7, #176	; 0xb0
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40008000 	.word	0x40008000
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48001800 	.word	0x48001800

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	; 0x38
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <HAL_InitTick+0xe0>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <HAL_InitTick+0xe0>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <HAL_InitTick+0xe0>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e2:	f107 0210 	add.w	r2, r7, #16
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fa7b 	bl	8001de8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008fc:	f001 fa48 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8000900:	6378      	str	r0, [r7, #52]	; 0x34
 8000902:	e004      	b.n	800090e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000904:	f001 fa44 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8000908:	4603      	mov	r3, r0
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000910:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <HAL_InitTick+0xe4>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0c9b      	lsrs	r3, r3, #18
 8000918:	3b01      	subs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <HAL_InitTick+0xe8>)
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_InitTick+0xec>)
 8000920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <HAL_InitTick+0xe8>)
 8000924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000928:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800092a:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <HAL_InitTick+0xe8>)
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_InitTick+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <HAL_InitTick+0xe8>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_InitTick+0xe8>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000942:	4818      	ldr	r0, [pc, #96]	; (80009a4 <HAL_InitTick+0xe8>)
 8000944:	f001 ffac 	bl	80028a0 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800094e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11b      	bne.n	800098e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <HAL_InitTick+0xe8>)
 8000958:	f002 f804 	bl	8002964 <HAL_TIM_Base_Start_IT>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000966:	2b00      	cmp	r3, #0
 8000968:	d111      	bne.n	800098e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800096a:	2036      	movs	r0, #54	; 0x36
 800096c:	f000 fa4a 	bl	8000e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b0f      	cmp	r3, #15
 8000974:	d808      	bhi.n	8000988 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000976:	2200      	movs	r2, #0
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	2036      	movs	r0, #54	; 0x36
 800097c:	f000 fa26 	bl	8000dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_InitTick+0xf0>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	e002      	b.n	800098e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800098e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000992:	4618      	mov	r0, r3
 8000994:	3738      	adds	r7, #56	; 0x38
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	20000124 	.word	0x20000124
 80009a8:	40001000 	.word	0x40001000
 80009ac:	20000004 	.word	0x20000004

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <TIM6_DAC_IRQHandler+0x10>)
 80009e2:	f002 f82f 	bl	8002a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000124 	.word	0x20000124

080009f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	e00a      	b.n	8000a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a02:	f3af 8000 	nop.w
 8000a06:	4601      	mov	r1, r0
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf0      	blt.n	8000a02 <_read+0x12>
  }

  return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, 2000);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <_write+0x28>)
 8000a44:	f002 fa2e 	bl	8002ea4 <HAL_UART_Transmit>
	return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000088 	.word	0x20000088

08000a58 <_close>:

int _close(int file)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a80:	605a      	str	r2, [r3, #4]
  return 0;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_isatty>:

int _isatty(int file)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a98:	2301      	movs	r3, #1
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b085      	sub	sp, #20
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f006 fe16 	bl	8007720 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20050000 	.word	0x20050000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000170 	.word	0x20000170
 8000b28:	20001c68 	.word	0x20001c68

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f006 fdd5 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fcb3 	bl	80004ec <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b94:	08007d70 	.word	0x08007d70
  ldr r2, =_sbss
 8000b98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b9c:	20001c64 	.word	0x20001c64

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>

08000ba2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f902 	bl	8000db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f7ff fe82 	bl	80008bc <HAL_InitTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e001      	b.n	8000bc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc4:	f7ff fdf2 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000174 	.word	0x20000174

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000174 	.word	0x20000174

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff4c 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff61 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ffb1 	bl	8000d50 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff80 	bl	8000cfc <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e166      	b.n	80010fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8158 	beq.w	80010f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d005      	beq.n	8000e60 <HAL_GPIO_Init+0x40>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d017      	beq.n	8000efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d123      	bne.n	8000f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0203 	and.w	r2, r3, #3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80b2 	beq.w	80010f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f94:	4b61      	ldr	r3, [pc, #388]	; (800111c <HAL_GPIO_Init+0x2fc>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	4a60      	ldr	r2, [pc, #384]	; (800111c <HAL_GPIO_Init+0x2fc>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa0:	4b5e      	ldr	r3, [pc, #376]	; (800111c <HAL_GPIO_Init+0x2fc>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fac:	4a5c      	ldr	r2, [pc, #368]	; (8001120 <HAL_GPIO_Init+0x300>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd6:	d02b      	beq.n	8001030 <HAL_GPIO_Init+0x210>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a52      	ldr	r2, [pc, #328]	; (8001124 <HAL_GPIO_Init+0x304>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d025      	beq.n	800102c <HAL_GPIO_Init+0x20c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a51      	ldr	r2, [pc, #324]	; (8001128 <HAL_GPIO_Init+0x308>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d01f      	beq.n	8001028 <HAL_GPIO_Init+0x208>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a50      	ldr	r2, [pc, #320]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d019      	beq.n	8001024 <HAL_GPIO_Init+0x204>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a4f      	ldr	r2, [pc, #316]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x200>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a4e      	ldr	r2, [pc, #312]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1fc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a4d      	ldr	r2, [pc, #308]	; (8001138 <HAL_GPIO_Init+0x318>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1f8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4c      	ldr	r2, [pc, #304]	; (800113c <HAL_GPIO_Init+0x31c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1f4>
 8001010:	2307      	movs	r3, #7
 8001012:	e00e      	b.n	8001032 <HAL_GPIO_Init+0x212>
 8001014:	2308      	movs	r3, #8
 8001016:	e00c      	b.n	8001032 <HAL_GPIO_Init+0x212>
 8001018:	2306      	movs	r3, #6
 800101a:	e00a      	b.n	8001032 <HAL_GPIO_Init+0x212>
 800101c:	2305      	movs	r3, #5
 800101e:	e008      	b.n	8001032 <HAL_GPIO_Init+0x212>
 8001020:	2304      	movs	r3, #4
 8001022:	e006      	b.n	8001032 <HAL_GPIO_Init+0x212>
 8001024:	2303      	movs	r3, #3
 8001026:	e004      	b.n	8001032 <HAL_GPIO_Init+0x212>
 8001028:	2302      	movs	r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x212>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <HAL_GPIO_Init+0x212>
 8001030:	2300      	movs	r3, #0
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	f002 0203 	and.w	r2, r2, #3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4093      	lsls	r3, r2
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001042:	4937      	ldr	r1, [pc, #220]	; (8001120 <HAL_GPIO_Init+0x300>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <HAL_GPIO_Init+0x320>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800109e:	4a28      	ldr	r2, [pc, #160]	; (8001140 <HAL_GPIO_Init+0x320>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_GPIO_Init+0x320>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_GPIO_Init+0x320>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_GPIO_Init+0x320>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_GPIO_Init+0x320>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	f47f ae91 	bne.w	8000e30 <HAL_GPIO_Init+0x10>
  }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	48000400 	.word	0x48000400
 8001128:	48000800 	.word	0x48000800
 800112c:	48000c00 	.word	0x48000c00
 8001130:	48001000 	.word	0x48001000
 8001134:	48001400 	.word	0x48001400
 8001138:	48001800 	.word	0x48001800
 800113c:	48001c00 	.word	0x48001c00
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_PWREx_GetVoltageRange+0x18>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40007000 	.word	0x40007000

08001160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116e:	d130      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117c:	d038      	beq.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2232      	movs	r2, #50	; 0x32
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a4:	e002      	b.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b8:	d102      	bne.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f2      	bne.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011cc:	d110      	bne.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e00f      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011de:	d007      	beq.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40007000 	.word	0x40007000
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83

0800120c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6053      	str	r3, [r2, #4]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40007000 	.word	0x40007000

0800122c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 bc08 	b.w	8001a50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001240:	4b96      	ldr	r3, [pc, #600]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124a:	4b94      	ldr	r3, [pc, #592]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80e4 	beq.w	800142a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_RCC_OscConfig+0x4c>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	f040 808b 	bne.w	8001386 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b01      	cmp	r3, #1
 8001274:	f040 8087 	bne.w	8001386 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001278:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_OscConfig+0x64>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e3df      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <HAL_RCC_OscConfig+0x7e>
 80012a0:	4b7e      	ldr	r3, [pc, #504]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a8:	e005      	b.n	80012b6 <HAL_RCC_OscConfig+0x8a>
 80012aa:	4b7c      	ldr	r3, [pc, #496]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d223      	bcs.n	8001302 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fdc4 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e3c0      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ce:	4b73      	ldr	r3, [pc, #460]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a72      	ldr	r2, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	496d      	ldr	r1, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ec:	4b6b      	ldr	r3, [pc, #428]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	4968      	ldr	r1, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	e025      	b.n	800134e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001302:	4b66      	ldr	r3, [pc, #408]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a65      	ldr	r2, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4960      	ldr	r1, [pc, #384]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001320:	4b5e      	ldr	r3, [pc, #376]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	495b      	ldr	r1, [pc, #364]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fd84 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e380      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800134e:	f000 fc87 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001352:	4602      	mov	r2, r0
 8001354:	4b51      	ldr	r3, [pc, #324]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4950      	ldr	r1, [pc, #320]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 8001360:	5ccb      	ldrb	r3, [r1, r3]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800136c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800136e:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff faa2 	bl	80008bc <HAL_InitTick>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d052      	beq.n	8001428 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	e364      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d032      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800138e:	4b43      	ldr	r3, [pc, #268]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a42      	ldr	r2, [pc, #264]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139a:	f7ff fc2f 	bl	8000bfc <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc2b 	bl	8000bfc <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e34d      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4b36      	ldr	r3, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a35      	ldr	r2, [pc, #212]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4930      	ldr	r1, [pc, #192]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	492b      	ldr	r1, [pc, #172]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
 80013f2:	e01a      	b.n	800142a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a28      	ldr	r2, [pc, #160]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001400:	f7ff fbfc 	bl	8000bfc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001408:	f7ff fbf8 	bl	8000bfc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e31a      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1dc>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d073      	beq.n	800151e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b08      	cmp	r3, #8
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x21c>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d10e      	bne.n	8001460 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d063      	beq.n	800151c <HAL_RCC_OscConfig+0x2f0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d15f      	bne.n	800151c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e2f7      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x24c>
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e025      	b.n	80014c4 <HAL_RCC_OscConfig+0x298>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d114      	bne.n	80014ac <HAL_RCC_OscConfig+0x280>
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a02      	ldr	r2, [pc, #8]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e013      	b.n	80014c4 <HAL_RCC_OscConfig+0x298>
 800149c:	40021000 	.word	0x40021000
 80014a0:	08007d18 	.word	0x08007d18
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004
 80014ac:	4ba0      	ldr	r3, [pc, #640]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a9f      	ldr	r2, [pc, #636]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b9d      	ldr	r3, [pc, #628]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a9c      	ldr	r2, [pc, #624]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb96 	bl	8000bfc <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb92 	bl	8000bfc <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e2b4      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	4b92      	ldr	r3, [pc, #584]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2a8>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb82 	bl	8000bfc <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fb7e 	bl	8000bfc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e2a0      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150e:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x2d0>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d060      	beq.n	80015ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d005      	beq.n	800153c <HAL_RCC_OscConfig+0x310>
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d119      	bne.n	800156a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d116      	bne.n	800156a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x328>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e27d      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	4973      	ldr	r1, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	e040      	b.n	80015ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d023      	beq.n	80015ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001572:	4b6f      	ldr	r3, [pc, #444]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6e      	ldr	r2, [pc, #440]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fb3d 	bl	8000bfc <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fb39 	bl	8000bfc <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e25b      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	495f      	ldr	r1, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e018      	b.n	80015ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5c      	ldr	r2, [pc, #368]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb19 	bl	8000bfc <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fb15 	bl	8000bfc <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e237      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d03c      	beq.n	8001672 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01c      	beq.n	800163a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001606:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff faf4 	bl	8000bfc <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff faf0 	bl	8000bfc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e212      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800162c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ef      	beq.n	8001618 <HAL_RCC_OscConfig+0x3ec>
 8001638:	e01b      	b.n	8001672 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff fad7 	bl	8000bfc <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fad3 	bl	8000bfc <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1f5      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ef      	bne.n	8001652 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80a6 	beq.w	80017cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d118      	bne.n	80016ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fa9a 	bl	8000bfc <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7ff fa96 	bl	8000bfc <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1b8      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_RCC_OscConfig+0x4d8>
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001702:	e029      	b.n	8001758 <HAL_RCC_OscConfig+0x52c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d115      	bne.n	8001738 <HAL_RCC_OscConfig+0x50c>
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	4a03      	ldr	r2, [pc, #12]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x52c>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000
 8001738:	4b9d      	ldr	r3, [pc, #628]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a9c      	ldr	r2, [pc, #624]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001748:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	4a98      	ldr	r2, [pc, #608]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d016      	beq.n	800178e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fa4c 	bl	8000bfc <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fa48 	bl	8000bfc <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e168      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ed      	beq.n	8001768 <HAL_RCC_OscConfig+0x53c>
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fa35 	bl	8000bfc <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff fa31 	bl	8000bfc <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e151      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ed      	bne.n	8001796 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d03c      	beq.n	8001852 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01c      	beq.n	800181a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80017e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e6:	4a72      	ldr	r2, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fa04 	bl	8000bfc <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f8:	f7ff fa00 	bl	8000bfc <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e122      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180a:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800180c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ef      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5cc>
 8001818:	e01b      	b.n	8001852 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800181a:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800181c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001820:	4a63      	ldr	r2, [pc, #396]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff f9e7 	bl	8000bfc <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001832:	f7ff f9e3 	bl	8000bfc <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e105      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001844:	4b5a      	ldr	r3, [pc, #360]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ef      	bne.n	8001832 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80f9 	beq.w	8001a4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	2b02      	cmp	r3, #2
 8001862:	f040 80cf 	bne.w	8001a04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001866:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	429a      	cmp	r2, r3
 8001878:	d12c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	3b01      	subs	r3, #1
 8001886:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d123      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001896:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d11b      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d113      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	3b01      	subs	r3, #1
 80018ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d109      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	3b01      	subs	r3, #1
 80018ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d071      	beq.n	80019b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d068      	beq.n	80019ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0ac      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80018fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001900:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001902:	f7ff f97b 	bl	8000bfc <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff f977 	bl	8000bfc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e099      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_RCC_OscConfig+0x788>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001938:	3a01      	subs	r2, #1
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001942:	0212      	lsls	r2, r2, #8
 8001944:	4311      	orrs	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800194a:	0852      	lsrs	r2, r2, #1
 800194c:	3a01      	subs	r2, #1
 800194e:	0552      	lsls	r2, r2, #21
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001956:	0852      	lsrs	r2, r2, #1
 8001958:	3a01      	subs	r2, #1
 800195a:	0652      	lsls	r2, r2, #25
 800195c:	4311      	orrs	r1, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001962:	06d2      	lsls	r2, r2, #27
 8001964:	430a      	orrs	r2, r1
 8001966:	4912      	ldr	r1, [pc, #72]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001968:	4313      	orrs	r3, r2
 800196a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001984:	f7ff f93a 	bl	8000bfc <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f936 	bl	8000bfc <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e058      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019aa:	e050      	b.n	8001a4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e04f      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
 80019b0:	40021000 	.word	0x40021000
 80019b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d144      	bne.n	8001a4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019dc:	f7ff f90e 	bl	8000bfc <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f90a 	bl	8000bfc <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e02c      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x7b8>
 8001a02:	e024      	b.n	8001a4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d01f      	beq.n	8001a4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 8001a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f8f1 	bl	8000bfc <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7ff f8ed 	bl	8000bfc <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e00f      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	4905      	ldr	r1, [pc, #20]	; (8001a58 <HAL_RCC_OscConfig+0x82c>)
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x830>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
 8001a48:	e001      	b.n	8001a4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	feeefffc 	.word	0xfeeefffc

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0e7      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d910      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4970      	ldr	r1, [pc, #448]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0cf      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d908      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4960      	ldr	r1, [pc, #384]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d04c      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d121      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0a6      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e09a      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e08e      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e086      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4943      	ldr	r1, [pc, #268]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f858 	bl	8000bfc <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f854 	bl	8000bfc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e06e      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d208      	bcs.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	492b      	ldr	r1, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d210      	bcs.n	8001bd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0207 	bic.w	r2, r3, #7
 8001bbc:	4923      	ldr	r1, [pc, #140]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e036      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4910      	ldr	r1, [pc, #64]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c14:	f000 f824 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	490b      	ldr	r1, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1f4>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1fc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fe3f 	bl	80008bc <HAL_InitTick>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08007d18 	.word	0x08007d18
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c78:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d121      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d11e      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	e004      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ce6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d134      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d003      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0xac>
 8001d04:	e005      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d08:	617b      	str	r3, [r7, #20]
      break;
 8001d0a:	e005      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0e:	617b      	str	r3, [r7, #20]
      break;
 8001d10:	e002      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	3301      	adds	r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	fb03 f202 	mul.w	r2, r3, r2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	0e5b      	lsrs	r3, r3, #25
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d58:	69bb      	ldr	r3, [r7, #24]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08007d30 	.word	0x08007d30
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08007d28 	.word	0x08007d28

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc0:	f7ff ffda 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0adb      	lsrs	r3, r3, #11
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08007d28 	.word	0x08007d28

08001de8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	220f      	movs	r2, #15
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCC_GetClockConfig+0x60>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0207 	and.w	r2, r3, #7
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40022000 	.word	0x40022000

08001e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff f96e 	bl	8001144 <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
 8001e6a:	e014      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	; 0x58
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff f95e 	bl	8001144 <HAL_PWREx_GetVoltageRange>
 8001e88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9c:	d10b      	bne.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d919      	bls.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ea8:	d902      	bls.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eaa:	2302      	movs	r3, #2
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e013      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e010      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d902      	bls.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e00a      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d102      	bne.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e004      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b70      	cmp	r3, #112	; 0x70
 8001ed2:	d101      	bne.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0207 	bic.w	r2, r3, #7
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40022000 	.word	0x40022000

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f14:	2300      	movs	r3, #0
 8001f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d041      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f30:	d02a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f36:	d824      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f42:	d81e      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f4e:	e018      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f50:	4b86      	ldr	r3, [pc, #536]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a85      	ldr	r2, [pc, #532]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5c:	e015      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 facd 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3320      	adds	r3, #32
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fbb6 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f80:	e003      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	74fb      	strb	r3, [r7, #19]
      break;
 8001f86:	e000      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f90:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9e:	4973      	ldr	r1, [pc, #460]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fa6:	e001      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d041      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fc0:	d02a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fc6:	d824      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fcc:	d008      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fd2:	d81e      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fdc:	d010      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fde:	e018      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fe0:	4b62      	ldr	r3, [pc, #392]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fec:	e015      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fa85 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffe:	e00c      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3320      	adds	r3, #32
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fb6e 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002010:	e003      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	74fb      	strb	r3, [r7, #19]
      break;
 8002016:	e000      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800201a:	7cfb      	ldrb	r3, [r7, #19]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002020:	4b52      	ldr	r3, [pc, #328]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800202e:	494f      	ldr	r1, [pc, #316]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002036:	e001      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a0 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800205e:	2300      	movs	r3, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	4a40      	ldr	r2, [pc, #256]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	6593      	str	r3, [r2, #88]	; 0x58
 8002070:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207c:	2301      	movs	r3, #1
 800207e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800208c:	f7fe fdb6 	bl	8000bfc <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002092:	e009      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7fe fdb2 	bl	8000bfc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d902      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	74fb      	strb	r3, [r7, #19]
        break;
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ef      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d15c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01f      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d019      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	4a20      	ldr	r2, [pc, #128]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fd71 	bl	8000bfc <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211c:	e00b      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fd6d 	bl	8000bfc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d902      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	74fb      	strb	r3, [r7, #19]
            break;
 8002134:	e006      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ec      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4904      	ldr	r1, [pc, #16]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002162:	e009      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	74bb      	strb	r3, [r7, #18]
 8002168:	e006      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002178:	7c7b      	ldrb	r3, [r7, #17]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4ba6      	ldr	r3, [pc, #664]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4aa5      	ldr	r2, [pc, #660]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002196:	4ba0      	ldr	r3, [pc, #640]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f023 0203 	bic.w	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	499c      	ldr	r1, [pc, #624]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b8:	4b97      	ldr	r3, [pc, #604]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	f023 020c 	bic.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	4994      	ldr	r1, [pc, #592]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021da:	4b8f      	ldr	r3, [pc, #572]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	498b      	ldr	r1, [pc, #556]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021fc:	4b86      	ldr	r3, [pc, #536]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4983      	ldr	r1, [pc, #524]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800221e:	4b7e      	ldr	r3, [pc, #504]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222c:	497a      	ldr	r1, [pc, #488]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002240:	4b75      	ldr	r3, [pc, #468]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	4972      	ldr	r1, [pc, #456]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002262:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002270:	4969      	ldr	r1, [pc, #420]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002284:	4b64      	ldr	r3, [pc, #400]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002292:	4961      	ldr	r1, [pc, #388]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a6:	4b5c      	ldr	r3, [pc, #368]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b4:	4958      	ldr	r1, [pc, #352]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022c8:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	4950      	ldr	r1, [pc, #320]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ea:	4b4b      	ldr	r3, [pc, #300]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	4947      	ldr	r1, [pc, #284]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800230c:	4b42      	ldr	r3, [pc, #264]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	493f      	ldr	r1, [pc, #252]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d028      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	4936      	ldr	r1, [pc, #216]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800234c:	d106      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a31      	ldr	r2, [pc, #196]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002358:	60d3      	str	r3, [r2, #12]
 800235a:	e011      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f8c9 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d028      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800238c:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	491f      	ldr	r1, [pc, #124]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023aa:	d106      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
 80023b8:	e011      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c2:	d10c      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f89a 	bl	8002504 <RCCEx_PLLSAI1_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d02a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002408:	d108      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240a:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a02      	ldr	r2, [pc, #8]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002414:	60d3      	str	r3, [r2, #12]
 8002416:	e013      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002418:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002424:	d10c      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f869 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800244c:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800245a:	4929      	ldr	r1, [pc, #164]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800246a:	d10d      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	2102      	movs	r1, #2
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f846 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	74bb      	strb	r3, [r7, #18]
 8002486:	e011      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800248c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002490:	d10c      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3320      	adds	r3, #32
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f925 	bl	80026e8 <RCCEx_PLLSAI2_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c8:	490d      	ldr	r1, [pc, #52]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	4904      	ldr	r1, [pc, #16]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000

08002504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002512:	4b74      	ldr	r3, [pc, #464]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d018      	beq.n	8002550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800251e:	4b71      	ldr	r3, [pc, #452]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0203 	and.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d10d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
       ||
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002536:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
       ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d047      	beq.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e044      	b.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d018      	beq.n	800258a <RCCEx_PLLSAI1_Config+0x86>
 8002558:	2b03      	cmp	r3, #3
 800255a:	d825      	bhi.n	80025a8 <RCCEx_PLLSAI1_Config+0xa4>
 800255c:	2b01      	cmp	r3, #1
 800255e:	d002      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0x62>
 8002560:	2b02      	cmp	r3, #2
 8002562:	d009      	beq.n	8002578 <RCCEx_PLLSAI1_Config+0x74>
 8002564:	e020      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002566:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d11d      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002576:	e01a      	b.n	80025ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002578:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d116      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e013      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800258a:	4b56      	ldr	r3, [pc, #344]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002596:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025a6:	e006      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e004      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ae:	bf00      	nop
 80025b0:	e002      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b2:	bf00      	nop
 80025b4:	e000      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025be:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	430b      	orrs	r3, r1
 80025d4:	4943      	ldr	r1, [pc, #268]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d17c      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025e0:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3f      	ldr	r2, [pc, #252]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fb06 	bl	8000bfc <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f2:	e009      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f4:	f7fe fb02 	bl	8000bfc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	73fb      	strb	r3, [r7, #15]
        break;
 8002606:	e005      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002608:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ef      	bne.n	80025f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d15f      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d110      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002628:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6892      	ldr	r2, [r2, #8]
 8002630:	0211      	lsls	r1, r2, #8
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	06d2      	lsls	r2, r2, #27
 8002638:	430a      	orrs	r2, r1
 800263a:	492a      	ldr	r1, [pc, #168]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	610b      	str	r3, [r1, #16]
 8002640:	e027      	b.n	8002692 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d112      	bne.n	800266e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002648:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002650:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6892      	ldr	r2, [r2, #8]
 8002658:	0211      	lsls	r1, r2, #8
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6912      	ldr	r2, [r2, #16]
 800265e:	0852      	lsrs	r2, r2, #1
 8002660:	3a01      	subs	r2, #1
 8002662:	0552      	lsls	r2, r2, #21
 8002664:	430a      	orrs	r2, r1
 8002666:	491f      	ldr	r1, [pc, #124]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	610b      	str	r3, [r1, #16]
 800266c:	e011      	b.n	8002692 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002676:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	0211      	lsls	r1, r2, #8
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6952      	ldr	r2, [r2, #20]
 8002684:	0852      	lsrs	r2, r2, #1
 8002686:	3a01      	subs	r2, #1
 8002688:	0652      	lsls	r2, r2, #25
 800268a:	430a      	orrs	r2, r1
 800268c:	4915      	ldr	r1, [pc, #84]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002698:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800269c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe faad 	bl	8000bfc <HAL_GetTick>
 80026a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a4:	e009      	b.n	80026ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a6:	f7fe faa9 	bl	8000bfc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d902      	bls.n	80026ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	73fb      	strb	r3, [r7, #15]
          break;
 80026b8:	e005      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ef      	beq.n	80026a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000

080026e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026f6:	4b69      	ldr	r3, [pc, #420]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d018      	beq.n	8002734 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002702:	4b66      	ldr	r3, [pc, #408]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0203 	and.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d10d      	bne.n	800272e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
       ||
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
       ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d047      	beq.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e044      	b.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d018      	beq.n	800276e <RCCEx_PLLSAI2_Config+0x86>
 800273c:	2b03      	cmp	r3, #3
 800273e:	d825      	bhi.n	800278c <RCCEx_PLLSAI2_Config+0xa4>
 8002740:	2b01      	cmp	r3, #1
 8002742:	d002      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x62>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d009      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x74>
 8002748:	e020      	b.n	800278c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11d      	bne.n	8002792 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275a:	e01a      	b.n	8002792 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d116      	bne.n	8002796 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e013      	b.n	8002796 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800276e:	4b4b      	ldr	r3, [pc, #300]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277a:	4b48      	ldr	r3, [pc, #288]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278a:	e006      	b.n	800279a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e004      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279a:	bf00      	nop
    }

    if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10d      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	430b      	orrs	r3, r1
 80027b8:	4938      	ldr	r1, [pc, #224]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d166      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a34      	ldr	r2, [pc, #208]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe fa14 	bl	8000bfc <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027d6:	e009      	b.n	80027ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027d8:	f7fe fa10 	bl	8000bfc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d902      	bls.n	80027ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	73fb      	strb	r3, [r7, #15]
        break;
 80027ea:	e005      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ef      	bne.n	80027d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d149      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d110      	bne.n	8002826 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800280c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6892      	ldr	r2, [r2, #8]
 8002814:	0211      	lsls	r1, r2, #8
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68d2      	ldr	r2, [r2, #12]
 800281a:	06d2      	lsls	r2, r2, #27
 800281c:	430a      	orrs	r2, r1
 800281e:	491f      	ldr	r1, [pc, #124]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	614b      	str	r3, [r1, #20]
 8002824:	e011      	b.n	800284a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800282e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6892      	ldr	r2, [r2, #8]
 8002836:	0211      	lsls	r1, r2, #8
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6912      	ldr	r2, [r2, #16]
 800283c:	0852      	lsrs	r2, r2, #1
 800283e:	3a01      	subs	r2, #1
 8002840:	0652      	lsls	r2, r2, #25
 8002842:	430a      	orrs	r2, r1
 8002844:	4915      	ldr	r1, [pc, #84]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7fe f9d1 	bl	8000bfc <HAL_GetTick>
 800285a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800285c:	e009      	b.n	8002872 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800285e:	f7fe f9cd 	bl	8000bfc <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d902      	bls.n	8002872 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	73fb      	strb	r3, [r7, #15]
          break;
 8002870:	e005      	b.n	800287e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ef      	beq.n	800285e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <RCCEx_PLLSAI2_Config+0x1b4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e049      	b.n	8002946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f841 	bl	800294e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 f9da 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d001      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04f      	b.n	8002a1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <HAL_TIM_Base_Start_IT+0xc4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d018      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_TIM_Base_Start_IT+0xc8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_TIM_Base_Start_IT+0xcc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_TIM_Base_Start_IT+0xd0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_TIM_Base_Start_IT+0xd4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x76>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_TIM_Base_Start_IT+0xd8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d115      	bne.n	8002a06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_TIM_Base_Start_IT+0xdc>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d015      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0xb4>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f2:	d011      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a04:	e008      	b.n	8002a18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e000      	b.n	8002a1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40000c00 	.word	0x40000c00
 8002a38:	40013400 	.word	0x40013400
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	00010007 	.word	0x00010007

08002a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0202 	mvn.w	r2, #2
 8002a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8e4 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8d6 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f8e7 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d020      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0204 	mvn.w	r2, #4
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8be 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8b0 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8c1 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d020      	beq.n	8002b40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0208 	mvn.w	r2, #8
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2204      	movs	r2, #4
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f898 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f88a 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f89b 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d020      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0210 	mvn.w	r2, #16
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2208      	movs	r2, #8
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f872 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f864 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f875 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0201 	mvn.w	r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fd fde6 	bl	800077c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f906 	bl	8002de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f8fe 	bl	8002df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f834 	bl	8002c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00c      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0220 	mvn.w	r2, #32
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8c6 	bl	8002dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a40      	ldr	r2, [pc, #256]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3c      	ldr	r2, [pc, #240]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <TIM_Base_SetConfig+0x120>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3a      	ldr	r2, [pc, #232]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2f      	ldr	r2, [pc, #188]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d01b      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d017      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2b      	ldr	r2, [pc, #172]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <TIM_Base_SetConfig+0x120>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00f      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a29      	ldr	r2, [pc, #164]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <TIM_Base_SetConfig+0x128>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <TIM_Base_SetConfig+0x12c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0x9a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <TIM_Base_SetConfig+0x130>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d108      	bne.n	8002d44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00f      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <TIM_Base_SetConfig+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <TIM_Base_SetConfig+0x128>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <TIM_Base_SetConfig+0x12c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_Base_SetConfig+0xf8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <TIM_Base_SetConfig+0x130>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d103      	bne.n	8002d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	615a      	str	r2, [r3, #20]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40013400 	.word	0x40013400
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40014400 	.word	0x40014400
 8002dc8:	40014800 	.word	0x40014800

08002dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e040      	b.n	8002e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fce6 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fb6a 	bl	8003528 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f8af 	bl	8002fb8 <UART_SetConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e01b      	b.n	8002e9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fbe9 	bl	800366c <UART_CheckIdleState>
 8002e9a:	4603      	mov	r3, r0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d178      	bne.n	8002fae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Transmit+0x24>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e071      	b.n	8002fb0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2221      	movs	r2, #33	; 0x21
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fd fe8f 	bl	8000bfc <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d108      	bne.n	8002f0c <HAL_UART_Transmit+0x68>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e003      	b.n	8002f14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f14:	e030      	b.n	8002f78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fc4b 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e03c      	b.n	8002fb0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	3302      	adds	r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e008      	b.n	8002f66 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3301      	adds	r3, #1
 8002f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1c8      	bne.n	8002f16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fc14 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e005      	b.n	8002fb0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fbc:	b08a      	sub	sp, #40	; 0x28
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4ba4      	ldr	r3, [pc, #656]	; (8003278 <UART_SetConfig+0x2c0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a99      	ldr	r2, [pc, #612]	; (800327c <UART_SetConfig+0x2c4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	4313      	orrs	r3, r2
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a90      	ldr	r2, [pc, #576]	; (8003280 <UART_SetConfig+0x2c8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d126      	bne.n	8003090 <UART_SetConfig+0xd8>
 8003042:	4b90      	ldr	r3, [pc, #576]	; (8003284 <UART_SetConfig+0x2cc>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b03      	cmp	r3, #3
 800304e:	d81b      	bhi.n	8003088 <UART_SetConfig+0xd0>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <UART_SetConfig+0xa0>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003069 	.word	0x08003069
 800305c:	08003079 	.word	0x08003079
 8003060:	08003071 	.word	0x08003071
 8003064:	08003081 	.word	0x08003081
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e116      	b.n	800329e <UART_SetConfig+0x2e6>
 8003070:	2302      	movs	r3, #2
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e112      	b.n	800329e <UART_SetConfig+0x2e6>
 8003078:	2304      	movs	r3, #4
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307e:	e10e      	b.n	800329e <UART_SetConfig+0x2e6>
 8003080:	2308      	movs	r3, #8
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003086:	e10a      	b.n	800329e <UART_SetConfig+0x2e6>
 8003088:	2310      	movs	r3, #16
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308e:	e106      	b.n	800329e <UART_SetConfig+0x2e6>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a7c      	ldr	r2, [pc, #496]	; (8003288 <UART_SetConfig+0x2d0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d138      	bne.n	800310c <UART_SetConfig+0x154>
 800309a:	4b7a      	ldr	r3, [pc, #488]	; (8003284 <UART_SetConfig+0x2cc>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d82d      	bhi.n	8003104 <UART_SetConfig+0x14c>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <UART_SetConfig+0xf8>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003105 	.word	0x08003105
 80030bc:	08003105 	.word	0x08003105
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	08003105 	.word	0x08003105
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003105 	.word	0x08003105
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	08003105 	.word	0x08003105
 80030d8:	08003105 	.word	0x08003105
 80030dc:	08003105 	.word	0x08003105
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ea:	e0d8      	b.n	800329e <UART_SetConfig+0x2e6>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	e0d4      	b.n	800329e <UART_SetConfig+0x2e6>
 80030f4:	2304      	movs	r3, #4
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e0d0      	b.n	800329e <UART_SetConfig+0x2e6>
 80030fc:	2308      	movs	r3, #8
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e0cc      	b.n	800329e <UART_SetConfig+0x2e6>
 8003104:	2310      	movs	r3, #16
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e0c8      	b.n	800329e <UART_SetConfig+0x2e6>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5e      	ldr	r2, [pc, #376]	; (800328c <UART_SetConfig+0x2d4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d125      	bne.n	8003162 <UART_SetConfig+0x1aa>
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <UART_SetConfig+0x2cc>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d016      	beq.n	8003152 <UART_SetConfig+0x19a>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d818      	bhi.n	800315a <UART_SetConfig+0x1a2>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d00a      	beq.n	8003142 <UART_SetConfig+0x18a>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d814      	bhi.n	800315a <UART_SetConfig+0x1a2>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <UART_SetConfig+0x182>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d008      	beq.n	800314a <UART_SetConfig+0x192>
 8003138:	e00f      	b.n	800315a <UART_SetConfig+0x1a2>
 800313a:	2300      	movs	r3, #0
 800313c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003140:	e0ad      	b.n	800329e <UART_SetConfig+0x2e6>
 8003142:	2302      	movs	r3, #2
 8003144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003148:	e0a9      	b.n	800329e <UART_SetConfig+0x2e6>
 800314a:	2304      	movs	r3, #4
 800314c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003150:	e0a5      	b.n	800329e <UART_SetConfig+0x2e6>
 8003152:	2308      	movs	r3, #8
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003158:	e0a1      	b.n	800329e <UART_SetConfig+0x2e6>
 800315a:	2310      	movs	r3, #16
 800315c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003160:	e09d      	b.n	800329e <UART_SetConfig+0x2e6>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <UART_SetConfig+0x2d8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d125      	bne.n	80031b8 <UART_SetConfig+0x200>
 800316c:	4b45      	ldr	r3, [pc, #276]	; (8003284 <UART_SetConfig+0x2cc>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003176:	2bc0      	cmp	r3, #192	; 0xc0
 8003178:	d016      	beq.n	80031a8 <UART_SetConfig+0x1f0>
 800317a:	2bc0      	cmp	r3, #192	; 0xc0
 800317c:	d818      	bhi.n	80031b0 <UART_SetConfig+0x1f8>
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d00a      	beq.n	8003198 <UART_SetConfig+0x1e0>
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d814      	bhi.n	80031b0 <UART_SetConfig+0x1f8>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <UART_SetConfig+0x1d8>
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d008      	beq.n	80031a0 <UART_SetConfig+0x1e8>
 800318e:	e00f      	b.n	80031b0 <UART_SetConfig+0x1f8>
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e082      	b.n	800329e <UART_SetConfig+0x2e6>
 8003198:	2302      	movs	r3, #2
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e07e      	b.n	800329e <UART_SetConfig+0x2e6>
 80031a0:	2304      	movs	r3, #4
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e07a      	b.n	800329e <UART_SetConfig+0x2e6>
 80031a8:	2308      	movs	r3, #8
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	e076      	b.n	800329e <UART_SetConfig+0x2e6>
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b6:	e072      	b.n	800329e <UART_SetConfig+0x2e6>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	; (8003294 <UART_SetConfig+0x2dc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12a      	bne.n	8003218 <UART_SetConfig+0x260>
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <UART_SetConfig+0x2cc>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d0:	d01a      	beq.n	8003208 <UART_SetConfig+0x250>
 80031d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d6:	d81b      	bhi.n	8003210 <UART_SetConfig+0x258>
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031dc:	d00c      	beq.n	80031f8 <UART_SetConfig+0x240>
 80031de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e2:	d815      	bhi.n	8003210 <UART_SetConfig+0x258>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <UART_SetConfig+0x238>
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ec:	d008      	beq.n	8003200 <UART_SetConfig+0x248>
 80031ee:	e00f      	b.n	8003210 <UART_SetConfig+0x258>
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e052      	b.n	800329e <UART_SetConfig+0x2e6>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e04e      	b.n	800329e <UART_SetConfig+0x2e6>
 8003200:	2304      	movs	r3, #4
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e04a      	b.n	800329e <UART_SetConfig+0x2e6>
 8003208:	2308      	movs	r3, #8
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e046      	b.n	800329e <UART_SetConfig+0x2e6>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003216:	e042      	b.n	800329e <UART_SetConfig+0x2e6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a17      	ldr	r2, [pc, #92]	; (800327c <UART_SetConfig+0x2c4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d13a      	bne.n	8003298 <UART_SetConfig+0x2e0>
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800322c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003230:	d01a      	beq.n	8003268 <UART_SetConfig+0x2b0>
 8003232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003236:	d81b      	bhi.n	8003270 <UART_SetConfig+0x2b8>
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323c:	d00c      	beq.n	8003258 <UART_SetConfig+0x2a0>
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003242:	d815      	bhi.n	8003270 <UART_SetConfig+0x2b8>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <UART_SetConfig+0x298>
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d008      	beq.n	8003260 <UART_SetConfig+0x2a8>
 800324e:	e00f      	b.n	8003270 <UART_SetConfig+0x2b8>
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e022      	b.n	800329e <UART_SetConfig+0x2e6>
 8003258:	2302      	movs	r3, #2
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e01e      	b.n	800329e <UART_SetConfig+0x2e6>
 8003260:	2304      	movs	r3, #4
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e01a      	b.n	800329e <UART_SetConfig+0x2e6>
 8003268:	2308      	movs	r3, #8
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e016      	b.n	800329e <UART_SetConfig+0x2e6>
 8003270:	2310      	movs	r3, #16
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e012      	b.n	800329e <UART_SetConfig+0x2e6>
 8003278:	efff69f3 	.word	0xefff69f3
 800327c:	40008000 	.word	0x40008000
 8003280:	40013800 	.word	0x40013800
 8003284:	40021000 	.word	0x40021000
 8003288:	40004400 	.word	0x40004400
 800328c:	40004800 	.word	0x40004800
 8003290:	40004c00 	.word	0x40004c00
 8003294:	40005000 	.word	0x40005000
 8003298:	2310      	movs	r3, #16
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a9f      	ldr	r2, [pc, #636]	; (8003520 <UART_SetConfig+0x568>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d17a      	bne.n	800339e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d824      	bhi.n	80032fa <UART_SetConfig+0x342>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0x300>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032eb 	.word	0x080032eb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032fb 	.word	0x080032fb
 80032d4:	080032fb 	.word	0x080032fb
 80032d8:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fd58 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 80032e0:	61f8      	str	r0, [r7, #28]
        break;
 80032e2:	e010      	b.n	8003306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b8f      	ldr	r3, [pc, #572]	; (8003524 <UART_SetConfig+0x56c>)
 80032e6:	61fb      	str	r3, [r7, #28]
        break;
 80032e8:	e00d      	b.n	8003306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fcb9 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 80032ee:	61f8      	str	r0, [r7, #28]
        break;
 80032f0:	e009      	b.n	8003306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	61fb      	str	r3, [r7, #28]
        break;
 80032f8:	e005      	b.n	8003306 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80fb 	beq.w	8003504 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	429a      	cmp	r2, r3
 800331c:	d305      	bcc.n	800332a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	429a      	cmp	r2, r3
 8003328:	d903      	bls.n	8003332 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003330:	e0e8      	b.n	8003504 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2200      	movs	r2, #0
 8003336:	461c      	mov	r4, r3
 8003338:	4615      	mov	r5, r2
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	022b      	lsls	r3, r5, #8
 8003344:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003348:	0222      	lsls	r2, r4, #8
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	6849      	ldr	r1, [r1, #4]
 800334e:	0849      	lsrs	r1, r1, #1
 8003350:	2000      	movs	r0, #0
 8003352:	4688      	mov	r8, r1
 8003354:	4681      	mov	r9, r0
 8003356:	eb12 0a08 	adds.w	sl, r2, r8
 800335a:	eb43 0b09 	adc.w	fp, r3, r9
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800336c:	4650      	mov	r0, sl
 800336e:	4659      	mov	r1, fp
 8003370:	f7fc ff3e 	bl	80001f0 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003382:	d308      	bcc.n	8003396 <UART_SetConfig+0x3de>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338a:	d204      	bcs.n	8003396 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	e0b6      	b.n	8003504 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800339c:	e0b2      	b.n	8003504 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a6:	d15e      	bne.n	8003466 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d828      	bhi.n	8003402 <UART_SetConfig+0x44a>
 80033b0:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0x400>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	08003403 	.word	0x08003403
 80033c8:	080033f3 	.word	0x080033f3
 80033cc:	08003403 	.word	0x08003403
 80033d0:	08003403 	.word	0x08003403
 80033d4:	08003403 	.word	0x08003403
 80033d8:	080033fb 	.word	0x080033fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7fe fcd8 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 80033e0:	61f8      	str	r0, [r7, #28]
        break;
 80033e2:	e014      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe fcea 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 80033e8:	61f8      	str	r0, [r7, #28]
        break;
 80033ea:	e010      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <UART_SetConfig+0x56c>)
 80033ee:	61fb      	str	r3, [r7, #28]
        break;
 80033f0:	e00d      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe fc35 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 80033f6:	61f8      	str	r0, [r7, #28]
        break;
 80033f8:	e009      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fe:	61fb      	str	r3, [r7, #28]
        break;
 8003400:	e005      	b.n	800340e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800340c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d077      	beq.n	8003504 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005a      	lsls	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	441a      	add	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d916      	bls.n	800345e <UART_SetConfig+0x4a6>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d212      	bcs.n	800345e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f023 030f 	bic.w	r3, r3, #15
 8003440:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b29a      	uxth	r2, r3
 800344e:	8afb      	ldrh	r3, [r7, #22]
 8003450:	4313      	orrs	r3, r2
 8003452:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	8afa      	ldrh	r2, [r7, #22]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e052      	b.n	8003504 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003464:	e04e      	b.n	8003504 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800346a:	2b08      	cmp	r3, #8
 800346c:	d827      	bhi.n	80034be <UART_SetConfig+0x506>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <UART_SetConfig+0x4bc>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003499 	.word	0x08003499
 8003478:	080034a1 	.word	0x080034a1
 800347c:	080034a9 	.word	0x080034a9
 8003480:	080034bf 	.word	0x080034bf
 8003484:	080034af 	.word	0x080034af
 8003488:	080034bf 	.word	0x080034bf
 800348c:	080034bf 	.word	0x080034bf
 8003490:	080034bf 	.word	0x080034bf
 8003494:	080034b7 	.word	0x080034b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003498:	f7fe fc7a 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 800349c:	61f8      	str	r0, [r7, #28]
        break;
 800349e:	e014      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a0:	f7fe fc8c 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 80034a4:	61f8      	str	r0, [r7, #28]
        break;
 80034a6:	e010      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <UART_SetConfig+0x56c>)
 80034aa:	61fb      	str	r3, [r7, #28]
        break;
 80034ac:	e00d      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ae:	f7fe fbd7 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 80034b2:	61f8      	str	r0, [r7, #28]
        break;
 80034b4:	e009      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ba:	61fb      	str	r3, [r7, #28]
        break;
 80034bc:	e005      	b.n	80034ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034c8:	bf00      	nop
    }

    if (pclk != 0U)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d019      	beq.n	8003504 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085a      	lsrs	r2, r3, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d909      	bls.n	80034fe <UART_SetConfig+0x546>
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d205      	bcs.n	80034fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60da      	str	r2, [r3, #12]
 80034fc:	e002      	b.n	8003504 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003510:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003514:	4618      	mov	r0, r3
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351e:	bf00      	nop
 8003520:	40008000 	.word	0x40008000
 8003524:	00f42400 	.word	0x00f42400

08003528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01a      	beq.n	800363e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d10a      	bne.n	800363e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b098      	sub	sp, #96	; 0x60
 8003670:	af02      	add	r7, sp, #8
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800367c:	f7fd fabe 	bl	8000bfc <HAL_GetTick>
 8003680:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d12e      	bne.n	80036ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f88c 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d021      	beq.n	80036ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e062      	b.n	80037b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d149      	bne.n	8003790 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f856 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d03c      	beq.n	8003790 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	623b      	str	r3, [r7, #32]
   return(result);
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	633b      	str	r3, [r7, #48]	; 0x30
 8003736:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e6      	bne.n	8003716 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	60fb      	str	r3, [r7, #12]
   return(result);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3308      	adds	r3, #8
 8003766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003768:	61fa      	str	r2, [r7, #28]
 800376a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	69b9      	ldr	r1, [r7, #24]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	617b      	str	r3, [r7, #20]
   return(result);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e011      	b.n	80037b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3758      	adds	r7, #88	; 0x58
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037cc:	e049      	b.n	8003862 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d4:	d045      	beq.n	8003862 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fd fa11 	bl	8000bfc <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <UART_WaitOnFlagUntilTimeout+0x30>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e048      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d031      	beq.n	8003862 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b08      	cmp	r3, #8
 800380a:	d110      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2208      	movs	r2, #8
 8003812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f838 	bl	800388a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2208      	movs	r2, #8
 800381e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e029      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383c:	d111      	bne.n	8003862 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f81e 	bl	800388a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e00f      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	429a      	cmp	r2, r3
 800387e:	d0a6      	beq.n	80037ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800388a:	b480      	push	{r7}
 800388c:	b095      	sub	sp, #84	; 0x54
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b0:	643b      	str	r3, [r7, #64]	; 0x40
 80038b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e6      	bne.n	8003892 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d118      	bne.n	8003932 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	60bb      	str	r3, [r7, #8]
   return(result);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 0310 	bic.w	r3, r3, #16
 8003914:	647b      	str	r3, [r7, #68]	; 0x44
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	613b      	str	r3, [r7, #16]
   return(result);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e6      	bne.n	8003900 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003946:	bf00      	nop
 8003948:	3754      	adds	r7, #84	; 0x54
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <__NVIC_SetPriority>:
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	6039      	str	r1, [r7, #0]
 800395e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	2b00      	cmp	r3, #0
 8003966:	db0a      	blt.n	800397e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	490c      	ldr	r1, [pc, #48]	; (80039a0 <__NVIC_SetPriority+0x4c>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	440b      	add	r3, r1
 8003978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800397c:	e00a      	b.n	8003994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4908      	ldr	r1, [pc, #32]	; (80039a4 <__NVIC_SetPriority+0x50>)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	3b04      	subs	r3, #4
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	440b      	add	r3, r1
 8003992:	761a      	strb	r2, [r3, #24]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000e100 	.word	0xe000e100
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <SysTick_Handler+0x1c>)
 80039ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039b0:	f002 fab4 	bl	8005f1c <xTaskGetSchedulerState>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d001      	beq.n	80039be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039ba:	f003 f99d 	bl	8006cf8 <xPortSysTickHandler>
  }
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	e000e010 	.word	0xe000e010

080039c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039cc:	2100      	movs	r1, #0
 80039ce:	f06f 0004 	mvn.w	r0, #4
 80039d2:	f7ff ffbf 	bl	8003954 <__NVIC_SetPriority>
#endif
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e2:	f3ef 8305 	mrs	r3, IPSR
 80039e6:	603b      	str	r3, [r7, #0]
  return(result);
 80039e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039ee:	f06f 0305 	mvn.w	r3, #5
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	e00c      	b.n	8003a10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <osKernelInitialize+0x44>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <osKernelInitialize+0x44>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	e002      	b.n	8003a10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a10:	687b      	ldr	r3, [r7, #4]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000178 	.word	0x20000178

08003a24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a2a:	f3ef 8305 	mrs	r3, IPSR
 8003a2e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a36:	f06f 0305 	mvn.w	r3, #5
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	e010      	b.n	8003a60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <osKernelStart+0x48>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d109      	bne.n	8003a5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a46:	f7ff ffbf 	bl	80039c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <osKernelStart+0x48>)
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a50:	f001 fe08 	bl	8005664 <vTaskStartScheduler>
      stat = osOK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	e002      	b.n	8003a60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a60:	687b      	ldr	r3, [r7, #4]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000178 	.word	0x20000178

08003a70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08e      	sub	sp, #56	; 0x38
 8003a74:	af04      	add	r7, sp, #16
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a80:	f3ef 8305 	mrs	r3, IPSR
 8003a84:	617b      	str	r3, [r7, #20]
  return(result);
 8003a86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d17e      	bne.n	8003b8a <osThreadNew+0x11a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d07b      	beq.n	8003b8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a96:	2318      	movs	r3, #24
 8003a98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d045      	beq.n	8003b36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <osThreadNew+0x48>
        name = attr->name;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <osThreadNew+0x6e>
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b38      	cmp	r3, #56	; 0x38
 8003ad0:	d805      	bhi.n	8003ade <osThreadNew+0x6e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <osThreadNew+0x72>
        return (NULL);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e054      	b.n	8003b8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <osThreadNew+0xa8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2ba7      	cmp	r3, #167	; 0xa7
 8003b00:	d90a      	bls.n	8003b18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <osThreadNew+0xa8>
        mem = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e010      	b.n	8003b3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10c      	bne.n	8003b3a <osThreadNew+0xca>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <osThreadNew+0xca>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <osThreadNew+0xca>
          mem = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e001      	b.n	8003b3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d110      	bne.n	8003b62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b48:	9202      	str	r2, [sp, #8]
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6a3a      	ldr	r2, [r7, #32]
 8003b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f001 fb2e 	bl	80051b8 <xTaskCreateStatic>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e013      	b.n	8003b8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d110      	bne.n	8003b8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	f107 0310 	add.w	r3, r7, #16
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f001 fb79 	bl	8005272 <xTaskCreate>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d001      	beq.n	8003b8a <osThreadNew+0x11a>
            hTask = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b8a:	693b      	ldr	r3, [r7, #16]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3728      	adds	r7, #40	; 0x28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba2:	f3ef 8305 	mrs	r3, IPSR
 8003ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8003bae:	f06f 0305 	mvn.w	r3, #5
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e013      	b.n	8003bde <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <osThreadSetPriority+0x34>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	dd02      	ble.n	8003bc8 <osThreadSetPriority+0x34>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b38      	cmp	r3, #56	; 0x38
 8003bc6:	dd03      	ble.n	8003bd0 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8003bc8:	f06f 0303 	mvn.w	r3, #3
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e006      	b.n	8003bde <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6938      	ldr	r0, [r7, #16]
 8003bda:	f001 fca5 	bl	8005528 <vTaskPrioritySet>
  }

  return (stat);
 8003bde:	697b      	ldr	r3, [r7, #20]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf4:	f3ef 8305 	mrs	r3, IPSR
 8003bf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bfa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d174      	bne.n	8003cea <osMutexNew+0x102>
    if (attr != NULL) {
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e001      	b.n	8003c12 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <osMutexNew+0x3a>
      rmtx = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e001      	b.n	8003c26 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d15c      	bne.n	8003cea <osMutexNew+0x102>
      mem = -1;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c34:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <osMutexNew+0x6a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b4f      	cmp	r3, #79	; 0x4f
 8003c4a:	d902      	bls.n	8003c52 <osMutexNew+0x6a>
          mem = 1;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e00c      	b.n	8003c6c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <osMutexNew+0x84>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <osMutexNew+0x84>
            mem = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e001      	b.n	8003c6c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d112      	bne.n	8003c98 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	2004      	movs	r0, #4
 8003c80:	f000 fbaf 	bl	80043e2 <xQueueCreateMutexStatic>
 8003c84:	61f8      	str	r0, [r7, #28]
 8003c86:	e016      	b.n	8003cb6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f000 fba7 	bl	80043e2 <xQueueCreateMutexStatic>
 8003c94:	61f8      	str	r0, [r7, #28]
 8003c96:	e00e      	b.n	8003cb6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ca4:	2004      	movs	r0, #4
 8003ca6:	f000 fb84 	bl	80043b2 <xQueueCreateMutex>
 8003caa:	61f8      	str	r0, [r7, #28]
 8003cac:	e003      	b.n	8003cb6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f000 fb7f 	bl	80043b2 <xQueueCreateMutex>
 8003cb4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <osMutexNew+0xee>
        if (attr != NULL) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <osMutexNew+0xe2>
          name = attr->name;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003cce:	68f9      	ldr	r1, [r7, #12]
 8003cd0:	69f8      	ldr	r0, [r7, #28]
 8003cd2:	f001 f9e9 	bl	80050a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d006      	beq.n	8003cea <osMutexNew+0x102>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003cea:	69fb      	ldr	r3, [r7, #28]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d04:	f3ef 8305 	mrs	r3, IPSR
 8003d08:	613b      	str	r3, [r7, #16]
  return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d175      	bne.n	8003dfc <osSemaphoreNew+0x108>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d072      	beq.n	8003dfc <osSemaphoreNew+0x108>
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d86e      	bhi.n	8003dfc <osSemaphoreNew+0x108>
    mem = -1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <osSemaphoreNew+0x4c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b4f      	cmp	r3, #79	; 0x4f
 8003d38:	d902      	bls.n	8003d40 <osSemaphoreNew+0x4c>
        mem = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e00c      	b.n	8003d5a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d108      	bne.n	8003d5a <osSemaphoreNew+0x66>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d104      	bne.n	8003d5a <osSemaphoreNew+0x66>
          mem = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	e001      	b.n	8003d5a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d60:	d04c      	beq.n	8003dfc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d128      	bne.n	8003dba <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10a      	bne.n	8003d84 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2203      	movs	r2, #3
 8003d74:	9200      	str	r2, [sp, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f000 fa2a 	bl	80041d4 <xQueueGenericCreateStatic>
 8003d80:	61f8      	str	r0, [r7, #28]
 8003d82:	e005      	b.n	8003d90 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003d84:	2203      	movs	r2, #3
 8003d86:	2100      	movs	r1, #0
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f000 fa9b 	bl	80042c4 <xQueueGenericCreate>
 8003d8e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d022      	beq.n	8003ddc <osSemaphoreNew+0xe8>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01f      	beq.n	8003ddc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	69f8      	ldr	r0, [r7, #28]
 8003da4:	f000 fba2 	bl	80044ec <xQueueGenericSend>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d016      	beq.n	8003ddc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003dae:	69f8      	ldr	r0, [r7, #28]
 8003db0:	f001 f82e 	bl	8004e10 <vQueueDelete>
            hSemaphore = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	e010      	b.n	8003ddc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d108      	bne.n	8003dd2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fb25 	bl	8004418 <xQueueCreateCountingSemaphoreStatic>
 8003dce:	61f8      	str	r0, [r7, #28]
 8003dd0:	e004      	b.n	8003ddc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fb56 	bl	8004486 <xQueueCreateCountingSemaphore>
 8003dda:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00c      	beq.n	8003dfc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e001      	b.n	8003df4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	69f8      	ldr	r0, [r7, #28]
 8003df8:	f001 f956 	bl	80050a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003e20:	f06f 0303 	mvn.w	r3, #3
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e039      	b.n	8003e9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e28:	f3ef 8305 	mrs	r3, IPSR
 8003e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d022      	beq.n	8003e7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003e3a:	f06f 0303 	mvn.w	r3, #3
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e02c      	b.n	8003e9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	6938      	ldr	r0, [r7, #16]
 8003e50:	f000 ff5e 	bl	8004d10 <xQueueReceiveFromISR>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d003      	beq.n	8003e62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003e5a:	f06f 0302 	mvn.w	r3, #2
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e01c      	b.n	8003e9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d019      	beq.n	8003e9c <osSemaphoreAcquire+0x94>
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <osSemaphoreAcquire+0xa0>)
 8003e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	e010      	b.n	8003e9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	6938      	ldr	r0, [r7, #16]
 8003e7e:	f000 fe3b 	bl	8004af8 <xQueueSemaphoreTake>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d009      	beq.n	8003e9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003e8e:	f06f 0301 	mvn.w	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e002      	b.n	8003e9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003e96:	f06f 0302 	mvn.w	r3, #2
 8003e9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003e9c:	697b      	ldr	r3, [r7, #20]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003ec2:	f06f 0303 	mvn.w	r3, #3
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e02c      	b.n	8003f24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eca:	f3ef 8305 	mrs	r3, IPSR
 8003ece:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01a      	beq.n	8003f0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6938      	ldr	r0, [r7, #16]
 8003ee2:	f000 fc9c 	bl	800481e <xQueueGiveFromISR>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d003      	beq.n	8003ef4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003eec:	f06f 0302 	mvn.w	r3, #2
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e017      	b.n	8003f24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d014      	beq.n	8003f24 <osSemaphoreRelease+0x78>
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <osSemaphoreRelease+0x84>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	e00b      	b.n	8003f24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2100      	movs	r1, #0
 8003f12:	6938      	ldr	r0, [r7, #16]
 8003f14:	f000 faea 	bl	80044ec <xQueueGenericSend>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d002      	beq.n	8003f24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003f1e:	f06f 0302 	mvn.w	r3, #2
 8003f22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003f24:	697b      	ldr	r3, [r7, #20]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <vApplicationGetIdleTaskMemory+0x30>)
 8003f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	601a      	str	r2, [r3, #0]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	2000017c 	.word	0x2000017c
 8003f64:	20000224 	.word	0x20000224

08003f68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a06      	ldr	r2, [pc, #24]	; (8003f98 <vApplicationGetTimerTaskMemory+0x30>)
 8003f7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f86:	601a      	str	r2, [r3, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20000424 	.word	0x20000424
 8003f98:	200004cc 	.word	0x200004cc

08003f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f103 0208 	add.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f103 0208 	add.w	r2, r3, #8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f103 0208 	add.w	r2, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004054:	d103      	bne.n	800405e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e00c      	b.n	8004078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3308      	adds	r3, #8
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e002      	b.n	800406c <vListInsert+0x2e>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d2f6      	bcs.n	8004066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6892      	ldr	r2, [r2, #8]
 80040c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6852      	ldr	r2, [r2, #4]
 80040d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d103      	bne.n	80040e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800412e:	f002 fd51 	bl	8006bd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	441a      	add	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	3b01      	subs	r3, #1
 8004160:	68f9      	ldr	r1, [r7, #12]
 8004162:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	441a      	add	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	22ff      	movs	r2, #255	; 0xff
 8004172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d114      	bne.n	80041ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01a      	beq.n	80041c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3310      	adds	r3, #16
 8004190:	4618      	mov	r0, r3
 8004192:	f001 fd01 	bl	8005b98 <xTaskRemoveFromEventList>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d012      	beq.n	80041c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <xQueueGenericReset+0xcc>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	e009      	b.n	80041c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3310      	adds	r3, #16
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fef2 	bl	8003f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3324      	adds	r3, #36	; 0x24
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff feed 	bl	8003f9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041c2:	f002 fd37 	bl	8006c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041c6:	2301      	movs	r3, #1
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <xQueueGenericCreateStatic+0x52>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <xQueueGenericCreateStatic+0x56>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <xQueueGenericCreateStatic+0x58>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	623b      	str	r3, [r7, #32]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <xQueueGenericCreateStatic+0x7e>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <xQueueGenericCreateStatic+0x82>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <xQueueGenericCreateStatic+0x84>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	61fb      	str	r3, [r7, #28]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004272:	2350      	movs	r3, #80	; 0x50
 8004274:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b50      	cmp	r3, #80	; 0x50
 800427a:	d00a      	beq.n	8004292 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	61bb      	str	r3, [r7, #24]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004292:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f83f 	bl	8004338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042bc:	4618      	mov	r0, r3
 80042be:	3730      	adds	r7, #48	; 0x30
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	613b      	str	r3, [r7, #16]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	3350      	adds	r3, #80	; 0x50
 80042fc:	4618      	mov	r0, r3
 80042fe:	f002 fd8b 	bl	8006e18 <pvPortMalloc>
 8004302:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d011      	beq.n	800432e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	3350      	adds	r3, #80	; 0x50
 8004312:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800431c:	79fa      	ldrb	r2, [r7, #7]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f805 	bl	8004338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800432e:	69bb      	ldr	r3, [r7, #24]
	}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e002      	b.n	800435a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004366:	2101      	movs	r1, #1
 8004368:	69b8      	ldr	r0, [r7, #24]
 800436a:	f7ff fecb 	bl	8004104 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00e      	beq.n	80043aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800439e:	2300      	movs	r3, #0
 80043a0:	2200      	movs	r2, #0
 80043a2:	2100      	movs	r1, #0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8a1 	bl	80044ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	4603      	mov	r3, r0
 80043ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	461a      	mov	r2, r3
 80043c8:	6939      	ldr	r1, [r7, #16]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff ff7a 	bl	80042c4 <xQueueGenericCreate>
 80043d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff ffd3 	bl	800437e <prvInitialiseMutex>

		return xNewQueue;
 80043d8:	68fb      	ldr	r3, [r7, #12]
	}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b088      	sub	sp, #32
 80043e6:	af02      	add	r7, sp, #8
 80043e8:	4603      	mov	r3, r0
 80043ea:	6039      	str	r1, [r7, #0]
 80043ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043ee:	2301      	movs	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	6939      	ldr	r1, [r7, #16]
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	f7ff fee7 	bl	80041d4 <xQueueGenericCreateStatic>
 8004406:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff ffb8 	bl	800437e <prvInitialiseMutex>

		return xNewQueue;
 800440e:	68fb      	ldr	r3, [r7, #12]
	}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	61bb      	str	r3, [r7, #24]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d90a      	bls.n	800445e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	617b      	str	r3, [r7, #20]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800445e:	2302      	movs	r3, #2
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	2100      	movs	r1, #0
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7ff feb3 	bl	80041d4 <xQueueGenericCreateStatic>
 800446e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800447c:	69fb      	ldr	r3, [r7, #28]
	}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	613b      	str	r3, [r7, #16]
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d90a      	bls.n	80044ca <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80044ca:	2202      	movs	r2, #2
 80044cc:	2100      	movs	r1, #0
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fef8 	bl	80042c4 <xQueueGenericCreate>
 80044d4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80044e2:	697b      	ldr	r3, [r7, #20]
	}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08e      	sub	sp, #56	; 0x38
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044fa:	2300      	movs	r3, #0
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <xQueueGenericSend+0x32>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d103      	bne.n	800452c <xQueueGenericSend+0x40>
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <xQueueGenericSend+0x44>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <xQueueGenericSend+0x46>
 8004530:	2300      	movs	r3, #0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <xQueueGenericSend+0x60>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004548:	bf00      	nop
 800454a:	e7fe      	b.n	800454a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d103      	bne.n	800455a <xQueueGenericSend+0x6e>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <xQueueGenericSend+0x72>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <xQueueGenericSend+0x74>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueGenericSend+0x8e>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	623b      	str	r3, [r7, #32]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800457a:	f001 fccf 	bl	8005f1c <xTaskGetSchedulerState>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <xQueueGenericSend+0x9e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <xQueueGenericSend+0xa2>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericSend+0xa4>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <xQueueGenericSend+0xbe>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	61fb      	str	r3, [r7, #28]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045aa:	f002 fb13 	bl	8006bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <xQueueGenericSend+0xd4>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d129      	bne.n	8004614 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c6:	f000 fc5e 	bl	8004e86 <prvCopyDataToQueue>
 80045ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	3324      	adds	r3, #36	; 0x24
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 fadd 	bl	8005b98 <xTaskRemoveFromEventList>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d013      	beq.n	800460c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045e4:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <xQueueGenericSend+0x1f8>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	e00a      	b.n	800460c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045fc:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <xQueueGenericSend+0x1f8>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800460c:	f002 fb12 	bl	8006c34 <vPortExitCritical>
				return pdPASS;
 8004610:	2301      	movs	r3, #1
 8004612:	e063      	b.n	80046dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800461a:	f002 fb0b 	bl	8006c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800461e:	2300      	movs	r3, #0
 8004620:	e05c      	b.n	80046dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	4618      	mov	r0, r3
 800462e:	f001 fb17 	bl	8005c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004632:	2301      	movs	r3, #1
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004636:	f002 fafd 	bl	8006c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800463a:	f001 f883 	bl	8005744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800463e:	f002 fac9 	bl	8006bd4 <vPortEnterCritical>
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004648:	b25b      	sxtb	r3, r3
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464e:	d103      	bne.n	8004658 <xQueueGenericSend+0x16c>
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465e:	b25b      	sxtb	r3, r3
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004664:	d103      	bne.n	800466e <xQueueGenericSend+0x182>
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800466e:	f002 fae1 	bl	8006c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004672:	1d3a      	adds	r2, r7, #4
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f001 fb06 	bl	8005c8c <xTaskCheckForTimeOut>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d124      	bne.n	80046d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004688:	f000 fcf5 	bl	8005076 <prvIsQueueFull>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d018      	beq.n	80046c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	3310      	adds	r3, #16
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f001 fa2c 	bl	8005af8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a2:	f000 fc80 	bl	8004fa6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046a6:	f001 f85b 	bl	8005760 <xTaskResumeAll>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f af7c 	bne.w	80045aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046b2:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <xQueueGenericSend+0x1f8>)
 80046b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	e772      	b.n	80045aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c6:	f000 fc6e 	bl	8004fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ca:	f001 f849 	bl	8005760 <xTaskResumeAll>
 80046ce:	e76c      	b.n	80045aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d2:	f000 fc68 	bl	8004fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046d6:	f001 f843 	bl	8005760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3738      	adds	r7, #56	; 0x38
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b090      	sub	sp, #64	; 0x40
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <xQueueGenericSendFromISR+0x3c>
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <xQueueGenericSendFromISR+0x40>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <xQueueGenericSendFromISR+0x42>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d103      	bne.n	8004752 <xQueueGenericSendFromISR+0x6a>
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <xQueueGenericSendFromISR+0x6e>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <xQueueGenericSendFromISR+0x70>
 8004756:	2300      	movs	r3, #0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	623b      	str	r3, [r7, #32]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004772:	f002 fb11 	bl	8006d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004776:	f3ef 8211 	mrs	r2, BASEPRI
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	61fa      	str	r2, [r7, #28]
 800478c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800478e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	429a      	cmp	r2, r3
 800479c:	d302      	bcc.n	80047a4 <xQueueGenericSendFromISR+0xbc>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d12f      	bne.n	8004804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047ba:	f000 fb64 	bl	8004e86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c6:	d112      	bne.n	80047ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d016      	beq.n	80047fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f9df 	bl	8005b98 <xTaskRemoveFromEventList>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047f2:	3301      	adds	r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	b25a      	sxtb	r2, r3
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047fe:	2301      	movs	r3, #1
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004802:	e001      	b.n	8004808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004804:	2300      	movs	r3, #0
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004816:	4618      	mov	r0, r3
 8004818:	3740      	adds	r7, #64	; 0x40
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b08e      	sub	sp, #56	; 0x38
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	623b      	str	r3, [r7, #32]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	61fb      	str	r3, [r7, #28]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <xQueueGiveFromISR+0x58>
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <xQueueGiveFromISR+0x5c>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xQueueGiveFromISR+0x5e>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61bb      	str	r3, [r7, #24]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004896:	f002 fa7f 	bl	8006d98 <vPortValidateInterruptPriority>
	__asm volatile
 800489a:	f3ef 8211 	mrs	r2, BASEPRI
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	617a      	str	r2, [r7, #20]
 80048b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80048b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d22b      	bcs.n	800491e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e0:	d112      	bne.n	8004908 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	3324      	adds	r3, #36	; 0x24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 f952 	bl	8005b98 <xTaskRemoveFromEventList>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e007      	b.n	8004918 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800490c:	3301      	adds	r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	b25a      	sxtb	r2, r3
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004918:	2301      	movs	r3, #1
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
 800491c:	e001      	b.n	8004922 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800491e:	2300      	movs	r3, #0
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f383 8811 	msr	BASEPRI, r3
}
 800492c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004930:	4618      	mov	r0, r3
 8004932:	3738      	adds	r7, #56	; 0x38
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08c      	sub	sp, #48	; 0x30
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <xQueueReceive+0x30>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	623b      	str	r3, [r7, #32]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <xQueueReceive+0x3e>
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <xQueueReceive+0x42>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <xQueueReceive+0x44>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <xQueueReceive+0x5e>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	61fb      	str	r3, [r7, #28]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004996:	f001 fac1 	bl	8005f1c <xTaskGetSchedulerState>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <xQueueReceive+0x6e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <xQueueReceive+0x72>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueReceive+0x74>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueReceive+0x8e>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61bb      	str	r3, [r7, #24]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049c6:	f002 f905 	bl	8006bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01f      	beq.n	8004a16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049da:	f000 fabe 	bl	8004f5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1e5a      	subs	r2, r3, #1
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00f      	beq.n	8004a0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	3310      	adds	r3, #16
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f8d0 	bl	8005b98 <xTaskRemoveFromEventList>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049fe:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <xQueueReceive+0x1bc>)
 8004a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a0e:	f002 f911 	bl	8006c34 <vPortExitCritical>
				return pdPASS;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e069      	b.n	8004aea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d103      	bne.n	8004a24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a1c:	f002 f90a 	bl	8006c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e062      	b.n	8004aea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a2a:	f107 0310 	add.w	r3, r7, #16
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f916 	bl	8005c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a38:	f002 f8fc 	bl	8006c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a3c:	f000 fe82 	bl	8005744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a40:	f002 f8c8 	bl	8006bd4 <vPortEnterCritical>
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a50:	d103      	bne.n	8004a5a <xQueueReceive+0x122>
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a66:	d103      	bne.n	8004a70 <xQueueReceive+0x138>
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a70:	f002 f8e0 	bl	8006c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a74:	1d3a      	adds	r2, r7, #4
 8004a76:	f107 0310 	add.w	r3, r7, #16
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f905 	bl	8005c8c <xTaskCheckForTimeOut>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d123      	bne.n	8004ad0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8a:	f000 fade 	bl	800504a <prvIsQueueEmpty>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 f82b 	bl	8005af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa4:	f000 fa7f 	bl	8004fa6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004aa8:	f000 fe5a 	bl	8005760 <xTaskResumeAll>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d189      	bne.n	80049c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <xQueueReceive+0x1bc>)
 8004ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	e780      	b.n	80049c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac6:	f000 fa6e 	bl	8004fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aca:	f000 fe49 	bl	8005760 <xTaskResumeAll>
 8004ace:	e77a      	b.n	80049c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad2:	f000 fa68 	bl	8004fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ad6:	f000 fe43 	bl	8005760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004adc:	f000 fab5 	bl	800504a <prvIsQueueEmpty>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f43f af6f 	beq.w	80049c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3730      	adds	r7, #48	; 0x30
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08e      	sub	sp, #56	; 0x38
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	623b      	str	r3, [r7, #32]
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	61fb      	str	r3, [r7, #28]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b48:	f001 f9e8 	bl	8005f1c <xTaskGetSchedulerState>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <xQueueSemaphoreTake+0x60>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <xQueueSemaphoreTake+0x64>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <xQueueSemaphoreTake+0x66>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	61bb      	str	r3, [r7, #24]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b78:	f002 f82c 	bl	8006bd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d024      	beq.n	8004bd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	1e5a      	subs	r2, r3, #1
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b98:	f001 fb36 	bl	8006208 <pvTaskIncrementMutexHeldCount>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00f      	beq.n	8004bca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	3310      	adds	r3, #16
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fff2 	bl	8005b98 <xTaskRemoveFromEventList>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bba:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <xQueueSemaphoreTake+0x214>)
 8004bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bca:	f002 f833 	bl	8006c34 <vPortExitCritical>
				return pdPASS;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e097      	b.n	8004d02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d111      	bne.n	8004bfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	617b      	str	r3, [r7, #20]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bf4:	f002 f81e 	bl	8006c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e082      	b.n	8004d02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 f82a 	bl	8005c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c10:	f002 f810 	bl	8006c34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c14:	f000 fd96 	bl	8005744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c18:	f001 ffdc 	bl	8006bd4 <vPortEnterCritical>
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c28:	d103      	bne.n	8004c32 <xQueueSemaphoreTake+0x13a>
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c3e:	d103      	bne.n	8004c48 <xQueueSemaphoreTake+0x150>
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c48:	f001 fff4 	bl	8006c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c4c:	463a      	mov	r2, r7
 8004c4e:	f107 030c 	add.w	r3, r7, #12
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 f819 	bl	8005c8c <xTaskCheckForTimeOut>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d132      	bne.n	8004cc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c62:	f000 f9f2 	bl	800504a <prvIsQueueEmpty>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d026      	beq.n	8004cba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004c74:	f001 ffae 	bl	8006bd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f96b 	bl	8005f58 <xTaskPriorityInherit>
 8004c82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c84:	f001 ffd6 	bl	8006c34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	3324      	adds	r3, #36	; 0x24
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 ff31 	bl	8005af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c98:	f000 f985 	bl	8004fa6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c9c:	f000 fd60 	bl	8005760 <xTaskResumeAll>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f47f af68 	bne.w	8004b78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004ca8:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <xQueueSemaphoreTake+0x214>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	e75e      	b.n	8004b78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cbc:	f000 f973 	bl	8004fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cc0:	f000 fd4e 	bl	8005760 <xTaskResumeAll>
 8004cc4:	e758      	b.n	8004b78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cc8:	f000 f96d 	bl	8004fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ccc:	f000 fd48 	bl	8005760 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cd2:	f000 f9ba 	bl	800504a <prvIsQueueEmpty>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f43f af4d 	beq.w	8004b78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00d      	beq.n	8004d00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004ce4:	f001 ff76 	bl	8006bd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cea:	f000 f8b4 	bl	8004e56 <prvGetDisinheritPriorityAfterTimeout>
 8004cee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 fa04 	bl	8006104 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cfc:	f001 ff9a 	bl	8006c34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3738      	adds	r7, #56	; 0x38
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	623b      	str	r3, [r7, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <xQueueReceiveFromISR+0x3a>
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <xQueueReceiveFromISR+0x3e>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <xQueueReceiveFromISR+0x40>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	61fb      	str	r3, [r7, #28]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d6a:	f002 f815 	bl	8006d98 <vPortValidateInterruptPriority>
	__asm volatile
 8004d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	61ba      	str	r2, [r7, #24]
 8004d84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02f      	beq.n	8004df6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da4:	f000 f8d9 	bl	8004f5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	1e5a      	subs	r2, r3, #1
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db8:	d112      	bne.n	8004de0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d016      	beq.n	8004df0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fee6 	bl	8005b98 <xTaskRemoveFromEventList>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e007      	b.n	8004df0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de4:	3301      	adds	r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	b25a      	sxtb	r2, r3
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004df0:	2301      	movs	r3, #1
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
 8004df4:	e001      	b.n	8004dfa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f383 8811 	msr	BASEPRI, r3
}
 8004e04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3738      	adds	r7, #56	; 0x38
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <vQueueDelete+0x28>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60bb      	str	r3, [r7, #8]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f95f 	bl	80050fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f002 f8b1 	bl	8006fb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d006      	beq.n	8004e74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e001      	b.n	8004e78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e78:	68fb      	ldr	r3, [r7, #12]
	}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b086      	sub	sp, #24
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d14d      	bne.n	8004f48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f8b9 	bl	8006028 <xTaskPriorityDisinherit>
 8004eb6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	e043      	b.n	8004f48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d119      	bne.n	8004efa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6858      	ldr	r0, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	f002 fc52 	bl	800777a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	441a      	add	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d32b      	bcc.n	8004f48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	605a      	str	r2, [r3, #4]
 8004ef8:	e026      	b.n	8004f48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68d8      	ldr	r0, [r3, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	461a      	mov	r2, r3
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	f002 fc38 	bl	800777a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	425b      	negs	r3, r3
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d207      	bcs.n	8004f36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	425b      	negs	r3, r3
 8004f30:	441a      	add	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d105      	bne.n	8004f48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f50:	697b      	ldr	r3, [r7, #20]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d018      	beq.n	8004f9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	441a      	add	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d303      	bcc.n	8004f8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68d9      	ldr	r1, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	461a      	mov	r2, r3
 8004f98:	6838      	ldr	r0, [r7, #0]
 8004f9a:	f002 fbee 	bl	800777a <memcpy>
	}
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fae:	f001 fe11 	bl	8006bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fba:	e011      	b.n	8004fe0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d012      	beq.n	8004fea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3324      	adds	r3, #36	; 0x24
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fde5 	bl	8005b98 <xTaskRemoveFromEventList>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fd4:	f000 febc 	bl	8005d50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dce9      	bgt.n	8004fbc <prvUnlockQueue+0x16>
 8004fe8:	e000      	b.n	8004fec <prvUnlockQueue+0x46>
					break;
 8004fea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	22ff      	movs	r2, #255	; 0xff
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ff4:	f001 fe1e 	bl	8006c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ff8:	f001 fdec 	bl	8006bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005002:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005004:	e011      	b.n	800502a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d012      	beq.n	8005034 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3310      	adds	r3, #16
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fdc0 	bl	8005b98 <xTaskRemoveFromEventList>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800501e:	f000 fe97 	bl	8005d50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	3b01      	subs	r3, #1
 8005026:	b2db      	uxtb	r3, r3
 8005028:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800502a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800502e:	2b00      	cmp	r3, #0
 8005030:	dce9      	bgt.n	8005006 <prvUnlockQueue+0x60>
 8005032:	e000      	b.n	8005036 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005034:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800503e:	f001 fdf9 	bl	8006c34 <vPortExitCritical>
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005052:	f001 fdbf 	bl	8006bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800505e:	2301      	movs	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	e001      	b.n	8005068 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005068:	f001 fde4 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 800506c:	68fb      	ldr	r3, [r7, #12]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800507e:	f001 fda9 	bl	8006bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	429a      	cmp	r2, r3
 800508c:	d102      	bne.n	8005094 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800508e:	2301      	movs	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e001      	b.n	8005098 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005098:	f001 fdcc 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e014      	b.n	80050e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050b8:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <vQueueAddToRegistry+0x50>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <vQueueAddToRegistry+0x50>)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <vQueueAddToRegistry+0x50>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050da:	e006      	b.n	80050ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	d9e7      	bls.n	80050b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	200008cc 	.word	0x200008cc

080050fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e016      	b.n	8005138 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <vQueueUnregisterQueue+0x50>)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d10b      	bne.n	8005132 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <vQueueUnregisterQueue+0x50>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2100      	movs	r1, #0
 8005120:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <vQueueUnregisterQueue+0x50>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	2200      	movs	r2, #0
 800512e:	605a      	str	r2, [r3, #4]
				break;
 8005130:	e006      	b.n	8005140 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b07      	cmp	r3, #7
 800513c:	d9e5      	bls.n	800510a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	200008cc 	.word	0x200008cc

08005150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005160:	f001 fd38 	bl	8006bd4 <vPortEnterCritical>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800516a:	b25b      	sxtb	r3, r3
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005170:	d103      	bne.n	800517a <vQueueWaitForMessageRestricted+0x2a>
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005180:	b25b      	sxtb	r3, r3
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005186:	d103      	bne.n	8005190 <vQueueWaitForMessageRestricted+0x40>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005190:	f001 fd50 	bl	8006c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3324      	adds	r3, #36	; 0x24
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fccb 	bl	8005b40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f7ff fefb 	bl	8004fa6 <prvUnlockQueue>
	}
 80051b0:	bf00      	nop
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	; 0x38
 80051bc:	af04      	add	r7, sp, #16
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	623b      	str	r3, [r7, #32]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <xTaskCreateStatic+0x46>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	61fb      	str	r3, [r7, #28]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051fe:	23a8      	movs	r3, #168	; 0xa8
 8005200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2ba8      	cmp	r3, #168	; 0xa8
 8005206:	d00a      	beq.n	800521e <xTaskCreateStatic+0x66>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	61bb      	str	r3, [r7, #24]
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800521e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01e      	beq.n	8005264 <xTaskCreateStatic+0xac>
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005234:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2202      	movs	r2, #2
 800523a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800523e:	2300      	movs	r3, #0
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	f107 0314 	add.w	r3, r7, #20
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f850 	bl	80052fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800525c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525e:	f000 f8f3 	bl	8005448 <prvAddNewTaskToReadyList>
 8005262:	e001      	b.n	8005268 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005268:	697b      	ldr	r3, [r7, #20]
	}
 800526a:	4618      	mov	r0, r3
 800526c:	3728      	adds	r7, #40	; 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005272:	b580      	push	{r7, lr}
 8005274:	b08c      	sub	sp, #48	; 0x30
 8005276:	af04      	add	r7, sp, #16
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f001 fdc6 	bl	8006e18 <pvPortMalloc>
 800528c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005294:	20a8      	movs	r0, #168	; 0xa8
 8005296:	f001 fdbf 	bl	8006e18 <pvPortMalloc>
 800529a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
 80052a8:	e005      	b.n	80052b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f001 fe80 	bl	8006fb0 <vPortFree>
 80052b0:	e001      	b.n	80052b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d017      	beq.n	80052ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	2300      	movs	r3, #0
 80052c8:	9303      	str	r3, [sp, #12]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	9302      	str	r3, [sp, #8]
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f80e 	bl	80052fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052e0:	69f8      	ldr	r0, [r7, #28]
 80052e2:	f000 f8b1 	bl	8005448 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052e6:	2301      	movs	r3, #1
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e002      	b.n	80052f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052f2:	69bb      	ldr	r3, [r7, #24]
	}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	461a      	mov	r2, r3
 8005314:	21a5      	movs	r1, #165	; 0xa5
 8005316:	f002 f95f 	bl	80075d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005324:	3b01      	subs	r3, #1
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f023 0307 	bic.w	r3, r3, #7
 8005332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <prvInitialiseNewTask+0x58>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	617b      	str	r3, [r7, #20]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01f      	beq.n	800539a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e012      	b.n	8005386 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	7819      	ldrb	r1, [r3, #0]
 8005368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	3334      	adds	r3, #52	; 0x34
 8005370:	460a      	mov	r2, r1
 8005372:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d9e9      	bls.n	8005360 <prvInitialiseNewTask+0x64>
 800538c:	e000      	b.n	8005390 <prvInitialiseNewTask+0x94>
			{
				break;
 800538e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005398:	e003      	b.n	80053a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	2b37      	cmp	r3, #55	; 0x37
 80053a6:	d901      	bls.n	80053ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053a8:	2337      	movs	r3, #55	; 0x37
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	2200      	movs	r2, #0
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	3304      	adds	r3, #4
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fe0a 	bl	8003fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	3318      	adds	r3, #24
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fe05 	bl	8003fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	3354      	adds	r3, #84	; 0x54
 80053fc:	224c      	movs	r2, #76	; 0x4c
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f002 f8e9 	bl	80075d8 <memset>
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	4a0c      	ldr	r2, [pc, #48]	; (800543c <prvInitialiseNewTask+0x140>)
 800540a:	659a      	str	r2, [r3, #88]	; 0x58
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <prvInitialiseNewTask+0x144>)
 8005410:	65da      	str	r2, [r3, #92]	; 0x5c
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <prvInitialiseNewTask+0x148>)
 8005416:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	69b8      	ldr	r0, [r7, #24]
 800541e:	f001 faa9 	bl	8006974 <pxPortInitialiseStack>
 8005422:	4602      	mov	r2, r0
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005434:	bf00      	nop
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20001b18 	.word	0x20001b18
 8005440:	20001b80 	.word	0x20001b80
 8005444:	20001be8 	.word	0x20001be8

08005448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005450:	f001 fbc0 	bl	8006bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005454:	4b2d      	ldr	r3, [pc, #180]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	4a2c      	ldr	r2, [pc, #176]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 800545c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800545e:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005466:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800546c:	4b27      	ldr	r3, [pc, #156]	; (800550c <prvAddNewTaskToReadyList+0xc4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d110      	bne.n	8005496 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005474:	f000 fc90 	bl	8005d98 <prvInitialiseTaskLists>
 8005478:	e00d      	b.n	8005496 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800547a:	4b26      	ldr	r3, [pc, #152]	; (8005514 <prvAddNewTaskToReadyList+0xcc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005482:	4b23      	ldr	r3, [pc, #140]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	429a      	cmp	r2, r3
 800548e:	d802      	bhi.n	8005496 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <prvAddNewTaskToReadyList+0xd0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <prvAddNewTaskToReadyList+0xd0>)
 800549e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054a0:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <prvAddNewTaskToReadyList+0xd0>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <prvAddNewTaskToReadyList+0xd4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d903      	bls.n	80054bc <prvAddNewTaskToReadyList+0x74>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	4a18      	ldr	r2, [pc, #96]	; (800551c <prvAddNewTaskToReadyList+0xd4>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4a15      	ldr	r2, [pc, #84]	; (8005520 <prvAddNewTaskToReadyList+0xd8>)
 80054ca:	441a      	add	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f7fe fd8f 	bl	8003ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054d8:	f001 fbac 	bl	8006c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <prvAddNewTaskToReadyList+0xcc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00e      	beq.n	8005502 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <prvAddNewTaskToReadyList+0xc8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d207      	bcs.n	8005502 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <prvAddNewTaskToReadyList+0xdc>)
 80054f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000de0 	.word	0x20000de0
 8005510:	2000090c 	.word	0x2000090c
 8005514:	20000dec 	.word	0x20000dec
 8005518:	20000dfc 	.word	0x20000dfc
 800551c:	20000de8 	.word	0x20000de8
 8005520:	20000910 	.word	0x20000910
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b37      	cmp	r3, #55	; 0x37
 800553a:	d90a      	bls.n	8005552 <vTaskPrioritySet+0x2a>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	60fb      	str	r3, [r7, #12]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b37      	cmp	r3, #55	; 0x37
 8005556:	d901      	bls.n	800555c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005558:	2337      	movs	r3, #55	; 0x37
 800555a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800555c:	f001 fb3a 	bl	8006bd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <vTaskPrioritySet+0x44>
 8005566:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <vTaskPrioritySet+0x12c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	e000      	b.n	800556e <vTaskPrioritySet+0x46>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005574:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d063      	beq.n	8005646 <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	429a      	cmp	r2, r3
 8005584:	d90d      	bls.n	80055a2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8005586:	4b33      	ldr	r3, [pc, #204]	; (8005654 <vTaskPrioritySet+0x12c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	429a      	cmp	r2, r3
 800558e:	d00f      	beq.n	80055b0 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005590:	4b30      	ldr	r3, [pc, #192]	; (8005654 <vTaskPrioritySet+0x12c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d309      	bcc.n	80055b0 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e006      	b.n	80055b0 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80055a2:	4b2c      	ldr	r3, [pc, #176]	; (8005654 <vTaskPrioritySet+0x12c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d101      	bne.n	80055b0 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	429a      	cmp	r2, r3
 80055c0:	d102      	bne.n	80055c8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	db04      	blt.n	80055e0 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	6959      	ldr	r1, [r3, #20]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <vTaskPrioritySet+0x130>)
 80055f0:	4413      	add	r3, r2
 80055f2:	4299      	cmp	r1, r3
 80055f4:	d11c      	bne.n	8005630 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fd58 	bl	80040b0 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4b15      	ldr	r3, [pc, #84]	; (800565c <vTaskPrioritySet+0x134>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d903      	bls.n	8005614 <vTaskPrioritySet+0xec>
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a12      	ldr	r2, [pc, #72]	; (800565c <vTaskPrioritySet+0x134>)
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <vTaskPrioritySet+0x130>)
 8005622:	441a      	add	r2, r3
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f7fe fce3 	bl	8003ff6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005636:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <vTaskPrioritySet+0x138>)
 8005638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005646:	f001 faf5 	bl	8006c34 <vPortExitCritical>
	}
 800564a:	bf00      	nop
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2000090c 	.word	0x2000090c
 8005658:	20000910 	.word	0x20000910
 800565c:	20000de8 	.word	0x20000de8
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005672:	463a      	mov	r2, r7
 8005674:	1d39      	adds	r1, r7, #4
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fc5a 	bl	8003f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	9202      	str	r2, [sp, #8]
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	2300      	movs	r3, #0
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	2300      	movs	r3, #0
 8005690:	460a      	mov	r2, r1
 8005692:	4924      	ldr	r1, [pc, #144]	; (8005724 <vTaskStartScheduler+0xc0>)
 8005694:	4824      	ldr	r0, [pc, #144]	; (8005728 <vTaskStartScheduler+0xc4>)
 8005696:	f7ff fd8f 	bl	80051b8 <xTaskCreateStatic>
 800569a:	4603      	mov	r3, r0
 800569c:	4a23      	ldr	r2, [pc, #140]	; (800572c <vTaskStartScheduler+0xc8>)
 800569e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056a0:	4b22      	ldr	r3, [pc, #136]	; (800572c <vTaskStartScheduler+0xc8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056a8:	2301      	movs	r3, #1
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e001      	b.n	80056b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d102      	bne.n	80056be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056b8:	f000 fe0e 	bl	80062d8 <xTimerCreateTimerTask>
 80056bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d11b      	bne.n	80056fc <vTaskStartScheduler+0x98>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	613b      	str	r3, [r7, #16]
}
 80056d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <vTaskStartScheduler+0xcc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3354      	adds	r3, #84	; 0x54
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <vTaskStartScheduler+0xd0>)
 80056e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <vTaskStartScheduler+0xd4>)
 80056e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <vTaskStartScheduler+0xd8>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056f0:	4b13      	ldr	r3, [pc, #76]	; (8005740 <vTaskStartScheduler+0xdc>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056f6:	f001 f9cb 	bl	8006a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056fa:	e00e      	b.n	800571a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005702:	d10a      	bne.n	800571a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	60fb      	str	r3, [r7, #12]
}
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <vTaskStartScheduler+0xb4>
}
 800571a:	bf00      	nop
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	08007c74 	.word	0x08007c74
 8005728:	08005d69 	.word	0x08005d69
 800572c:	20000e04 	.word	0x20000e04
 8005730:	2000090c 	.word	0x2000090c
 8005734:	20000068 	.word	0x20000068
 8005738:	20000e00 	.word	0x20000e00
 800573c:	20000dec 	.word	0x20000dec
 8005740:	20000de4 	.word	0x20000de4

08005744 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <vTaskSuspendAll+0x18>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	4a03      	ldr	r2, [pc, #12]	; (800575c <vTaskSuspendAll+0x18>)
 8005750:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005752:	bf00      	nop
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000e08 	.word	0x20000e08

08005760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800576e:	4b42      	ldr	r3, [pc, #264]	; (8005878 <xTaskResumeAll+0x118>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xTaskResumeAll+0x2c>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	603b      	str	r3, [r7, #0]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800578c:	f001 fa22 	bl	8006bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005790:	4b39      	ldr	r3, [pc, #228]	; (8005878 <xTaskResumeAll+0x118>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3b01      	subs	r3, #1
 8005796:	4a38      	ldr	r2, [pc, #224]	; (8005878 <xTaskResumeAll+0x118>)
 8005798:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579a:	4b37      	ldr	r3, [pc, #220]	; (8005878 <xTaskResumeAll+0x118>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d162      	bne.n	8005868 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057a2:	4b36      	ldr	r3, [pc, #216]	; (800587c <xTaskResumeAll+0x11c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d05e      	beq.n	8005868 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057aa:	e02f      	b.n	800580c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ac:	4b34      	ldr	r3, [pc, #208]	; (8005880 <xTaskResumeAll+0x120>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3318      	adds	r3, #24
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe fc79 	bl	80040b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc74 	bl	80040b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	4b2d      	ldr	r3, [pc, #180]	; (8005884 <xTaskResumeAll+0x124>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d903      	bls.n	80057dc <xTaskResumeAll+0x7c>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <xTaskResumeAll+0x124>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4a27      	ldr	r2, [pc, #156]	; (8005888 <xTaskResumeAll+0x128>)
 80057ea:	441a      	add	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7fe fbff 	bl	8003ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4b23      	ldr	r3, [pc, #140]	; (800588c <xTaskResumeAll+0x12c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005806:	4b22      	ldr	r3, [pc, #136]	; (8005890 <xTaskResumeAll+0x130>)
 8005808:	2201      	movs	r2, #1
 800580a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800580c:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <xTaskResumeAll+0x120>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1cb      	bne.n	80057ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800581a:	f000 fb5f 	bl	8005edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800581e:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <xTaskResumeAll+0x134>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d010      	beq.n	800584c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800582a:	f000 f847 	bl	80058bc <xTaskIncrementTick>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005834:	4b16      	ldr	r3, [pc, #88]	; (8005890 <xTaskResumeAll+0x130>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3b01      	subs	r3, #1
 800583e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f1      	bne.n	800582a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005846:	4b13      	ldr	r3, [pc, #76]	; (8005894 <xTaskResumeAll+0x134>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <xTaskResumeAll+0x130>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <xTaskResumeAll+0x138>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005868:	f001 f9e4 	bl	8006c34 <vPortExitCritical>

	return xAlreadyYielded;
 800586c:	68bb      	ldr	r3, [r7, #8]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000e08 	.word	0x20000e08
 800587c:	20000de0 	.word	0x20000de0
 8005880:	20000da0 	.word	0x20000da0
 8005884:	20000de8 	.word	0x20000de8
 8005888:	20000910 	.word	0x20000910
 800588c:	2000090c 	.word	0x2000090c
 8005890:	20000df4 	.word	0x20000df4
 8005894:	20000df0 	.word	0x20000df0
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <xTaskGetTickCount+0x1c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058a8:	687b      	ldr	r3, [r7, #4]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000de4 	.word	0x20000de4

080058bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c6:	4b4f      	ldr	r3, [pc, #316]	; (8005a04 <xTaskIncrementTick+0x148>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f040 808f 	bne.w	80059ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058d0:	4b4d      	ldr	r3, [pc, #308]	; (8005a08 <xTaskIncrementTick+0x14c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058d8:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <xTaskIncrementTick+0x14c>)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d120      	bne.n	8005926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058e4:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <xTaskIncrementTick+0x150>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <xTaskIncrementTick+0x48>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <xTaskIncrementTick+0x46>
 8005904:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <xTaskIncrementTick+0x150>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <xTaskIncrementTick+0x154>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3f      	ldr	r2, [pc, #252]	; (8005a0c <xTaskIncrementTick+0x150>)
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	4a3f      	ldr	r2, [pc, #252]	; (8005a10 <xTaskIncrementTick+0x154>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	4b3e      	ldr	r3, [pc, #248]	; (8005a14 <xTaskIncrementTick+0x158>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	4a3d      	ldr	r2, [pc, #244]	; (8005a14 <xTaskIncrementTick+0x158>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	f000 fadb 	bl	8005edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005926:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <xTaskIncrementTick+0x15c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d349      	bcc.n	80059c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005930:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <xTaskIncrementTick+0x150>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593a:	4b37      	ldr	r3, [pc, #220]	; (8005a18 <xTaskIncrementTick+0x15c>)
 800593c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005940:	601a      	str	r2, [r3, #0]
					break;
 8005942:	e03f      	b.n	80059c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <xTaskIncrementTick+0x150>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d203      	bcs.n	8005964 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800595c:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <xTaskIncrementTick+0x15c>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005962:	e02f      	b.n	80059c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fba1 	bl	80040b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	3318      	adds	r3, #24
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe fb98 	bl	80040b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <xTaskIncrementTick+0x160>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d903      	bls.n	8005994 <xTaskIncrementTick+0xd8>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <xTaskIncrementTick+0x160>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <xTaskIncrementTick+0x164>)
 80059a2:	441a      	add	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fe fb23 	bl	8003ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <xTaskIncrementTick+0x168>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d3b8      	bcc.n	8005930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c2:	e7b5      	b.n	8005930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059c4:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <xTaskIncrementTick+0x168>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ca:	4915      	ldr	r1, [pc, #84]	; (8005a20 <xTaskIncrementTick+0x164>)
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d901      	bls.n	80059e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059dc:	2301      	movs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059e0:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <xTaskIncrementTick+0x16c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e004      	b.n	80059f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059ee:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <xTaskIncrementTick+0x170>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a0d      	ldr	r2, [pc, #52]	; (8005a2c <xTaskIncrementTick+0x170>)
 80059f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059f8:	697b      	ldr	r3, [r7, #20]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000e08 	.word	0x20000e08
 8005a08:	20000de4 	.word	0x20000de4
 8005a0c:	20000d98 	.word	0x20000d98
 8005a10:	20000d9c 	.word	0x20000d9c
 8005a14:	20000df8 	.word	0x20000df8
 8005a18:	20000e00 	.word	0x20000e00
 8005a1c:	20000de8 	.word	0x20000de8
 8005a20:	20000910 	.word	0x20000910
 8005a24:	2000090c 	.word	0x2000090c
 8005a28:	20000df4 	.word	0x20000df4
 8005a2c:	20000df0 	.word	0x20000df0

08005a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a36:	4b2a      	ldr	r3, [pc, #168]	; (8005ae0 <vTaskSwitchContext+0xb0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a3e:	4b29      	ldr	r3, [pc, #164]	; (8005ae4 <vTaskSwitchContext+0xb4>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a44:	e046      	b.n	8005ad4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a46:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <vTaskSwitchContext+0xb4>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4c:	4b26      	ldr	r3, [pc, #152]	; (8005ae8 <vTaskSwitchContext+0xb8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e010      	b.n	8005a76 <vTaskSwitchContext+0x46>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	607b      	str	r3, [r7, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vTaskSwitchContext+0x3e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	491d      	ldr	r1, [pc, #116]	; (8005aec <vTaskSwitchContext+0xbc>)
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0e4      	beq.n	8005a54 <vTaskSwitchContext+0x24>
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <vTaskSwitchContext+0xbc>)
 8005a96:	4413      	add	r3, r2
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d104      	bne.n	8005aba <vTaskSwitchContext+0x8a>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <vTaskSwitchContext+0xc0>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <vTaskSwitchContext+0xb8>)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <vTaskSwitchContext+0xc0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3354      	adds	r3, #84	; 0x54
 8005ad0:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <vTaskSwitchContext+0xc4>)
 8005ad2:	6013      	str	r3, [r2, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000e08 	.word	0x20000e08
 8005ae4:	20000df4 	.word	0x20000df4
 8005ae8:	20000de8 	.word	0x20000de8
 8005aec:	20000910 	.word	0x20000910
 8005af0:	2000090c 	.word	0x2000090c
 8005af4:	20000068 	.word	0x20000068

08005af8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	60fb      	str	r3, [r7, #12]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <vTaskPlaceOnEventList+0x44>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3318      	adds	r3, #24
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fe fa89 	bl	800403e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	6838      	ldr	r0, [r7, #0]
 8005b30:	f000 fb7e 	bl	8006230 <prvAddCurrentTaskToDelayedList>
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2000090c 	.word	0x2000090c

08005b40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	617b      	str	r3, [r7, #20]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3318      	adds	r3, #24
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fe fa40 	bl	8003ff6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	68b8      	ldr	r0, [r7, #8]
 8005b86:	f000 fb53 	bl	8006230 <prvAddCurrentTaskToDelayedList>
	}
 8005b8a:	bf00      	nop
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	2000090c 	.word	0x2000090c

08005b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60fb      	str	r3, [r7, #12]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	3318      	adds	r3, #24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fe fa71 	bl	80040b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bce:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <xTaskRemoveFromEventList+0xb0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d11d      	bne.n	8005c12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fa68 	bl	80040b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <xTaskRemoveFromEventList+0xb4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d903      	bls.n	8005bf4 <xTaskRemoveFromEventList+0x5c>
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <xTaskRemoveFromEventList+0xb4>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <xTaskRemoveFromEventList+0xb8>)
 8005c02:	441a      	add	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7fe f9f3 	bl	8003ff6 <vListInsertEnd>
 8005c10:	e005      	b.n	8005c1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3318      	adds	r3, #24
 8005c16:	4619      	mov	r1, r3
 8005c18:	480e      	ldr	r0, [pc, #56]	; (8005c54 <xTaskRemoveFromEventList+0xbc>)
 8005c1a:	f7fe f9ec 	bl	8003ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <xTaskRemoveFromEventList+0xc0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d905      	bls.n	8005c38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <xTaskRemoveFromEventList+0xc4>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e001      	b.n	8005c3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c3c:	697b      	ldr	r3, [r7, #20]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000e08 	.word	0x20000e08
 8005c4c:	20000de8 	.word	0x20000de8
 8005c50:	20000910 	.word	0x20000910
 8005c54:	20000da0 	.word	0x20000da0
 8005c58:	2000090c 	.word	0x2000090c
 8005c5c:	20000df4 	.word	0x20000df4

08005c60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <vTaskInternalSetTimeOutState+0x24>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <vTaskInternalSetTimeOutState+0x28>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	605a      	str	r2, [r3, #4]
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	20000df8 	.word	0x20000df8
 8005c88:	20000de4 	.word	0x20000de4

08005c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	613b      	str	r3, [r7, #16]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	60fb      	str	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cce:	f000 ff81 	bl	8006bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cd2:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <xTaskCheckForTimeOut+0xbc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cea:	d102      	bne.n	8005cf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e023      	b.n	8005d3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <xTaskCheckForTimeOut+0xc0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d007      	beq.n	8005d0e <xTaskCheckForTimeOut+0x82>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e015      	b.n	8005d3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d20b      	bcs.n	8005d30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ff9b 	bl	8005c60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	e004      	b.n	8005d3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d36:	2301      	movs	r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d3a:	f000 ff7b 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000de4 	.word	0x20000de4
 8005d4c:	20000df8 	.word	0x20000df8

08005d50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d54:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <vTaskMissedYield+0x14>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
}
 8005d5a:	bf00      	nop
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000df4 	.word	0x20000df4

08005d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d70:	f000 f852 	bl	8005e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <prvIdleTask+0x28>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d9f9      	bls.n	8005d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <prvIdleTask+0x2c>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d8c:	e7f0      	b.n	8005d70 <prvIdleTask+0x8>
 8005d8e:	bf00      	nop
 8005d90:	20000910 	.word	0x20000910
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	e00c      	b.n	8005dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <prvInitialiseTaskLists+0x60>)
 8005db0:	4413      	add	r3, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe f8f2 	bl	8003f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b37      	cmp	r3, #55	; 0x37
 8005dc2:	d9ef      	bls.n	8005da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dc4:	480d      	ldr	r0, [pc, #52]	; (8005dfc <prvInitialiseTaskLists+0x64>)
 8005dc6:	f7fe f8e9 	bl	8003f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dca:	480d      	ldr	r0, [pc, #52]	; (8005e00 <prvInitialiseTaskLists+0x68>)
 8005dcc:	f7fe f8e6 	bl	8003f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd0:	480c      	ldr	r0, [pc, #48]	; (8005e04 <prvInitialiseTaskLists+0x6c>)
 8005dd2:	f7fe f8e3 	bl	8003f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dd6:	480c      	ldr	r0, [pc, #48]	; (8005e08 <prvInitialiseTaskLists+0x70>)
 8005dd8:	f7fe f8e0 	bl	8003f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ddc:	480b      	ldr	r0, [pc, #44]	; (8005e0c <prvInitialiseTaskLists+0x74>)
 8005dde:	f7fe f8dd 	bl	8003f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <prvInitialiseTaskLists+0x78>)
 8005de4:	4a05      	ldr	r2, [pc, #20]	; (8005dfc <prvInitialiseTaskLists+0x64>)
 8005de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <prvInitialiseTaskLists+0x7c>)
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <prvInitialiseTaskLists+0x68>)
 8005dec:	601a      	str	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000910 	.word	0x20000910
 8005dfc:	20000d70 	.word	0x20000d70
 8005e00:	20000d84 	.word	0x20000d84
 8005e04:	20000da0 	.word	0x20000da0
 8005e08:	20000db4 	.word	0x20000db4
 8005e0c:	20000dcc 	.word	0x20000dcc
 8005e10:	20000d98 	.word	0x20000d98
 8005e14:	20000d9c 	.word	0x20000d9c

08005e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e1e:	e019      	b.n	8005e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e20:	f000 fed8 	bl	8006bd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e24:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <prvCheckTasksWaitingTermination+0x50>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe f93d 	bl	80040b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <prvCheckTasksWaitingTermination+0x54>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <prvCheckTasksWaitingTermination+0x54>)
 8005e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <prvCheckTasksWaitingTermination+0x58>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <prvCheckTasksWaitingTermination+0x58>)
 8005e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e4a:	f000 fef3 	bl	8006c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f810 	bl	8005e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <prvCheckTasksWaitingTermination+0x58>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e1      	bne.n	8005e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000db4 	.word	0x20000db4
 8005e6c:	20000de0 	.word	0x20000de0
 8005e70:	20000dc8 	.word	0x20000dc8

08005e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3354      	adds	r3, #84	; 0x54
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 fbc1 	bl	8007608 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 f88b 	bl	8006fb0 <vPortFree>
				vPortFree( pxTCB );
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 f888 	bl	8006fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ea0:	e018      	b.n	8005ed4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d103      	bne.n	8005eb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 f87f 	bl	8006fb0 <vPortFree>
	}
 8005eb2:	e00f      	b.n	8005ed4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d00a      	beq.n	8005ed4 <prvDeleteTCB+0x60>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60fb      	str	r3, [r7, #12]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <prvDeleteTCB+0x5e>
	}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <prvResetNextTaskUnblockTime+0x38>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <prvResetNextTaskUnblockTime+0x3c>)
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ef4:	e008      	b.n	8005f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <prvResetNextTaskUnblockTime+0x38>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <prvResetNextTaskUnblockTime+0x3c>)
 8005f06:	6013      	str	r3, [r2, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20000d98 	.word	0x20000d98
 8005f18:	20000e00 	.word	0x20000e00

08005f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <xTaskGetSchedulerState+0x34>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	e008      	b.n	8005f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <xTaskGetSchedulerState+0x38>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e001      	b.n	8005f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f42:	687b      	ldr	r3, [r7, #4]
	}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000dec 	.word	0x20000dec
 8005f54:	20000e08 	.word	0x20000e08

08005f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d051      	beq.n	8006012 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f72:	4b2a      	ldr	r3, [pc, #168]	; (800601c <xTaskPriorityInherit+0xc4>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d241      	bcs.n	8006000 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	db06      	blt.n	8005f92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f84:	4b25      	ldr	r3, [pc, #148]	; (800601c <xTaskPriorityInherit+0xc4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6959      	ldr	r1, [r3, #20]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <xTaskPriorityInherit+0xc8>)
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	d122      	bne.n	8005ff0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	3304      	adds	r3, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe f87e 	bl	80040b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005fb4:	4b19      	ldr	r3, [pc, #100]	; (800601c <xTaskPriorityInherit+0xc4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <xTaskPriorityInherit+0xcc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d903      	bls.n	8005fd2 <xTaskPriorityInherit+0x7a>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <xTaskPriorityInherit+0xcc>)
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <xTaskPriorityInherit+0xc8>)
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f7fe f804 	bl	8003ff6 <vListInsertEnd>
 8005fee:	e004      	b.n	8005ffa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <xTaskPriorityInherit+0xc4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e008      	b.n	8006012 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <xTaskPriorityInherit+0xc4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	429a      	cmp	r2, r3
 800600c:	d201      	bcs.n	8006012 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800600e:	2301      	movs	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006012:	68fb      	ldr	r3, [r7, #12]
	}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	2000090c 	.word	0x2000090c
 8006020:	20000910 	.word	0x20000910
 8006024:	20000de8 	.word	0x20000de8

08006028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d056      	beq.n	80060ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800603e:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <xTaskPriorityDisinherit+0xd0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	429a      	cmp	r2, r3
 8006046:	d00a      	beq.n	800605e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	60fb      	str	r3, [r7, #12]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	60bb      	str	r3, [r7, #8]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	1e5a      	subs	r2, r3, #1
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	429a      	cmp	r2, r3
 8006090:	d02c      	beq.n	80060ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006096:	2b00      	cmp	r3, #0
 8006098:	d128      	bne.n	80060ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe f806 	bl	80040b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <xTaskPriorityDisinherit+0xd4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d903      	bls.n	80060cc <xTaskPriorityDisinherit+0xa4>
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	4a0c      	ldr	r2, [pc, #48]	; (80060fc <xTaskPriorityDisinherit+0xd4>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4a09      	ldr	r2, [pc, #36]	; (8006100 <xTaskPriorityDisinherit+0xd8>)
 80060da:	441a      	add	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7fd ff87 	bl	8003ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060ec:	697b      	ldr	r3, [r7, #20]
	}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	2000090c 	.word	0x2000090c
 80060fc:	20000de8 	.word	0x20000de8
 8006100:	20000910 	.word	0x20000910

08006104 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006112:	2301      	movs	r3, #1
 8006114:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d06a      	beq.n	80061f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60fb      	str	r3, [r7, #12]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d902      	bls.n	800614a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e002      	b.n	8006150 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	429a      	cmp	r2, r3
 8006158:	d04b      	beq.n	80061f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	429a      	cmp	r2, r3
 8006162:	d146      	bne.n	80061f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006164:	4b25      	ldr	r3, [pc, #148]	; (80061fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	429a      	cmp	r2, r3
 800616c:	d10a      	bne.n	8006184 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	60bb      	str	r3, [r7, #8]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	db04      	blt.n	80061a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	6959      	ldr	r1, [r3, #20]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4a13      	ldr	r2, [pc, #76]	; (8006200 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061b2:	4413      	add	r3, r2
 80061b4:	4299      	cmp	r1, r3
 80061b6:	d11c      	bne.n	80061f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fd ff77 	bl	80040b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c6:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d903      	bls.n	80061d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4a07      	ldr	r2, [pc, #28]	; (8006200 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061e4:	441a      	add	r2, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7fd ff02 	bl	8003ff6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f2:	bf00      	nop
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2000090c 	.word	0x2000090c
 8006200:	20000910 	.word	0x20000910
 8006204:	20000de8 	.word	0x20000de8

08006208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <pvTaskIncrementMutexHeldCount+0x24>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <pvTaskIncrementMutexHeldCount+0x24>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800621a:	3201      	adds	r2, #1
 800621c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800621e:	4b03      	ldr	r3, [pc, #12]	; (800622c <pvTaskIncrementMutexHeldCount+0x24>)
 8006220:	681b      	ldr	r3, [r3, #0]
	}
 8006222:	4618      	mov	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	2000090c 	.word	0x2000090c

08006230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800623a:	4b21      	ldr	r3, [pc, #132]	; (80062c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006240:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3304      	adds	r3, #4
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd ff32 	bl	80040b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006252:	d10a      	bne.n	800626a <prvAddCurrentTaskToDelayedList+0x3a>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800625a:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4819      	ldr	r0, [pc, #100]	; (80062c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006264:	f7fd fec7 	bl	8003ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006268:	e026      	b.n	80062b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4413      	add	r3, r2
 8006270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006272:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	429a      	cmp	r2, r3
 8006280:	d209      	bcs.n	8006296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7fd fed5 	bl	800403e <vListInsert>
}
 8006294:	e010      	b.n	80062b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006296:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3304      	adds	r3, #4
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f7fd fecb 	bl	800403e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d202      	bcs.n	80062b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6013      	str	r3, [r2, #0]
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000de4 	.word	0x20000de4
 80062c4:	2000090c 	.word	0x2000090c
 80062c8:	20000dcc 	.word	0x20000dcc
 80062cc:	20000d9c 	.word	0x20000d9c
 80062d0:	20000d98 	.word	0x20000d98
 80062d4:	20000e00 	.word	0x20000e00

080062d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	; 0x28
 80062dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062e2:	f000 fb07 	bl	80068f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <xTimerCreateTimerTask+0x80>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d021      	beq.n	8006332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062f6:	1d3a      	adds	r2, r7, #4
 80062f8:	f107 0108 	add.w	r1, r7, #8
 80062fc:	f107 030c 	add.w	r3, r7, #12
 8006300:	4618      	mov	r0, r3
 8006302:	f7fd fe31 	bl	8003f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	9202      	str	r2, [sp, #8]
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	2302      	movs	r3, #2
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	460a      	mov	r2, r1
 8006318:	4910      	ldr	r1, [pc, #64]	; (800635c <xTimerCreateTimerTask+0x84>)
 800631a:	4811      	ldr	r0, [pc, #68]	; (8006360 <xTimerCreateTimerTask+0x88>)
 800631c:	f7fe ff4c 	bl	80051b8 <xTaskCreateStatic>
 8006320:	4603      	mov	r3, r0
 8006322:	4a10      	ldr	r2, [pc, #64]	; (8006364 <xTimerCreateTimerTask+0x8c>)
 8006324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006326:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <xTimerCreateTimerTask+0x8c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800632e:	2301      	movs	r3, #1
 8006330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	613b      	str	r3, [r7, #16]
}
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800634e:	697b      	ldr	r3, [r7, #20]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000e3c 	.word	0x20000e3c
 800635c:	08007c7c 	.word	0x08007c7c
 8006360:	0800649d 	.word	0x0800649d
 8006364:	20000e40 	.word	0x20000e40

08006368 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006376:	2300      	movs	r3, #0
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	623b      	str	r3, [r7, #32]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006396:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <xTimerGenericCommand+0x98>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d02a      	beq.n	80063f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	dc18      	bgt.n	80063e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063b0:	f7ff fdb4 	bl	8005f1c <xTaskGetSchedulerState>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d109      	bne.n	80063ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <xTimerGenericCommand+0x98>)
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	f107 0110 	add.w	r1, r7, #16
 80063c2:	2300      	movs	r3, #0
 80063c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c6:	f7fe f891 	bl	80044ec <xQueueGenericSend>
 80063ca:	6278      	str	r0, [r7, #36]	; 0x24
 80063cc:	e012      	b.n	80063f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063ce:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <xTimerGenericCommand+0x98>)
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f107 0110 	add.w	r1, r7, #16
 80063d6:	2300      	movs	r3, #0
 80063d8:	2200      	movs	r2, #0
 80063da:	f7fe f887 	bl	80044ec <xQueueGenericSend>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24
 80063e0:	e008      	b.n	80063f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <xTimerGenericCommand+0x98>)
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	f107 0110 	add.w	r1, r7, #16
 80063ea:	2300      	movs	r3, #0
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	f7fe f97b 	bl	80046e8 <xQueueGenericSendFromISR>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3728      	adds	r7, #40	; 0x28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000e3c 	.word	0x20000e3c

08006404 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af02      	add	r7, sp, #8
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <prvProcessExpiredTimer+0x94>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	3304      	adds	r3, #4
 800641c:	4618      	mov	r0, r3
 800641e:	f7fd fe47 	bl	80040b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d022      	beq.n	8006476 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	18d1      	adds	r1, r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	6978      	ldr	r0, [r7, #20]
 800643e:	f000 f8d1 	bl	80065e4 <prvInsertTimerInActiveList>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01f      	beq.n	8006488 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006448:	2300      	movs	r3, #0
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	2300      	movs	r3, #0
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	2100      	movs	r1, #0
 8006452:	6978      	ldr	r0, [r7, #20]
 8006454:	f7ff ff88 	bl	8006368 <xTimerGenericCommand>
 8006458:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d113      	bne.n	8006488 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	b2da      	uxtb	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	6978      	ldr	r0, [r7, #20]
 800648e:	4798      	blx	r3
}
 8006490:	bf00      	nop
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000e34 	.word	0x20000e34

0800649c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064a4:	f107 0308 	add.w	r3, r7, #8
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f857 	bl	800655c <prvGetNextExpireTime>
 80064ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f803 	bl	80064c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064ba:	f000 f8d5 	bl	8006668 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064be:	e7f1      	b.n	80064a4 <prvTimerTask+0x8>

080064c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064ca:	f7ff f93b 	bl	8005744 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ce:	f107 0308 	add.w	r3, r7, #8
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f866 	bl	80065a4 <prvSampleTimeNow>
 80064d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d130      	bne.n	8006542 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <prvProcessTimerOrBlockTask+0x3c>
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d806      	bhi.n	80064fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064ee:	f7ff f937 	bl	8005760 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ff85 	bl	8006404 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064fa:	e024      	b.n	8006546 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006502:	4b13      	ldr	r3, [pc, #76]	; (8006550 <prvProcessTimerOrBlockTask+0x90>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <prvProcessTimerOrBlockTask+0x50>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <prvProcessTimerOrBlockTask+0x52>
 8006510:	2300      	movs	r3, #0
 8006512:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006514:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <prvProcessTimerOrBlockTask+0x94>)
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	4619      	mov	r1, r3
 8006522:	f7fe fe15 	bl	8005150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006526:	f7ff f91b 	bl	8005760 <xTaskResumeAll>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <prvProcessTimerOrBlockTask+0x98>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
}
 8006540:	e001      	b.n	8006546 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006542:	f7ff f90d 	bl	8005760 <xTaskResumeAll>
}
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000e38 	.word	0x20000e38
 8006554:	20000e3c 	.word	0x20000e3c
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <prvGetNextExpireTime+0x44>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <prvGetNextExpireTime+0x16>
 800656e:	2201      	movs	r2, #1
 8006570:	e000      	b.n	8006574 <prvGetNextExpireTime+0x18>
 8006572:	2200      	movs	r2, #0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d105      	bne.n	800658c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <prvGetNextExpireTime+0x44>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	e001      	b.n	8006590 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006590:	68fb      	ldr	r3, [r7, #12]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000e34 	.word	0x20000e34

080065a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065ac:	f7ff f976 	bl	800589c <xTaskGetTickCount>
 80065b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <prvSampleTimeNow+0x3c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d205      	bcs.n	80065c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065bc:	f000 f936 	bl	800682c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e002      	b.n	80065ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065ce:	4a04      	ldr	r2, [pc, #16]	; (80065e0 <prvSampleTimeNow+0x3c>)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000e44 	.word	0x20000e44

080065e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	429a      	cmp	r2, r3
 8006608:	d812      	bhi.n	8006630 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e01b      	b.n	8006656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <prvInsertTimerInActiveList+0x7c>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7fd fd08 	bl	800403e <vListInsert>
 800662e:	e012      	b.n	8006656 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d206      	bcs.n	8006646 <prvInsertTimerInActiveList+0x62>
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e007      	b.n	8006656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006646:	4b07      	ldr	r3, [pc, #28]	; (8006664 <prvInsertTimerInActiveList+0x80>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3304      	adds	r3, #4
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7fd fcf4 	bl	800403e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006656:	697b      	ldr	r3, [r7, #20]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20000e38 	.word	0x20000e38
 8006664:	20000e34 	.word	0x20000e34

08006668 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800666e:	e0ca      	b.n	8006806 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	da18      	bge.n	80066a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006676:	1d3b      	adds	r3, r7, #4
 8006678:	3304      	adds	r3, #4
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	61fb      	str	r3, [r7, #28]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669e:	6850      	ldr	r0, [r2, #4]
 80066a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a2:	6892      	ldr	r2, [r2, #8]
 80066a4:	4611      	mov	r1, r2
 80066a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f2c0 80ab 	blt.w	8006806 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	3304      	adds	r3, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fd fcf5 	bl	80040b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066c6:	463b      	mov	r3, r7
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff6b 	bl	80065a4 <prvSampleTimeNow>
 80066ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	f200 8096 	bhi.w	8006804 <prvProcessReceivedCommands+0x19c>
 80066d8:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <prvProcessReceivedCommands+0x78>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	08006709 	.word	0x08006709
 80066e4:	08006709 	.word	0x08006709
 80066e8:	08006709 	.word	0x08006709
 80066ec:	0800677d 	.word	0x0800677d
 80066f0:	08006791 	.word	0x08006791
 80066f4:	080067db 	.word	0x080067db
 80066f8:	08006709 	.word	0x08006709
 80066fc:	08006709 	.word	0x08006709
 8006700:	0800677d 	.word	0x0800677d
 8006704:	08006791 	.word	0x08006791
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	18d1      	adds	r1, r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006728:	f7ff ff5c 	bl	80065e4 <prvInsertTimerInActiveList>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d069      	beq.n	8006806 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006738:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d05e      	beq.n	8006806 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	441a      	add	r2, r3
 8006750:	2300      	movs	r3, #0
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	2100      	movs	r1, #0
 8006758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800675a:	f7ff fe05 	bl	8006368 <xTimerGenericCommand>
 800675e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d14f      	bne.n	8006806 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	61bb      	str	r3, [r7, #24]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800678e:	e03a      	b.n	8006806 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	617b      	str	r3, [r7, #20]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	18d1      	adds	r1, r2, r3
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d4:	f7ff ff06 	bl	80065e4 <prvInsertTimerInActiveList>
					break;
 80067d8:	e015      	b.n	8006806 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d103      	bne.n	80067f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80067e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ea:	f000 fbe1 	bl	8006fb0 <vPortFree>
 80067ee:	e00a      	b.n	8006806 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006802:	e000      	b.n	8006806 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006804:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006806:	4b08      	ldr	r3, [pc, #32]	; (8006828 <prvProcessReceivedCommands+0x1c0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	1d39      	adds	r1, r7, #4
 800680c:	2200      	movs	r2, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe f892 	bl	8004938 <xQueueReceive>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	f47f af2a 	bne.w	8006670 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	3730      	adds	r7, #48	; 0x30
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000e3c 	.word	0x20000e3c

0800682c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006832:	e048      	b.n	80068c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006834:	4b2d      	ldr	r3, [pc, #180]	; (80068ec <prvSwitchTimerLists+0xc0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800683e:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <prvSwitchTimerLists+0xc0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3304      	adds	r3, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f7fd fc2f 	bl	80040b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d02e      	beq.n	80068c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	429a      	cmp	r2, r3
 8006878:	d90e      	bls.n	8006898 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006886:	4b19      	ldr	r3, [pc, #100]	; (80068ec <prvSwitchTimerLists+0xc0>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3304      	adds	r3, #4
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f7fd fbd4 	bl	800403e <vListInsert>
 8006896:	e016      	b.n	80068c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006898:	2300      	movs	r3, #0
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	2300      	movs	r3, #0
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	2100      	movs	r1, #0
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff fd60 	bl	8006368 <xTimerGenericCommand>
 80068a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	603b      	str	r3, [r7, #0]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <prvSwitchTimerLists+0xc0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1b1      	bne.n	8006834 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <prvSwitchTimerLists+0xc0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <prvSwitchTimerLists+0xc4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a04      	ldr	r2, [pc, #16]	; (80068ec <prvSwitchTimerLists+0xc0>)
 80068dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068de:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <prvSwitchTimerLists+0xc4>)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6013      	str	r3, [r2, #0]
}
 80068e4:	bf00      	nop
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000e34 	.word	0x20000e34
 80068f0:	20000e38 	.word	0x20000e38

080068f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068fa:	f000 f96b 	bl	8006bd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068fe:	4b15      	ldr	r3, [pc, #84]	; (8006954 <prvCheckForValidListAndQueue+0x60>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d120      	bne.n	8006948 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006906:	4814      	ldr	r0, [pc, #80]	; (8006958 <prvCheckForValidListAndQueue+0x64>)
 8006908:	f7fd fb48 	bl	8003f9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800690c:	4813      	ldr	r0, [pc, #76]	; (800695c <prvCheckForValidListAndQueue+0x68>)
 800690e:	f7fd fb45 	bl	8003f9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <prvCheckForValidListAndQueue+0x6c>)
 8006914:	4a10      	ldr	r2, [pc, #64]	; (8006958 <prvCheckForValidListAndQueue+0x64>)
 8006916:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006918:	4b12      	ldr	r3, [pc, #72]	; (8006964 <prvCheckForValidListAndQueue+0x70>)
 800691a:	4a10      	ldr	r2, [pc, #64]	; (800695c <prvCheckForValidListAndQueue+0x68>)
 800691c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800691e:	2300      	movs	r3, #0
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <prvCheckForValidListAndQueue+0x74>)
 8006924:	4a11      	ldr	r2, [pc, #68]	; (800696c <prvCheckForValidListAndQueue+0x78>)
 8006926:	2110      	movs	r1, #16
 8006928:	200a      	movs	r0, #10
 800692a:	f7fd fc53 	bl	80041d4 <xQueueGenericCreateStatic>
 800692e:	4603      	mov	r3, r0
 8006930:	4a08      	ldr	r2, [pc, #32]	; (8006954 <prvCheckForValidListAndQueue+0x60>)
 8006932:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <prvCheckForValidListAndQueue+0x60>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <prvCheckForValidListAndQueue+0x60>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	490b      	ldr	r1, [pc, #44]	; (8006970 <prvCheckForValidListAndQueue+0x7c>)
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fbb0 	bl	80050a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006948:	f000 f974 	bl	8006c34 <vPortExitCritical>
}
 800694c:	bf00      	nop
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000e3c 	.word	0x20000e3c
 8006958:	20000e0c 	.word	0x20000e0c
 800695c:	20000e20 	.word	0x20000e20
 8006960:	20000e34 	.word	0x20000e34
 8006964:	20000e38 	.word	0x20000e38
 8006968:	20000ee8 	.word	0x20000ee8
 800696c:	20000e48 	.word	0x20000e48
 8006970:	08007c84 	.word	0x08007c84

08006974 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3b04      	subs	r3, #4
 8006984:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800698c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3b04      	subs	r3, #4
 8006992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0201 	bic.w	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3b04      	subs	r3, #4
 80069a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069a4:	4a0c      	ldr	r2, [pc, #48]	; (80069d8 <pxPortInitialiseStack+0x64>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3b14      	subs	r3, #20
 80069ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3b04      	subs	r3, #4
 80069ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f06f 0202 	mvn.w	r2, #2
 80069c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3b20      	subs	r3, #32
 80069c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	080069dd 	.word	0x080069dd

080069dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069e6:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <prvTaskExitError+0x54>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ee:	d00a      	beq.n	8006a06 <prvTaskExitError+0x2a>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <prvTaskExitError+0x28>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60bb      	str	r3, [r7, #8]
}
 8006a18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a1a:	bf00      	nop
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0fc      	beq.n	8006a1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	2000000c 	.word	0x2000000c
	...

08006a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <pxCurrentTCBConst2>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f380 8809 	msr	PSP, r0
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8811 	msr	BASEPRI, r0
 8006a5a:	4770      	bx	lr
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst2>:
 8006a60:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a68:	4808      	ldr	r0, [pc, #32]	; (8006a8c <prvPortStartFirstTask+0x24>)
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	6800      	ldr	r0, [r0, #0]
 8006a6e:	f380 8808 	msr	MSP, r0
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8814 	msr	CONTROL, r0
 8006a7a:	b662      	cpsie	i
 8006a7c:	b661      	cpsie	f
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	df00      	svc	0
 8006a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a8a:	bf00      	nop
 8006a8c:	e000ed08 	.word	0xe000ed08

08006a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a96:	4b46      	ldr	r3, [pc, #280]	; (8006bb0 <xPortStartScheduler+0x120>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a46      	ldr	r2, [pc, #280]	; (8006bb4 <xPortStartScheduler+0x124>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10a      	bne.n	8006ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ab6:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <xPortStartScheduler+0x120>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a3f      	ldr	r2, [pc, #252]	; (8006bb8 <xPortStartScheduler+0x128>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10a      	bne.n	8006ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ad6:	4b39      	ldr	r3, [pc, #228]	; (8006bbc <xPortStartScheduler+0x12c>)
 8006ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	22ff      	movs	r2, #255	; 0xff
 8006ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	4b31      	ldr	r3, [pc, #196]	; (8006bc0 <xPortStartScheduler+0x130>)
 8006afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006afe:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b04:	e009      	b.n	8006b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b06:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b80      	cmp	r3, #128	; 0x80
 8006b24:	d0ef      	beq.n	8006b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b26:	4b27      	ldr	r3, [pc, #156]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1c3 0307 	rsb	r3, r3, #7
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d00a      	beq.n	8006b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60bb      	str	r3, [r7, #8]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b66:	4b18      	ldr	r3, [pc, #96]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b7e:	f000 f8dd 	bl	8006d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b82:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <xPortStartScheduler+0x13c>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b88:	f000 f8fc 	bl	8006d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <xPortStartScheduler+0x140>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0f      	ldr	r2, [pc, #60]	; (8006bd0 <xPortStartScheduler+0x140>)
 8006b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b98:	f7ff ff66 	bl	8006a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b9c:	f7fe ff48 	bl	8005a30 <vTaskSwitchContext>
	prvTaskExitError();
 8006ba0:	f7ff ff1c 	bl	80069dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	e000ed00 	.word	0xe000ed00
 8006bb4:	410fc271 	.word	0x410fc271
 8006bb8:	410fc270 	.word	0x410fc270
 8006bbc:	e000e400 	.word	0xe000e400
 8006bc0:	20000f38 	.word	0x20000f38
 8006bc4:	20000f3c 	.word	0x20000f3c
 8006bc8:	e000ed20 	.word	0xe000ed20
 8006bcc:	2000000c 	.word	0x2000000c
 8006bd0:	e000ef34 	.word	0xe000ef34

08006bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	607b      	str	r3, [r7, #4]
}
 8006bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bee:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d10f      	bne.n	8006c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <vPortEnterCritical+0x5c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	603b      	str	r3, [r7, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <vPortEnterCritical+0x4a>
	}
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	2000000c 	.word	0x2000000c
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <vPortExitCritical+0x50>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <vPortExitCritical+0x24>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	607b      	str	r3, [r7, #4]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <vPortExitCritical+0x50>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <vPortExitCritical+0x50>)
 8006c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <vPortExitCritical+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <vPortExitCritical+0x42>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	f383 8811 	msr	BASEPRI, r3
}
 8006c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	2000000c 	.word	0x2000000c
	...

08006c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c90:	f3ef 8009 	mrs	r0, PSP
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <pxCurrentTCBConst>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f01e 0f10 	tst.w	lr, #16
 8006ca0:	bf08      	it	eq
 8006ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cb4:	f380 8811 	msr	BASEPRI, r0
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f7fe feb6 	bl	8005a30 <vTaskSwitchContext>
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	f380 8811 	msr	BASEPRI, r0
 8006ccc:	bc09      	pop	{r0, r3}
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd6:	f01e 0f10 	tst.w	lr, #16
 8006cda:	bf08      	it	eq
 8006cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ce0:	f380 8809 	msr	PSP, r0
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst>:
 8006cf0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d12:	f7fe fdd3 	bl	80058bc <xTaskIncrementTick>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <xPortSysTickHandler+0x40>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <vPortSetupTimerInterrupt+0x38>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <vPortSetupTimerInterrupt+0x3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <vPortSetupTimerInterrupt+0x40>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <vPortSetupTimerInterrupt+0x44>)
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d5e:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	e000e010 	.word	0xe000e010
 8006d74:	e000e018 	.word	0xe000e018
 8006d78:	20000000 	.word	0x20000000
 8006d7c:	10624dd3 	.word	0x10624dd3
 8006d80:	e000e014 	.word	0xe000e014

08006d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d94 <vPortEnableVFP+0x10>
 8006d88:	6801      	ldr	r1, [r0, #0]
 8006d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d8e:	6001      	str	r1, [r0, #0]
 8006d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d92:	bf00      	nop
 8006d94:	e000ed88 	.word	0xe000ed88

08006d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d9e:	f3ef 8305 	mrs	r3, IPSR
 8006da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d914      	bls.n	8006dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006daa:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <vPortValidateInterruptPriority+0x70>)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006db4:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <vPortValidateInterruptPriority+0x74>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	7afa      	ldrb	r2, [r7, #11]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d20a      	bcs.n	8006dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	607b      	str	r3, [r7, #4]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <vPortValidateInterruptPriority+0x78>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <vPortValidateInterruptPriority+0x7c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d90a      	bls.n	8006dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	603b      	str	r3, [r7, #0]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <vPortValidateInterruptPriority+0x60>
	}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	e000e3f0 	.word	0xe000e3f0
 8006e0c:	20000f38 	.word	0x20000f38
 8006e10:	e000ed0c 	.word	0xe000ed0c
 8006e14:	20000f3c 	.word	0x20000f3c

08006e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e24:	f7fe fc8e 	bl	8005744 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e28:	4b5b      	ldr	r3, [pc, #364]	; (8006f98 <pvPortMalloc+0x180>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e30:	f000 f920 	bl	8007074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e34:	4b59      	ldr	r3, [pc, #356]	; (8006f9c <pvPortMalloc+0x184>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 8093 	bne.w	8006f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01d      	beq.n	8006e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e48:	2208      	movs	r2, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d014      	beq.n	8006e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f023 0307 	bic.w	r3, r3, #7
 8006e60:	3308      	adds	r3, #8
 8006e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <pvPortMalloc+0x6c>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d06e      	beq.n	8006f68 <pvPortMalloc+0x150>
 8006e8a:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <pvPortMalloc+0x188>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d869      	bhi.n	8006f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e94:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <pvPortMalloc+0x18c>)
 8006e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e98:	4b42      	ldr	r3, [pc, #264]	; (8006fa4 <pvPortMalloc+0x18c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9e:	e004      	b.n	8006eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d903      	bls.n	8006ebc <pvPortMalloc+0xa4>
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f1      	bne.n	8006ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ebc:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <pvPortMalloc+0x180>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d050      	beq.n	8006f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2208      	movs	r2, #8
 8006ecc:	4413      	add	r3, r2
 8006ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d91f      	bls.n	8006f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <pvPortMalloc+0xf8>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	613b      	str	r3, [r7, #16]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f22:	69b8      	ldr	r0, [r7, #24]
 8006f24:	f000 f908 	bl	8007138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f28:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f36:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <pvPortMalloc+0x190>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d203      	bcs.n	8006f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f42:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <pvPortMalloc+0x190>)
 8006f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <pvPortMalloc+0x184>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <pvPortMalloc+0x194>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <pvPortMalloc+0x194>)
 8006f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f68:	f7fe fbfa 	bl	8005760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <pvPortMalloc+0x174>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <pvPortMalloc+0x172>
	return pvReturn;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3728      	adds	r7, #40	; 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20001b00 	.word	0x20001b00
 8006f9c:	20001b14 	.word	0x20001b14
 8006fa0:	20001b04 	.word	0x20001b04
 8006fa4:	20001af8 	.word	0x20001af8
 8006fa8:	20001b08 	.word	0x20001b08
 8006fac:	20001b0c 	.word	0x20001b0c

08006fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04d      	beq.n	800705e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	4b24      	ldr	r3, [pc, #144]	; (8007068 <vPortFree+0xb8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <vPortFree+0x44>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60fb      	str	r3, [r7, #12]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <vPortFree+0x62>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60bb      	str	r3, [r7, #8]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <vPortFree+0xb8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01e      	beq.n	800705e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11a      	bne.n	800705e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <vPortFree+0xb8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007038:	f7fe fb84 	bl	8005744 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <vPortFree+0xbc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4413      	add	r3, r2
 8007046:	4a09      	ldr	r2, [pc, #36]	; (800706c <vPortFree+0xbc>)
 8007048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f000 f874 	bl	8007138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <vPortFree+0xc0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3301      	adds	r3, #1
 8007056:	4a06      	ldr	r2, [pc, #24]	; (8007070 <vPortFree+0xc0>)
 8007058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800705a:	f7fe fb81 	bl	8005760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800705e:	bf00      	nop
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20001b14 	.word	0x20001b14
 800706c:	20001b04 	.word	0x20001b04
 8007070:	20001b10 	.word	0x20001b10

08007074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800707a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800707e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007080:	4b27      	ldr	r3, [pc, #156]	; (8007120 <prvHeapInit+0xac>)
 8007082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3307      	adds	r3, #7
 8007092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <prvHeapInit+0xac>)
 80070a4:	4413      	add	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <prvHeapInit+0xb0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <prvHeapInit+0xb0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070c0:	2208      	movs	r2, #8
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a15      	ldr	r2, [pc, #84]	; (8007128 <prvHeapInit+0xb4>)
 80070d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <prvHeapInit+0xb4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <prvHeapInit+0xb4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <prvHeapInit+0xb4>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	4a0a      	ldr	r2, [pc, #40]	; (800712c <prvHeapInit+0xb8>)
 8007102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <prvHeapInit+0xbc>)
 800710a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <prvHeapInit+0xc0>)
 800710e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000f40 	.word	0x20000f40
 8007124:	20001af8 	.word	0x20001af8
 8007128:	20001b00 	.word	0x20001b00
 800712c:	20001b08 	.word	0x20001b08
 8007130:	20001b04 	.word	0x20001b04
 8007134:	20001b14 	.word	0x20001b14

08007138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007140:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <prvInsertBlockIntoFreeList+0xac>)
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e002      	b.n	800714c <prvInsertBlockIntoFreeList+0x14>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d8f7      	bhi.n	8007146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d108      	bne.n	800717a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	441a      	add	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d118      	bne.n	80071c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d00d      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	441a      	add	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	e008      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e003      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d002      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20001af8 	.word	0x20001af8
 80071e8:	20001b00 	.word	0x20001b00

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f000 f9e5 	bl	80075d8 <memset>
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <std+0x58>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <std+0x5c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <std+0x60>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <std+0x64>)
 800721c:	6323      	str	r3, [r4, #48]	; 0x30
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x68>)
 8007220:	6224      	str	r4, [r4, #32]
 8007222:	429c      	cmp	r4, r3
 8007224:	d006      	beq.n	8007234 <std+0x48>
 8007226:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800722a:	4294      	cmp	r4, r2
 800722c:	d002      	beq.n	8007234 <std+0x48>
 800722e:	33d0      	adds	r3, #208	; 0xd0
 8007230:	429c      	cmp	r4, r3
 8007232:	d105      	bne.n	8007240 <std+0x54>
 8007234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f000 ba9a 	b.w	8007774 <__retarget_lock_init_recursive>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	bf00      	nop
 8007244:	08007429 	.word	0x08007429
 8007248:	0800744b 	.word	0x0800744b
 800724c:	08007483 	.word	0x08007483
 8007250:	080074a7 	.word	0x080074a7
 8007254:	20001b18 	.word	0x20001b18

08007258 <stdio_exit_handler>:
 8007258:	4a02      	ldr	r2, [pc, #8]	; (8007264 <stdio_exit_handler+0xc>)
 800725a:	4903      	ldr	r1, [pc, #12]	; (8007268 <stdio_exit_handler+0x10>)
 800725c:	4803      	ldr	r0, [pc, #12]	; (800726c <stdio_exit_handler+0x14>)
 800725e:	f000 b869 	b.w	8007334 <_fwalk_sglue>
 8007262:	bf00      	nop
 8007264:	20000010 	.word	0x20000010
 8007268:	08007a95 	.word	0x08007a95
 800726c:	2000001c 	.word	0x2000001c

08007270 <cleanup_stdio>:
 8007270:	6841      	ldr	r1, [r0, #4]
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <cleanup_stdio+0x34>)
 8007274:	4299      	cmp	r1, r3
 8007276:	b510      	push	{r4, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	d001      	beq.n	8007280 <cleanup_stdio+0x10>
 800727c:	f000 fc0a 	bl	8007a94 <_fflush_r>
 8007280:	68a1      	ldr	r1, [r4, #8]
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <cleanup_stdio+0x38>)
 8007284:	4299      	cmp	r1, r3
 8007286:	d002      	beq.n	800728e <cleanup_stdio+0x1e>
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fc03 	bl	8007a94 <_fflush_r>
 800728e:	68e1      	ldr	r1, [r4, #12]
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <cleanup_stdio+0x3c>)
 8007292:	4299      	cmp	r1, r3
 8007294:	d004      	beq.n	80072a0 <cleanup_stdio+0x30>
 8007296:	4620      	mov	r0, r4
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f000 bbfa 	b.w	8007a94 <_fflush_r>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	20001b18 	.word	0x20001b18
 80072a8:	20001b80 	.word	0x20001b80
 80072ac:	20001be8 	.word	0x20001be8

080072b0 <global_stdio_init.part.0>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <global_stdio_init.part.0+0x30>)
 80072b4:	4c0b      	ldr	r4, [pc, #44]	; (80072e4 <global_stdio_init.part.0+0x34>)
 80072b6:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <global_stdio_init.part.0+0x38>)
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	4620      	mov	r0, r4
 80072bc:	2200      	movs	r2, #0
 80072be:	2104      	movs	r1, #4
 80072c0:	f7ff ff94 	bl	80071ec <std>
 80072c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072c8:	2201      	movs	r2, #1
 80072ca:	2109      	movs	r1, #9
 80072cc:	f7ff ff8e 	bl	80071ec <std>
 80072d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072d4:	2202      	movs	r2, #2
 80072d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072da:	2112      	movs	r1, #18
 80072dc:	f7ff bf86 	b.w	80071ec <std>
 80072e0:	20001c50 	.word	0x20001c50
 80072e4:	20001b18 	.word	0x20001b18
 80072e8:	08007259 	.word	0x08007259

080072ec <__sfp_lock_acquire>:
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <__sfp_lock_acquire+0x8>)
 80072ee:	f000 ba42 	b.w	8007776 <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	20001c59 	.word	0x20001c59

080072f8 <__sfp_lock_release>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_release+0x8>)
 80072fa:	f000 ba3d 	b.w	8007778 <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	20001c59 	.word	0x20001c59

08007304 <__sinit>:
 8007304:	b510      	push	{r4, lr}
 8007306:	4604      	mov	r4, r0
 8007308:	f7ff fff0 	bl	80072ec <__sfp_lock_acquire>
 800730c:	6a23      	ldr	r3, [r4, #32]
 800730e:	b11b      	cbz	r3, 8007318 <__sinit+0x14>
 8007310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007314:	f7ff bff0 	b.w	80072f8 <__sfp_lock_release>
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <__sinit+0x28>)
 800731a:	6223      	str	r3, [r4, #32]
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <__sinit+0x2c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f5      	bne.n	8007310 <__sinit+0xc>
 8007324:	f7ff ffc4 	bl	80072b0 <global_stdio_init.part.0>
 8007328:	e7f2      	b.n	8007310 <__sinit+0xc>
 800732a:	bf00      	nop
 800732c:	08007271 	.word	0x08007271
 8007330:	20001c50 	.word	0x20001c50

08007334 <_fwalk_sglue>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4607      	mov	r7, r0
 800733a:	4688      	mov	r8, r1
 800733c:	4614      	mov	r4, r2
 800733e:	2600      	movs	r6, #0
 8007340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007344:	f1b9 0901 	subs.w	r9, r9, #1
 8007348:	d505      	bpl.n	8007356 <_fwalk_sglue+0x22>
 800734a:	6824      	ldr	r4, [r4, #0]
 800734c:	2c00      	cmp	r4, #0
 800734e:	d1f7      	bne.n	8007340 <_fwalk_sglue+0xc>
 8007350:	4630      	mov	r0, r6
 8007352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d907      	bls.n	800736c <_fwalk_sglue+0x38>
 800735c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007360:	3301      	adds	r3, #1
 8007362:	d003      	beq.n	800736c <_fwalk_sglue+0x38>
 8007364:	4629      	mov	r1, r5
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	4306      	orrs	r6, r0
 800736c:	3568      	adds	r5, #104	; 0x68
 800736e:	e7e9      	b.n	8007344 <_fwalk_sglue+0x10>

08007370 <_puts_r>:
 8007370:	6a03      	ldr	r3, [r0, #32]
 8007372:	b570      	push	{r4, r5, r6, lr}
 8007374:	6884      	ldr	r4, [r0, #8]
 8007376:	4605      	mov	r5, r0
 8007378:	460e      	mov	r6, r1
 800737a:	b90b      	cbnz	r3, 8007380 <_puts_r+0x10>
 800737c:	f7ff ffc2 	bl	8007304 <__sinit>
 8007380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007382:	07db      	lsls	r3, r3, #31
 8007384:	d405      	bmi.n	8007392 <_puts_r+0x22>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	0598      	lsls	r0, r3, #22
 800738a:	d402      	bmi.n	8007392 <_puts_r+0x22>
 800738c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800738e:	f000 f9f2 	bl	8007776 <__retarget_lock_acquire_recursive>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	0719      	lsls	r1, r3, #28
 8007396:	d513      	bpl.n	80073c0 <_puts_r+0x50>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	b18b      	cbz	r3, 80073c0 <_puts_r+0x50>
 800739c:	3e01      	subs	r6, #1
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073a4:	3b01      	subs	r3, #1
 80073a6:	60a3      	str	r3, [r4, #8]
 80073a8:	b9e9      	cbnz	r1, 80073e6 <_puts_r+0x76>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	da2e      	bge.n	800740c <_puts_r+0x9c>
 80073ae:	4622      	mov	r2, r4
 80073b0:	210a      	movs	r1, #10
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 f87b 	bl	80074ae <__swbuf_r>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d007      	beq.n	80073cc <_puts_r+0x5c>
 80073bc:	250a      	movs	r5, #10
 80073be:	e007      	b.n	80073d0 <_puts_r+0x60>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 f8b0 	bl	8007528 <__swsetup_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d0e7      	beq.n	800739c <_puts_r+0x2c>
 80073cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073d2:	07da      	lsls	r2, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_puts_r+0x72>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	059b      	lsls	r3, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_puts_r+0x72>
 80073dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073de:	f000 f9cb 	bl	8007778 <__retarget_lock_release_recursive>
 80073e2:	4628      	mov	r0, r5
 80073e4:	bd70      	pop	{r4, r5, r6, pc}
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da04      	bge.n	80073f4 <_puts_r+0x84>
 80073ea:	69a2      	ldr	r2, [r4, #24]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	dc06      	bgt.n	80073fe <_puts_r+0x8e>
 80073f0:	290a      	cmp	r1, #10
 80073f2:	d004      	beq.n	80073fe <_puts_r+0x8e>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	6022      	str	r2, [r4, #0]
 80073fa:	7019      	strb	r1, [r3, #0]
 80073fc:	e7cf      	b.n	800739e <_puts_r+0x2e>
 80073fe:	4622      	mov	r2, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f000 f854 	bl	80074ae <__swbuf_r>
 8007406:	3001      	adds	r0, #1
 8007408:	d1c9      	bne.n	800739e <_puts_r+0x2e>
 800740a:	e7df      	b.n	80073cc <_puts_r+0x5c>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	250a      	movs	r5, #10
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	701d      	strb	r5, [r3, #0]
 8007416:	e7db      	b.n	80073d0 <_puts_r+0x60>

08007418 <puts>:
 8007418:	4b02      	ldr	r3, [pc, #8]	; (8007424 <puts+0xc>)
 800741a:	4601      	mov	r1, r0
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	f7ff bfa7 	b.w	8007370 <_puts_r>
 8007422:	bf00      	nop
 8007424:	20000068 	.word	0x20000068

08007428 <__sread>:
 8007428:	b510      	push	{r4, lr}
 800742a:	460c      	mov	r4, r1
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	f000 f952 	bl	80076d8 <_read_r>
 8007434:	2800      	cmp	r0, #0
 8007436:	bfab      	itete	ge
 8007438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800743a:	89a3      	ldrhlt	r3, [r4, #12]
 800743c:	181b      	addge	r3, r3, r0
 800743e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007442:	bfac      	ite	ge
 8007444:	6563      	strge	r3, [r4, #84]	; 0x54
 8007446:	81a3      	strhlt	r3, [r4, #12]
 8007448:	bd10      	pop	{r4, pc}

0800744a <__swrite>:
 800744a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744e:	461f      	mov	r7, r3
 8007450:	898b      	ldrh	r3, [r1, #12]
 8007452:	05db      	lsls	r3, r3, #23
 8007454:	4605      	mov	r5, r0
 8007456:	460c      	mov	r4, r1
 8007458:	4616      	mov	r6, r2
 800745a:	d505      	bpl.n	8007468 <__swrite+0x1e>
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	2302      	movs	r3, #2
 8007462:	2200      	movs	r2, #0
 8007464:	f000 f926 	bl	80076b4 <_lseek_r>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800746e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	4632      	mov	r2, r6
 8007476:	463b      	mov	r3, r7
 8007478:	4628      	mov	r0, r5
 800747a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747e:	f000 b93d 	b.w	80076fc <_write_r>

08007482 <__sseek>:
 8007482:	b510      	push	{r4, lr}
 8007484:	460c      	mov	r4, r1
 8007486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748a:	f000 f913 	bl	80076b4 <_lseek_r>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	bf15      	itete	ne
 8007494:	6560      	strne	r0, [r4, #84]	; 0x54
 8007496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800749a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800749e:	81a3      	strheq	r3, [r4, #12]
 80074a0:	bf18      	it	ne
 80074a2:	81a3      	strhne	r3, [r4, #12]
 80074a4:	bd10      	pop	{r4, pc}

080074a6 <__sclose>:
 80074a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074aa:	f000 b89d 	b.w	80075e8 <_close_r>

080074ae <__swbuf_r>:
 80074ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b0:	460e      	mov	r6, r1
 80074b2:	4614      	mov	r4, r2
 80074b4:	4605      	mov	r5, r0
 80074b6:	b118      	cbz	r0, 80074c0 <__swbuf_r+0x12>
 80074b8:	6a03      	ldr	r3, [r0, #32]
 80074ba:	b90b      	cbnz	r3, 80074c0 <__swbuf_r+0x12>
 80074bc:	f7ff ff22 	bl	8007304 <__sinit>
 80074c0:	69a3      	ldr	r3, [r4, #24]
 80074c2:	60a3      	str	r3, [r4, #8]
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	071a      	lsls	r2, r3, #28
 80074c8:	d525      	bpl.n	8007516 <__swbuf_r+0x68>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	b31b      	cbz	r3, 8007516 <__swbuf_r+0x68>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	1a98      	subs	r0, r3, r2
 80074d4:	6963      	ldr	r3, [r4, #20]
 80074d6:	b2f6      	uxtb	r6, r6
 80074d8:	4283      	cmp	r3, r0
 80074da:	4637      	mov	r7, r6
 80074dc:	dc04      	bgt.n	80074e8 <__swbuf_r+0x3a>
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 fad7 	bl	8007a94 <_fflush_r>
 80074e6:	b9e0      	cbnz	r0, 8007522 <__swbuf_r+0x74>
 80074e8:	68a3      	ldr	r3, [r4, #8]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	60a3      	str	r3, [r4, #8]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	6022      	str	r2, [r4, #0]
 80074f4:	701e      	strb	r6, [r3, #0]
 80074f6:	6962      	ldr	r2, [r4, #20]
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d004      	beq.n	8007508 <__swbuf_r+0x5a>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	07db      	lsls	r3, r3, #31
 8007502:	d506      	bpl.n	8007512 <__swbuf_r+0x64>
 8007504:	2e0a      	cmp	r6, #10
 8007506:	d104      	bne.n	8007512 <__swbuf_r+0x64>
 8007508:	4621      	mov	r1, r4
 800750a:	4628      	mov	r0, r5
 800750c:	f000 fac2 	bl	8007a94 <_fflush_r>
 8007510:	b938      	cbnz	r0, 8007522 <__swbuf_r+0x74>
 8007512:	4638      	mov	r0, r7
 8007514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f000 f805 	bl	8007528 <__swsetup_r>
 800751e:	2800      	cmp	r0, #0
 8007520:	d0d5      	beq.n	80074ce <__swbuf_r+0x20>
 8007522:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007526:	e7f4      	b.n	8007512 <__swbuf_r+0x64>

08007528 <__swsetup_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4b2a      	ldr	r3, [pc, #168]	; (80075d4 <__swsetup_r+0xac>)
 800752c:	4605      	mov	r5, r0
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	460c      	mov	r4, r1
 8007532:	b118      	cbz	r0, 800753c <__swsetup_r+0x14>
 8007534:	6a03      	ldr	r3, [r0, #32]
 8007536:	b90b      	cbnz	r3, 800753c <__swsetup_r+0x14>
 8007538:	f7ff fee4 	bl	8007304 <__sinit>
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007542:	0718      	lsls	r0, r3, #28
 8007544:	d422      	bmi.n	800758c <__swsetup_r+0x64>
 8007546:	06d9      	lsls	r1, r3, #27
 8007548:	d407      	bmi.n	800755a <__swsetup_r+0x32>
 800754a:	2309      	movs	r3, #9
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007558:	e034      	b.n	80075c4 <__swsetup_r+0x9c>
 800755a:	0758      	lsls	r0, r3, #29
 800755c:	d512      	bpl.n	8007584 <__swsetup_r+0x5c>
 800755e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007560:	b141      	cbz	r1, 8007574 <__swsetup_r+0x4c>
 8007562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007566:	4299      	cmp	r1, r3
 8007568:	d002      	beq.n	8007570 <__swsetup_r+0x48>
 800756a:	4628      	mov	r0, r5
 800756c:	f000 f914 	bl	8007798 <_free_r>
 8007570:	2300      	movs	r3, #0
 8007572:	6363      	str	r3, [r4, #52]	; 0x34
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	2300      	movs	r3, #0
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	6023      	str	r3, [r4, #0]
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f043 0308 	orr.w	r3, r3, #8
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	b94b      	cbnz	r3, 80075a4 <__swsetup_r+0x7c>
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800759a:	d003      	beq.n	80075a4 <__swsetup_r+0x7c>
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 fac6 	bl	8007b30 <__smakebuf_r>
 80075a4:	89a0      	ldrh	r0, [r4, #12]
 80075a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075aa:	f010 0301 	ands.w	r3, r0, #1
 80075ae:	d00a      	beq.n	80075c6 <__swsetup_r+0x9e>
 80075b0:	2300      	movs	r3, #0
 80075b2:	60a3      	str	r3, [r4, #8]
 80075b4:	6963      	ldr	r3, [r4, #20]
 80075b6:	425b      	negs	r3, r3
 80075b8:	61a3      	str	r3, [r4, #24]
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	b943      	cbnz	r3, 80075d0 <__swsetup_r+0xa8>
 80075be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075c2:	d1c4      	bne.n	800754e <__swsetup_r+0x26>
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	0781      	lsls	r1, r0, #30
 80075c8:	bf58      	it	pl
 80075ca:	6963      	ldrpl	r3, [r4, #20]
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	e7f4      	b.n	80075ba <__swsetup_r+0x92>
 80075d0:	2000      	movs	r0, #0
 80075d2:	e7f7      	b.n	80075c4 <__swsetup_r+0x9c>
 80075d4:	20000068 	.word	0x20000068

080075d8 <memset>:
 80075d8:	4402      	add	r2, r0
 80075da:	4603      	mov	r3, r0
 80075dc:	4293      	cmp	r3, r2
 80075de:	d100      	bne.n	80075e2 <memset+0xa>
 80075e0:	4770      	bx	lr
 80075e2:	f803 1b01 	strb.w	r1, [r3], #1
 80075e6:	e7f9      	b.n	80075dc <memset+0x4>

080075e8 <_close_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d06      	ldr	r5, [pc, #24]	; (8007604 <_close_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7f9 fa30 	bl	8000a58 <_close>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_close_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_close_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20001c54 	.word	0x20001c54

08007608 <_reclaim_reent>:
 8007608:	4b29      	ldr	r3, [pc, #164]	; (80076b0 <_reclaim_reent+0xa8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4283      	cmp	r3, r0
 800760e:	b570      	push	{r4, r5, r6, lr}
 8007610:	4604      	mov	r4, r0
 8007612:	d04b      	beq.n	80076ac <_reclaim_reent+0xa4>
 8007614:	69c3      	ldr	r3, [r0, #28]
 8007616:	b143      	cbz	r3, 800762a <_reclaim_reent+0x22>
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d144      	bne.n	80076a8 <_reclaim_reent+0xa0>
 800761e:	69e3      	ldr	r3, [r4, #28]
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	b111      	cbz	r1, 800762a <_reclaim_reent+0x22>
 8007624:	4620      	mov	r0, r4
 8007626:	f000 f8b7 	bl	8007798 <_free_r>
 800762a:	6961      	ldr	r1, [r4, #20]
 800762c:	b111      	cbz	r1, 8007634 <_reclaim_reent+0x2c>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f8b2 	bl	8007798 <_free_r>
 8007634:	69e1      	ldr	r1, [r4, #28]
 8007636:	b111      	cbz	r1, 800763e <_reclaim_reent+0x36>
 8007638:	4620      	mov	r0, r4
 800763a:	f000 f8ad 	bl	8007798 <_free_r>
 800763e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007640:	b111      	cbz	r1, 8007648 <_reclaim_reent+0x40>
 8007642:	4620      	mov	r0, r4
 8007644:	f000 f8a8 	bl	8007798 <_free_r>
 8007648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764a:	b111      	cbz	r1, 8007652 <_reclaim_reent+0x4a>
 800764c:	4620      	mov	r0, r4
 800764e:	f000 f8a3 	bl	8007798 <_free_r>
 8007652:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007654:	b111      	cbz	r1, 800765c <_reclaim_reent+0x54>
 8007656:	4620      	mov	r0, r4
 8007658:	f000 f89e 	bl	8007798 <_free_r>
 800765c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800765e:	b111      	cbz	r1, 8007666 <_reclaim_reent+0x5e>
 8007660:	4620      	mov	r0, r4
 8007662:	f000 f899 	bl	8007798 <_free_r>
 8007666:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007668:	b111      	cbz	r1, 8007670 <_reclaim_reent+0x68>
 800766a:	4620      	mov	r0, r4
 800766c:	f000 f894 	bl	8007798 <_free_r>
 8007670:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007672:	b111      	cbz	r1, 800767a <_reclaim_reent+0x72>
 8007674:	4620      	mov	r0, r4
 8007676:	f000 f88f 	bl	8007798 <_free_r>
 800767a:	6a23      	ldr	r3, [r4, #32]
 800767c:	b1b3      	cbz	r3, 80076ac <_reclaim_reent+0xa4>
 800767e:	4620      	mov	r0, r4
 8007680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007684:	4718      	bx	r3
 8007686:	5949      	ldr	r1, [r1, r5]
 8007688:	b941      	cbnz	r1, 800769c <_reclaim_reent+0x94>
 800768a:	3504      	adds	r5, #4
 800768c:	69e3      	ldr	r3, [r4, #28]
 800768e:	2d80      	cmp	r5, #128	; 0x80
 8007690:	68d9      	ldr	r1, [r3, #12]
 8007692:	d1f8      	bne.n	8007686 <_reclaim_reent+0x7e>
 8007694:	4620      	mov	r0, r4
 8007696:	f000 f87f 	bl	8007798 <_free_r>
 800769a:	e7c0      	b.n	800761e <_reclaim_reent+0x16>
 800769c:	680e      	ldr	r6, [r1, #0]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f87a 	bl	8007798 <_free_r>
 80076a4:	4631      	mov	r1, r6
 80076a6:	e7ef      	b.n	8007688 <_reclaim_reent+0x80>
 80076a8:	2500      	movs	r5, #0
 80076aa:	e7ef      	b.n	800768c <_reclaim_reent+0x84>
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	bf00      	nop
 80076b0:	20000068 	.word	0x20000068

080076b4 <_lseek_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_lseek_r+0x20>)
 80076b8:	4604      	mov	r4, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7f9 f9ef 	bl	8000aa6 <_lseek>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_lseek_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_lseek_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20001c54 	.word	0x20001c54

080076d8 <_read_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	; (80076f8 <_read_r+0x20>)
 80076dc:	4604      	mov	r4, r0
 80076de:	4608      	mov	r0, r1
 80076e0:	4611      	mov	r1, r2
 80076e2:	2200      	movs	r2, #0
 80076e4:	602a      	str	r2, [r5, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7f9 f982 	bl	80009f0 <_read>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_read_r+0x1e>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_read_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20001c54 	.word	0x20001c54

080076fc <_write_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d07      	ldr	r5, [pc, #28]	; (800771c <_write_r+0x20>)
 8007700:	4604      	mov	r4, r0
 8007702:	4608      	mov	r0, r1
 8007704:	4611      	mov	r1, r2
 8007706:	2200      	movs	r2, #0
 8007708:	602a      	str	r2, [r5, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f7f9 f98e 	bl	8000a2c <_write>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_write_r+0x1e>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_write_r+0x1e>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20001c54 	.word	0x20001c54

08007720 <__errno>:
 8007720:	4b01      	ldr	r3, [pc, #4]	; (8007728 <__errno+0x8>)
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000068 	.word	0x20000068

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4d0d      	ldr	r5, [pc, #52]	; (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	; (8007768 <__libc_init_array+0x3c>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2600      	movs	r6, #0
 8007738:	42a6      	cmp	r6, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4d0b      	ldr	r5, [pc, #44]	; (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	; (8007770 <__libc_init_array+0x44>)
 8007740:	f000 fa64 	bl	8007c0c <_init>
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2600      	movs	r6, #0
 800774a:	42a6      	cmp	r6, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f855 3b04 	ldr.w	r3, [r5], #4
 8007754:	4798      	blx	r3
 8007756:	3601      	adds	r6, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f855 3b04 	ldr.w	r3, [r5], #4
 800775e:	4798      	blx	r3
 8007760:	3601      	adds	r6, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	08007d68 	.word	0x08007d68
 8007768:	08007d68 	.word	0x08007d68
 800776c:	08007d68 	.word	0x08007d68
 8007770:	08007d6c 	.word	0x08007d6c

08007774 <__retarget_lock_init_recursive>:
 8007774:	4770      	bx	lr

08007776 <__retarget_lock_acquire_recursive>:
 8007776:	4770      	bx	lr

08007778 <__retarget_lock_release_recursive>:
 8007778:	4770      	bx	lr

0800777a <memcpy>:
 800777a:	440a      	add	r2, r1
 800777c:	4291      	cmp	r1, r2
 800777e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007782:	d100      	bne.n	8007786 <memcpy+0xc>
 8007784:	4770      	bx	lr
 8007786:	b510      	push	{r4, lr}
 8007788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007790:	4291      	cmp	r1, r2
 8007792:	d1f9      	bne.n	8007788 <memcpy+0xe>
 8007794:	bd10      	pop	{r4, pc}
	...

08007798 <_free_r>:
 8007798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800779a:	2900      	cmp	r1, #0
 800779c:	d044      	beq.n	8007828 <_free_r+0x90>
 800779e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a2:	9001      	str	r0, [sp, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f1a1 0404 	sub.w	r4, r1, #4
 80077aa:	bfb8      	it	lt
 80077ac:	18e4      	addlt	r4, r4, r3
 80077ae:	f000 f8df 	bl	8007970 <__malloc_lock>
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <_free_r+0x94>)
 80077b4:	9801      	ldr	r0, [sp, #4]
 80077b6:	6813      	ldr	r3, [r2, #0]
 80077b8:	b933      	cbnz	r3, 80077c8 <_free_r+0x30>
 80077ba:	6063      	str	r3, [r4, #4]
 80077bc:	6014      	str	r4, [r2, #0]
 80077be:	b003      	add	sp, #12
 80077c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c4:	f000 b8da 	b.w	800797c <__malloc_unlock>
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d908      	bls.n	80077de <_free_r+0x46>
 80077cc:	6825      	ldr	r5, [r4, #0]
 80077ce:	1961      	adds	r1, r4, r5
 80077d0:	428b      	cmp	r3, r1
 80077d2:	bf01      	itttt	eq
 80077d4:	6819      	ldreq	r1, [r3, #0]
 80077d6:	685b      	ldreq	r3, [r3, #4]
 80077d8:	1949      	addeq	r1, r1, r5
 80077da:	6021      	streq	r1, [r4, #0]
 80077dc:	e7ed      	b.n	80077ba <_free_r+0x22>
 80077de:	461a      	mov	r2, r3
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	b10b      	cbz	r3, 80077e8 <_free_r+0x50>
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	d9fa      	bls.n	80077de <_free_r+0x46>
 80077e8:	6811      	ldr	r1, [r2, #0]
 80077ea:	1855      	adds	r5, r2, r1
 80077ec:	42a5      	cmp	r5, r4
 80077ee:	d10b      	bne.n	8007808 <_free_r+0x70>
 80077f0:	6824      	ldr	r4, [r4, #0]
 80077f2:	4421      	add	r1, r4
 80077f4:	1854      	adds	r4, r2, r1
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	6011      	str	r1, [r2, #0]
 80077fa:	d1e0      	bne.n	80077be <_free_r+0x26>
 80077fc:	681c      	ldr	r4, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	6053      	str	r3, [r2, #4]
 8007802:	440c      	add	r4, r1
 8007804:	6014      	str	r4, [r2, #0]
 8007806:	e7da      	b.n	80077be <_free_r+0x26>
 8007808:	d902      	bls.n	8007810 <_free_r+0x78>
 800780a:	230c      	movs	r3, #12
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	e7d6      	b.n	80077be <_free_r+0x26>
 8007810:	6825      	ldr	r5, [r4, #0]
 8007812:	1961      	adds	r1, r4, r5
 8007814:	428b      	cmp	r3, r1
 8007816:	bf04      	itt	eq
 8007818:	6819      	ldreq	r1, [r3, #0]
 800781a:	685b      	ldreq	r3, [r3, #4]
 800781c:	6063      	str	r3, [r4, #4]
 800781e:	bf04      	itt	eq
 8007820:	1949      	addeq	r1, r1, r5
 8007822:	6021      	streq	r1, [r4, #0]
 8007824:	6054      	str	r4, [r2, #4]
 8007826:	e7ca      	b.n	80077be <_free_r+0x26>
 8007828:	b003      	add	sp, #12
 800782a:	bd30      	pop	{r4, r5, pc}
 800782c:	20001c5c 	.word	0x20001c5c

08007830 <sbrk_aligned>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0e      	ldr	r6, [pc, #56]	; (800786c <sbrk_aligned+0x3c>)
 8007834:	460c      	mov	r4, r1
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	4605      	mov	r5, r0
 800783a:	b911      	cbnz	r1, 8007842 <sbrk_aligned+0x12>
 800783c:	f000 f9d6 	bl	8007bec <_sbrk_r>
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f9d1 	bl	8007bec <_sbrk_r>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d00a      	beq.n	8007864 <sbrk_aligned+0x34>
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	f024 0403 	bic.w	r4, r4, #3
 8007854:	42a0      	cmp	r0, r4
 8007856:	d007      	beq.n	8007868 <sbrk_aligned+0x38>
 8007858:	1a21      	subs	r1, r4, r0
 800785a:	4628      	mov	r0, r5
 800785c:	f000 f9c6 	bl	8007bec <_sbrk_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d101      	bne.n	8007868 <sbrk_aligned+0x38>
 8007864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007868:	4620      	mov	r0, r4
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	20001c60 	.word	0x20001c60

08007870 <_malloc_r>:
 8007870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007874:	1ccd      	adds	r5, r1, #3
 8007876:	f025 0503 	bic.w	r5, r5, #3
 800787a:	3508      	adds	r5, #8
 800787c:	2d0c      	cmp	r5, #12
 800787e:	bf38      	it	cc
 8007880:	250c      	movcc	r5, #12
 8007882:	2d00      	cmp	r5, #0
 8007884:	4607      	mov	r7, r0
 8007886:	db01      	blt.n	800788c <_malloc_r+0x1c>
 8007888:	42a9      	cmp	r1, r5
 800788a:	d905      	bls.n	8007898 <_malloc_r+0x28>
 800788c:	230c      	movs	r3, #12
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	2600      	movs	r6, #0
 8007892:	4630      	mov	r0, r6
 8007894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007898:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800796c <_malloc_r+0xfc>
 800789c:	f000 f868 	bl	8007970 <__malloc_lock>
 80078a0:	f8d8 3000 	ldr.w	r3, [r8]
 80078a4:	461c      	mov	r4, r3
 80078a6:	bb5c      	cbnz	r4, 8007900 <_malloc_r+0x90>
 80078a8:	4629      	mov	r1, r5
 80078aa:	4638      	mov	r0, r7
 80078ac:	f7ff ffc0 	bl	8007830 <sbrk_aligned>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	4604      	mov	r4, r0
 80078b4:	d155      	bne.n	8007962 <_malloc_r+0xf2>
 80078b6:	f8d8 4000 	ldr.w	r4, [r8]
 80078ba:	4626      	mov	r6, r4
 80078bc:	2e00      	cmp	r6, #0
 80078be:	d145      	bne.n	800794c <_malloc_r+0xdc>
 80078c0:	2c00      	cmp	r4, #0
 80078c2:	d048      	beq.n	8007956 <_malloc_r+0xe6>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	4631      	mov	r1, r6
 80078c8:	4638      	mov	r0, r7
 80078ca:	eb04 0903 	add.w	r9, r4, r3
 80078ce:	f000 f98d 	bl	8007bec <_sbrk_r>
 80078d2:	4581      	cmp	r9, r0
 80078d4:	d13f      	bne.n	8007956 <_malloc_r+0xe6>
 80078d6:	6821      	ldr	r1, [r4, #0]
 80078d8:	1a6d      	subs	r5, r5, r1
 80078da:	4629      	mov	r1, r5
 80078dc:	4638      	mov	r0, r7
 80078de:	f7ff ffa7 	bl	8007830 <sbrk_aligned>
 80078e2:	3001      	adds	r0, #1
 80078e4:	d037      	beq.n	8007956 <_malloc_r+0xe6>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	442b      	add	r3, r5
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	f8d8 3000 	ldr.w	r3, [r8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d038      	beq.n	8007966 <_malloc_r+0xf6>
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	42a2      	cmp	r2, r4
 80078f8:	d12b      	bne.n	8007952 <_malloc_r+0xe2>
 80078fa:	2200      	movs	r2, #0
 80078fc:	605a      	str	r2, [r3, #4]
 80078fe:	e00f      	b.n	8007920 <_malloc_r+0xb0>
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	1b52      	subs	r2, r2, r5
 8007904:	d41f      	bmi.n	8007946 <_malloc_r+0xd6>
 8007906:	2a0b      	cmp	r2, #11
 8007908:	d917      	bls.n	800793a <_malloc_r+0xca>
 800790a:	1961      	adds	r1, r4, r5
 800790c:	42a3      	cmp	r3, r4
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	6059      	strne	r1, [r3, #4]
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	bf08      	it	eq
 8007918:	f8c8 1000 	streq.w	r1, [r8]
 800791c:	5162      	str	r2, [r4, r5]
 800791e:	604b      	str	r3, [r1, #4]
 8007920:	4638      	mov	r0, r7
 8007922:	f104 060b 	add.w	r6, r4, #11
 8007926:	f000 f829 	bl	800797c <__malloc_unlock>
 800792a:	f026 0607 	bic.w	r6, r6, #7
 800792e:	1d23      	adds	r3, r4, #4
 8007930:	1af2      	subs	r2, r6, r3
 8007932:	d0ae      	beq.n	8007892 <_malloc_r+0x22>
 8007934:	1b9b      	subs	r3, r3, r6
 8007936:	50a3      	str	r3, [r4, r2]
 8007938:	e7ab      	b.n	8007892 <_malloc_r+0x22>
 800793a:	42a3      	cmp	r3, r4
 800793c:	6862      	ldr	r2, [r4, #4]
 800793e:	d1dd      	bne.n	80078fc <_malloc_r+0x8c>
 8007940:	f8c8 2000 	str.w	r2, [r8]
 8007944:	e7ec      	b.n	8007920 <_malloc_r+0xb0>
 8007946:	4623      	mov	r3, r4
 8007948:	6864      	ldr	r4, [r4, #4]
 800794a:	e7ac      	b.n	80078a6 <_malloc_r+0x36>
 800794c:	4634      	mov	r4, r6
 800794e:	6876      	ldr	r6, [r6, #4]
 8007950:	e7b4      	b.n	80078bc <_malloc_r+0x4c>
 8007952:	4613      	mov	r3, r2
 8007954:	e7cc      	b.n	80078f0 <_malloc_r+0x80>
 8007956:	230c      	movs	r3, #12
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	4638      	mov	r0, r7
 800795c:	f000 f80e 	bl	800797c <__malloc_unlock>
 8007960:	e797      	b.n	8007892 <_malloc_r+0x22>
 8007962:	6025      	str	r5, [r4, #0]
 8007964:	e7dc      	b.n	8007920 <_malloc_r+0xb0>
 8007966:	605b      	str	r3, [r3, #4]
 8007968:	deff      	udf	#255	; 0xff
 800796a:	bf00      	nop
 800796c:	20001c5c 	.word	0x20001c5c

08007970 <__malloc_lock>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__malloc_lock+0x8>)
 8007972:	f7ff bf00 	b.w	8007776 <__retarget_lock_acquire_recursive>
 8007976:	bf00      	nop
 8007978:	20001c58 	.word	0x20001c58

0800797c <__malloc_unlock>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__malloc_unlock+0x8>)
 800797e:	f7ff befb 	b.w	8007778 <__retarget_lock_release_recursive>
 8007982:	bf00      	nop
 8007984:	20001c58 	.word	0x20001c58

08007988 <__sflush_r>:
 8007988:	898a      	ldrh	r2, [r1, #12]
 800798a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	4605      	mov	r5, r0
 8007990:	0710      	lsls	r0, r2, #28
 8007992:	460c      	mov	r4, r1
 8007994:	d458      	bmi.n	8007a48 <__sflush_r+0xc0>
 8007996:	684b      	ldr	r3, [r1, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	dc05      	bgt.n	80079a8 <__sflush_r+0x20>
 800799c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dc02      	bgt.n	80079a8 <__sflush_r+0x20>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d0f9      	beq.n	80079a2 <__sflush_r+0x1a>
 80079ae:	2300      	movs	r3, #0
 80079b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079b4:	682f      	ldr	r7, [r5, #0]
 80079b6:	6a21      	ldr	r1, [r4, #32]
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	d032      	beq.n	8007a22 <__sflush_r+0x9a>
 80079bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	075a      	lsls	r2, r3, #29
 80079c2:	d505      	bpl.n	80079d0 <__sflush_r+0x48>
 80079c4:	6863      	ldr	r3, [r4, #4]
 80079c6:	1ac0      	subs	r0, r0, r3
 80079c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ca:	b10b      	cbz	r3, 80079d0 <__sflush_r+0x48>
 80079cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079ce:	1ac0      	subs	r0, r0, r3
 80079d0:	2300      	movs	r3, #0
 80079d2:	4602      	mov	r2, r0
 80079d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079d6:	6a21      	ldr	r1, [r4, #32]
 80079d8:	4628      	mov	r0, r5
 80079da:	47b0      	blx	r6
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	d106      	bne.n	80079f0 <__sflush_r+0x68>
 80079e2:	6829      	ldr	r1, [r5, #0]
 80079e4:	291d      	cmp	r1, #29
 80079e6:	d82b      	bhi.n	8007a40 <__sflush_r+0xb8>
 80079e8:	4a29      	ldr	r2, [pc, #164]	; (8007a90 <__sflush_r+0x108>)
 80079ea:	410a      	asrs	r2, r1
 80079ec:	07d6      	lsls	r6, r2, #31
 80079ee:	d427      	bmi.n	8007a40 <__sflush_r+0xb8>
 80079f0:	2200      	movs	r2, #0
 80079f2:	6062      	str	r2, [r4, #4]
 80079f4:	04d9      	lsls	r1, r3, #19
 80079f6:	6922      	ldr	r2, [r4, #16]
 80079f8:	6022      	str	r2, [r4, #0]
 80079fa:	d504      	bpl.n	8007a06 <__sflush_r+0x7e>
 80079fc:	1c42      	adds	r2, r0, #1
 80079fe:	d101      	bne.n	8007a04 <__sflush_r+0x7c>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b903      	cbnz	r3, 8007a06 <__sflush_r+0x7e>
 8007a04:	6560      	str	r0, [r4, #84]	; 0x54
 8007a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a08:	602f      	str	r7, [r5, #0]
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d0c9      	beq.n	80079a2 <__sflush_r+0x1a>
 8007a0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a12:	4299      	cmp	r1, r3
 8007a14:	d002      	beq.n	8007a1c <__sflush_r+0x94>
 8007a16:	4628      	mov	r0, r5
 8007a18:	f7ff febe 	bl	8007798 <_free_r>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	6360      	str	r0, [r4, #52]	; 0x34
 8007a20:	e7c0      	b.n	80079a4 <__sflush_r+0x1c>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b0      	blx	r6
 8007a28:	1c41      	adds	r1, r0, #1
 8007a2a:	d1c8      	bne.n	80079be <__sflush_r+0x36>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0c5      	beq.n	80079be <__sflush_r+0x36>
 8007a32:	2b1d      	cmp	r3, #29
 8007a34:	d001      	beq.n	8007a3a <__sflush_r+0xb2>
 8007a36:	2b16      	cmp	r3, #22
 8007a38:	d101      	bne.n	8007a3e <__sflush_r+0xb6>
 8007a3a:	602f      	str	r7, [r5, #0]
 8007a3c:	e7b1      	b.n	80079a2 <__sflush_r+0x1a>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	e7ad      	b.n	80079a4 <__sflush_r+0x1c>
 8007a48:	690f      	ldr	r7, [r1, #16]
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d0a9      	beq.n	80079a2 <__sflush_r+0x1a>
 8007a4e:	0793      	lsls	r3, r2, #30
 8007a50:	680e      	ldr	r6, [r1, #0]
 8007a52:	bf08      	it	eq
 8007a54:	694b      	ldreq	r3, [r1, #20]
 8007a56:	600f      	str	r7, [r1, #0]
 8007a58:	bf18      	it	ne
 8007a5a:	2300      	movne	r3, #0
 8007a5c:	eba6 0807 	sub.w	r8, r6, r7
 8007a60:	608b      	str	r3, [r1, #8]
 8007a62:	f1b8 0f00 	cmp.w	r8, #0
 8007a66:	dd9c      	ble.n	80079a2 <__sflush_r+0x1a>
 8007a68:	6a21      	ldr	r1, [r4, #32]
 8007a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a6c:	4643      	mov	r3, r8
 8007a6e:	463a      	mov	r2, r7
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	2800      	cmp	r0, #0
 8007a76:	dc06      	bgt.n	8007a86 <__sflush_r+0xfe>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7e:	81a3      	strh	r3, [r4, #12]
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a84:	e78e      	b.n	80079a4 <__sflush_r+0x1c>
 8007a86:	4407      	add	r7, r0
 8007a88:	eba8 0800 	sub.w	r8, r8, r0
 8007a8c:	e7e9      	b.n	8007a62 <__sflush_r+0xda>
 8007a8e:	bf00      	nop
 8007a90:	dfbffffe 	.word	0xdfbffffe

08007a94 <_fflush_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	4605      	mov	r5, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	b913      	cbnz	r3, 8007aa4 <_fflush_r+0x10>
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	b118      	cbz	r0, 8007aae <_fflush_r+0x1a>
 8007aa6:	6a03      	ldr	r3, [r0, #32]
 8007aa8:	b90b      	cbnz	r3, 8007aae <_fflush_r+0x1a>
 8007aaa:	f7ff fc2b 	bl	8007304 <__sinit>
 8007aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f3      	beq.n	8007a9e <_fflush_r+0xa>
 8007ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ab8:	07d0      	lsls	r0, r2, #31
 8007aba:	d404      	bmi.n	8007ac6 <_fflush_r+0x32>
 8007abc:	0599      	lsls	r1, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_fflush_r+0x32>
 8007ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ac2:	f7ff fe58 	bl	8007776 <__retarget_lock_acquire_recursive>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	4621      	mov	r1, r4
 8007aca:	f7ff ff5d 	bl	8007988 <__sflush_r>
 8007ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ad0:	07da      	lsls	r2, r3, #31
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	d4e4      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	059b      	lsls	r3, r3, #22
 8007ada:	d4e1      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ade:	f7ff fe4b 	bl	8007778 <__retarget_lock_release_recursive>
 8007ae2:	e7dd      	b.n	8007aa0 <_fflush_r+0xc>

08007ae4 <__swhatbuf_r>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aec:	2900      	cmp	r1, #0
 8007aee:	b096      	sub	sp, #88	; 0x58
 8007af0:	4615      	mov	r5, r2
 8007af2:	461e      	mov	r6, r3
 8007af4:	da0d      	bge.n	8007b12 <__swhatbuf_r+0x2e>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007afc:	f04f 0100 	mov.w	r1, #0
 8007b00:	bf0c      	ite	eq
 8007b02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b06:	2340      	movne	r3, #64	; 0x40
 8007b08:	2000      	movs	r0, #0
 8007b0a:	6031      	str	r1, [r6, #0]
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	b016      	add	sp, #88	; 0x58
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	466a      	mov	r2, sp
 8007b14:	f000 f848 	bl	8007ba8 <_fstat_r>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	dbec      	blt.n	8007af6 <__swhatbuf_r+0x12>
 8007b1c:	9901      	ldr	r1, [sp, #4]
 8007b1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b26:	4259      	negs	r1, r3
 8007b28:	4159      	adcs	r1, r3
 8007b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b2e:	e7eb      	b.n	8007b08 <__swhatbuf_r+0x24>

08007b30 <__smakebuf_r>:
 8007b30:	898b      	ldrh	r3, [r1, #12]
 8007b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b34:	079d      	lsls	r5, r3, #30
 8007b36:	4606      	mov	r6, r0
 8007b38:	460c      	mov	r4, r1
 8007b3a:	d507      	bpl.n	8007b4c <__smakebuf_r+0x1c>
 8007b3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	2301      	movs	r3, #1
 8007b46:	6163      	str	r3, [r4, #20]
 8007b48:	b002      	add	sp, #8
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	ab01      	add	r3, sp, #4
 8007b4e:	466a      	mov	r2, sp
 8007b50:	f7ff ffc8 	bl	8007ae4 <__swhatbuf_r>
 8007b54:	9900      	ldr	r1, [sp, #0]
 8007b56:	4605      	mov	r5, r0
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7ff fe89 	bl	8007870 <_malloc_r>
 8007b5e:	b948      	cbnz	r0, 8007b74 <__smakebuf_r+0x44>
 8007b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b64:	059a      	lsls	r2, r3, #22
 8007b66:	d4ef      	bmi.n	8007b48 <__smakebuf_r+0x18>
 8007b68:	f023 0303 	bic.w	r3, r3, #3
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	e7e3      	b.n	8007b3c <__smakebuf_r+0xc>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	6020      	str	r0, [r4, #0]
 8007b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	9b00      	ldr	r3, [sp, #0]
 8007b80:	6163      	str	r3, [r4, #20]
 8007b82:	9b01      	ldr	r3, [sp, #4]
 8007b84:	6120      	str	r0, [r4, #16]
 8007b86:	b15b      	cbz	r3, 8007ba0 <__smakebuf_r+0x70>
 8007b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f81d 	bl	8007bcc <_isatty_r>
 8007b92:	b128      	cbz	r0, 8007ba0 <__smakebuf_r+0x70>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	f023 0303 	bic.w	r3, r3, #3
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	431d      	orrs	r5, r3
 8007ba4:	81a5      	strh	r5, [r4, #12]
 8007ba6:	e7cf      	b.n	8007b48 <__smakebuf_r+0x18>

08007ba8 <_fstat_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d07      	ldr	r5, [pc, #28]	; (8007bc8 <_fstat_r+0x20>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	602b      	str	r3, [r5, #0]
 8007bb6:	f7f8 ff5b 	bl	8000a70 <_fstat>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	d102      	bne.n	8007bc4 <_fstat_r+0x1c>
 8007bbe:	682b      	ldr	r3, [r5, #0]
 8007bc0:	b103      	cbz	r3, 8007bc4 <_fstat_r+0x1c>
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20001c54 	.word	0x20001c54

08007bcc <_isatty_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d06      	ldr	r5, [pc, #24]	; (8007be8 <_isatty_r+0x1c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	f7f8 ff5a 	bl	8000a90 <_isatty>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_isatty_r+0x1a>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_isatty_r+0x1a>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	20001c54 	.word	0x20001c54

08007bec <_sbrk_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d06      	ldr	r5, [pc, #24]	; (8007c08 <_sbrk_r+0x1c>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	f7f8 ff62 	bl	8000ac0 <_sbrk>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_sbrk_r+0x1a>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_sbrk_r+0x1a>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	20001c54 	.word	0x20001c54

08007c0c <_init>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr

08007c18 <_fini>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	bf00      	nop
 8007c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1e:	bc08      	pop	{r3}
 8007c20:	469e      	mov	lr, r3
 8007c22:	4770      	bx	lr
